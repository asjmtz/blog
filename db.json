{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/usagi/source/image/cloud-bg.svg","path":"image/cloud-bg.svg","modified":0,"renderable":1},{"_id":"themes/usagi/source/image/author-image.svg","path":"image/author-image.svg","modified":0,"renderable":1},{"_id":"themes/usagi/source/css/index.scss","path":"css/index.scss","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/images/flags.png","path":"Semantic-UI/themes/default/assets/images/flags.png","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.woff2","path":"Semantic-UI/themes/default/assets/fonts/icons.woff2","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.woff","path":"Semantic-UI/themes/default/assets/fonts/icons.woff","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.ttf","path":"Semantic-UI/themes/default/assets/fonts/icons.ttf","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.svg","path":"Semantic-UI/themes/default/assets/fonts/icons.svg","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.otf","path":"Semantic-UI/themes/default/assets/fonts/icons.otf","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.eot","path":"Semantic-UI/themes/default/assets/fonts/icons.eot","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.woff","path":"Semantic-UI/themes/basic/assets/fonts/icons.woff","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.ttf","path":"Semantic-UI/themes/basic/assets/fonts/icons.ttf","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.svg","path":"Semantic-UI/themes/basic/assets/fonts/icons.svg","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.eot","path":"Semantic-UI/themes/basic/assets/fonts/icons.eot","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/semantic.min.js","path":"Semantic-UI/semantic.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/semantic.min.css","path":"Semantic-UI/semantic.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/semantic.js","path":"Semantic-UI/semantic.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/semantic.css","path":"Semantic-UI/semantic.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/visit.min.js","path":"Semantic-UI/components/visit.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/visit.js","path":"Semantic-UI/components/visit.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/visibility.min.js","path":"Semantic-UI/components/visibility.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/visibility.js","path":"Semantic-UI/components/visibility.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/video.min.js","path":"Semantic-UI/components/video.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/video.min.css","path":"Semantic-UI/components/video.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/video.js","path":"Semantic-UI/components/video.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/video.css","path":"Semantic-UI/components/video.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/transition.min.js","path":"Semantic-UI/components/transition.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/transition.min.css","path":"Semantic-UI/components/transition.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/transition.js","path":"Semantic-UI/components/transition.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/transition.css","path":"Semantic-UI/components/transition.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/table.min.css","path":"Semantic-UI/components/table.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/table.css","path":"Semantic-UI/components/table.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/tab.min.js","path":"Semantic-UI/components/tab.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/tab.min.css","path":"Semantic-UI/components/tab.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/tab.js","path":"Semantic-UI/components/tab.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/tab.css","path":"Semantic-UI/components/tab.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.min.js","path":"Semantic-UI/components/sticky.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.min.css","path":"Semantic-UI/components/sticky.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.js","path":"Semantic-UI/components/sticky.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.css","path":"Semantic-UI/components/sticky.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/step.min.css","path":"Semantic-UI/components/step.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/step.css","path":"Semantic-UI/components/step.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/statistic.min.css","path":"Semantic-UI/components/statistic.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/statistic.css","path":"Semantic-UI/components/statistic.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/state.min.js","path":"Semantic-UI/components/state.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/state.js","path":"Semantic-UI/components/state.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/site.min.js","path":"Semantic-UI/components/site.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/site.min.css","path":"Semantic-UI/components/site.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/site.js","path":"Semantic-UI/components/site.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/site.css","path":"Semantic-UI/components/site.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.min.js","path":"Semantic-UI/components/sidebar.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.min.css","path":"Semantic-UI/components/sidebar.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.js","path":"Semantic-UI/components/sidebar.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.css","path":"Semantic-UI/components/sidebar.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/shape.min.js","path":"Semantic-UI/components/shape.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/shape.min.css","path":"Semantic-UI/components/shape.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/shape.js","path":"Semantic-UI/components/shape.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/shape.css","path":"Semantic-UI/components/shape.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/segment.min.css","path":"Semantic-UI/components/segment.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/segment.css","path":"Semantic-UI/components/segment.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/search.min.js","path":"Semantic-UI/components/search.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/search.min.css","path":"Semantic-UI/components/search.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/search.js","path":"Semantic-UI/components/search.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/search.css","path":"Semantic-UI/components/search.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/reveal.min.css","path":"Semantic-UI/components/reveal.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/reveal.css","path":"Semantic-UI/components/reveal.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/reset.min.css","path":"Semantic-UI/components/reset.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/reset.css","path":"Semantic-UI/components/reset.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/rating.min.js","path":"Semantic-UI/components/rating.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/rating.min.css","path":"Semantic-UI/components/rating.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/rating.js","path":"Semantic-UI/components/rating.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/rating.css","path":"Semantic-UI/components/rating.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/rail.min.css","path":"Semantic-UI/components/rail.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/rail.css","path":"Semantic-UI/components/rail.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/progress.min.js","path":"Semantic-UI/components/progress.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/progress.min.css","path":"Semantic-UI/components/progress.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/progress.js","path":"Semantic-UI/components/progress.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/progress.css","path":"Semantic-UI/components/progress.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/popup.min.js","path":"Semantic-UI/components/popup.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/popup.min.css","path":"Semantic-UI/components/popup.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/popup.js","path":"Semantic-UI/components/popup.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/popup.css","path":"Semantic-UI/components/popup.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/nag.min.js","path":"Semantic-UI/components/nag.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/nag.min.css","path":"Semantic-UI/components/nag.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/nag.js","path":"Semantic-UI/components/nag.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/nag.css","path":"Semantic-UI/components/nag.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/modal.min.js","path":"Semantic-UI/components/modal.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/modal.min.css","path":"Semantic-UI/components/modal.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/modal.js","path":"Semantic-UI/components/modal.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/modal.css","path":"Semantic-UI/components/modal.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/message.min.css","path":"Semantic-UI/components/message.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/message.css","path":"Semantic-UI/components/message.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/menu.min.css","path":"Semantic-UI/components/menu.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/menu.css","path":"Semantic-UI/components/menu.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/loader.min.css","path":"Semantic-UI/components/loader.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/loader.css","path":"Semantic-UI/components/loader.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/list.min.css","path":"Semantic-UI/components/list.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/list.css","path":"Semantic-UI/components/list.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/label.min.css","path":"Semantic-UI/components/label.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/label.css","path":"Semantic-UI/components/label.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/item.min.css","path":"Semantic-UI/components/item.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/item.css","path":"Semantic-UI/components/item.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/input.min.css","path":"Semantic-UI/components/input.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/input.css","path":"Semantic-UI/components/input.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/image.min.css","path":"Semantic-UI/components/image.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/image.css","path":"Semantic-UI/components/image.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/icon.min.css","path":"Semantic-UI/components/icon.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/icon.css","path":"Semantic-UI/components/icon.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/header.min.css","path":"Semantic-UI/components/header.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/header.css","path":"Semantic-UI/components/header.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/grid.min.css","path":"Semantic-UI/components/grid.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/grid.css","path":"Semantic-UI/components/grid.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/form.min.js","path":"Semantic-UI/components/form.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/form.min.css","path":"Semantic-UI/components/form.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/form.js","path":"Semantic-UI/components/form.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/form.css","path":"Semantic-UI/components/form.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/flag.min.css","path":"Semantic-UI/components/flag.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/flag.css","path":"Semantic-UI/components/flag.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/feed.min.css","path":"Semantic-UI/components/feed.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/feed.css","path":"Semantic-UI/components/feed.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/embed.min.js","path":"Semantic-UI/components/embed.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/embed.min.css","path":"Semantic-UI/components/embed.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/embed.js","path":"Semantic-UI/components/embed.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/embed.css","path":"Semantic-UI/components/embed.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.min.js","path":"Semantic-UI/components/dropdown.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.min.css","path":"Semantic-UI/components/dropdown.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.js","path":"Semantic-UI/components/dropdown.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.css","path":"Semantic-UI/components/dropdown.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/divider.min.css","path":"Semantic-UI/components/divider.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/divider.css","path":"Semantic-UI/components/divider.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.min.js","path":"Semantic-UI/components/dimmer.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.min.css","path":"Semantic-UI/components/dimmer.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.js","path":"Semantic-UI/components/dimmer.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.css","path":"Semantic-UI/components/dimmer.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/container.min.css","path":"Semantic-UI/components/container.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/container.css","path":"Semantic-UI/components/container.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/comment.min.css","path":"Semantic-UI/components/comment.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/comment.css","path":"Semantic-UI/components/comment.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/colorize.min.js","path":"Semantic-UI/components/colorize.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/colorize.js","path":"Semantic-UI/components/colorize.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.min.js","path":"Semantic-UI/components/checkbox.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.min.css","path":"Semantic-UI/components/checkbox.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.js","path":"Semantic-UI/components/checkbox.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.css","path":"Semantic-UI/components/checkbox.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/card.min.css","path":"Semantic-UI/components/card.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/card.css","path":"Semantic-UI/components/card.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/button.min.css","path":"Semantic-UI/components/button.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/button.css","path":"Semantic-UI/components/button.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/breadcrumb.min.css","path":"Semantic-UI/components/breadcrumb.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/breadcrumb.css","path":"Semantic-UI/components/breadcrumb.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/api.min.js","path":"Semantic-UI/components/api.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/api.js","path":"Semantic-UI/components/api.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/ad.min.css","path":"Semantic-UI/components/ad.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/ad.css","path":"Semantic-UI/components/ad.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.min.js","path":"Semantic-UI/components/accordion.min.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.min.css","path":"Semantic-UI/components/accordion.min.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.js","path":"Semantic-UI/components/accordion.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.css","path":"Semantic-UI/components/accordion.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/CHANGES.md","path":"highlight/CHANGES.md","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/zenburn.css","path":"highlight/styles/zenburn.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/xcode.css","path":"highlight/styles/xcode.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/vs.css","path":"highlight/styles/vs.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/tomorrow.css","path":"highlight/styles/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night.css","path":"highlight/styles/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night-eighties.css","path":"highlight/styles/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night-bright.css","path":"highlight/styles/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night-blue.css","path":"highlight/styles/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/sunburst.css","path":"highlight/styles/sunburst.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/solarized-light.css","path":"highlight/styles/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/solarized-dark.css","path":"highlight/styles/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/school-book.png","path":"highlight/styles/school-book.png","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/school-book.css","path":"highlight/styles/school-book.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/rainbow.css","path":"highlight/styles/rainbow.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/railscasts.css","path":"highlight/styles/railscasts.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/qtcreator_light.css","path":"highlight/styles/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/qtcreator_dark.css","path":"highlight/styles/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/pojoaque.jpg","path":"highlight/styles/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/pojoaque.css","path":"highlight/styles/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/paraiso-light.css","path":"highlight/styles/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/paraiso-dark.css","path":"highlight/styles/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/obsidian.css","path":"highlight/styles/obsidian.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/monokai.css","path":"highlight/styles/monokai.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/monokai-sublime.css","path":"highlight/styles/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/mono-blue.css","path":"highlight/styles/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/magula.css","path":"highlight/styles/magula.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/kimbie.light.css","path":"highlight/styles/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/kimbie.dark.css","path":"highlight/styles/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/ir-black.css","path":"highlight/styles/ir-black.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/idea.css","path":"highlight/styles/idea.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/hybrid.css","path":"highlight/styles/hybrid.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/hopscotch.css","path":"highlight/styles/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/gruvbox-light.css","path":"highlight/styles/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/gruvbox-dark.css","path":"highlight/styles/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/grayscale.css","path":"highlight/styles/grayscale.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/googlecode.css","path":"highlight/styles/googlecode.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/github.css","path":"highlight/styles/github.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/github-gist.css","path":"highlight/styles/github-gist.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/foundation.css","path":"highlight/styles/foundation.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/far.css","path":"highlight/styles/far.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/dracula.css","path":"highlight/styles/dracula.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/docco.css","path":"highlight/styles/docco.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/default.css","path":"highlight/styles/default.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/darkula.css","path":"highlight/styles/darkula.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/dark.css","path":"highlight/styles/dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/color-brewer.css","path":"highlight/styles/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/codepen-embed.css","path":"highlight/styles/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/brown-papersq.png","path":"highlight/styles/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/brown-paper.css","path":"highlight/styles/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-sulphurpool-light.css","path":"highlight/styles/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-sulphurpool-dark.css","path":"highlight/styles/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-seaside-light.css","path":"highlight/styles/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-seaside-dark.css","path":"highlight/styles/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-savanna-light.css","path":"highlight/styles/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-savanna-dark.css","path":"highlight/styles/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-plateau-light.css","path":"highlight/styles/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-plateau-dark.css","path":"highlight/styles/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-lakeside-light.css","path":"highlight/styles/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-lakeside-dark.css","path":"highlight/styles/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-heath-light.css","path":"highlight/styles/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-heath-dark.css","path":"highlight/styles/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-forest-light.css","path":"highlight/styles/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-forest-dark.css","path":"highlight/styles/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-estuary-light.css","path":"highlight/styles/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-estuary-dark.css","path":"highlight/styles/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-dune-light.css","path":"highlight/styles/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-dune-dark.css","path":"highlight/styles/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-cave-light.css","path":"highlight/styles/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/atelier-cave-dark.css","path":"highlight/styles/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/ascetic.css","path":"highlight/styles/ascetic.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/arta.css","path":"highlight/styles/arta.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/arduino-light.css","path":"highlight/styles/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/androidstudio.css","path":"highlight/styles/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/styles/agate.css","path":"highlight/styles/agate.css","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/highlight.pack.js","path":"highlight/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/README.ru.md","path":"highlight/README.ru.md","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/README.md","path":"highlight/README.md","modified":0,"renderable":1},{"_id":"themes/usagi/source/highlight/LICENSE","path":"highlight/LICENSE","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","shasum":"7bf99a3c68ac83fd8570c0f2a330a0ac0a45bdfb","modified":1459156453539,"hash":"7bf99a3c68ac83fd8570c0f2a330a0ac0a45bdfb"},{"_id":"source/_posts/test-post.md","shasum":"69891985d8267095055592c2ce67c84a6b4581a8","modified":1458466344000},{"_id":"themes/usagi/source/css/partial/_footer.scss","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459156453722,"hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709"},{"_id":"themes/usagi/layout/index.ejs","shasum":"221107a9e8396001c1cbc9449d2d6ca99b307e6e","modified":1459156453603,"hash":"221107a9e8396001c1cbc9449d2d6ca99b307e6e"},{"_id":"themes/usagi/layout/layout.ejs","shasum":"a66d607d82d2749f5f785b443279cfc2c457d683","modified":1459156453603,"hash":"a66d607d82d2749f5f785b443279cfc2c457d683"},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.css","shasum":"3f76d880441251e622b44e4a569ba32c5c1ecea2","modified":1459156453606,"hash":"3f76d880441251e622b44e4a569ba32c5c1ecea2"},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.min.css","shasum":"f3644ad1b1aece623e00396d91ac86130b5da169","modified":1459156453608,"hash":"f3644ad1b1aece623e00396d91ac86130b5da169"},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.js","shasum":"8a5f2183a11f42e04ba5b8366aa8d867efa99223","modified":1459156453607,"hash":"8a5f2183a11f42e04ba5b8366aa8d867efa99223"},{"_id":"themes/usagi/source/Semantic-UI/components/accordion.min.js","shasum":"1cc39733d0bc1043e4354286e7a1f4402df16dbb","modified":1459156453608,"hash":"1cc39733d0bc1043e4354286e7a1f4402df16dbb"},{"_id":"themes/usagi/layout/post.ejs","shasum":"fc8297493a9ed440af2d747f59cd923fe3345670","modified":1459156453604,"hash":"fc8297493a9ed440af2d747f59cd923fe3345670"},{"_id":"themes/usagi/source/Semantic-UI/components/ad.css","shasum":"f890ec539e660517ae3b7af08de30a692bd7b7dd","modified":1459156453609,"hash":"f890ec539e660517ae3b7af08de30a692bd7b7dd"},{"_id":"themes/usagi/source/Semantic-UI/components/ad.min.css","shasum":"dc1eb8ab894437e7e2936879bce730c57435d46a","modified":1459156453609,"hash":"dc1eb8ab894437e7e2936879bce730c57435d46a"},{"_id":"themes/usagi/source/Semantic-UI/components/api.js","shasum":"65b54df2bec071fa3c772349a124511d5b070889","modified":1459156453610,"hash":"65b54df2bec071fa3c772349a124511d5b070889"},{"_id":"themes/usagi/source/Semantic-UI/components/api.min.js","shasum":"3c47622e1e7144001bd790c4e4effb58ba7cf26d","modified":1459156453611,"hash":"3c47622e1e7144001bd790c4e4effb58ba7cf26d"},{"_id":"themes/usagi/source/Semantic-UI/components/breadcrumb.css","shasum":"7a077ab695ca2e22281b4fcbe95a3f556470d160","modified":1459156453611,"hash":"7a077ab695ca2e22281b4fcbe95a3f556470d160"},{"_id":"themes/usagi/source/Semantic-UI/components/breadcrumb.min.css","shasum":"4fce94183bee9a2952e77e02b9566c4b91e5d919","modified":1459156453612,"hash":"4fce94183bee9a2952e77e02b9566c4b91e5d919"},{"_id":"themes/usagi/source/Semantic-UI/components/card.min.css","shasum":"e0f4ee44162ce7707b485388b8fc3d42b50d3912","modified":1459156453615,"hash":"e0f4ee44162ce7707b485388b8fc3d42b50d3912"},{"_id":"themes/usagi/source/Semantic-UI/components/card.css","shasum":"773dccbdead910e53ef4ebf7a4120b6dacf4e26a","modified":1459156453615,"hash":"773dccbdead910e53ef4ebf7a4120b6dacf4e26a"},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.css","shasum":"89ba73f64d654c4f59140c7762241f8b5a6176ef","modified":1459156453616,"hash":"89ba73f64d654c4f59140c7762241f8b5a6176ef"},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.min.css","shasum":"b35f45a65e7192e20d79c0d20570c2767c142bff","modified":1459156453617,"hash":"b35f45a65e7192e20d79c0d20570c2767c142bff"},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.min.js","shasum":"c2e1afdf85b7ebc3a2c43dc0207a38af48df9488","modified":1459156453618,"hash":"c2e1afdf85b7ebc3a2c43dc0207a38af48df9488"},{"_id":"themes/usagi/source/Semantic-UI/components/checkbox.js","shasum":"b5f5769524a54ac6e89ec10bb4d7ac73d93cf61c","modified":1459156453617,"hash":"b5f5769524a54ac6e89ec10bb4d7ac73d93cf61c"},{"_id":"themes/usagi/source/Semantic-UI/components/colorize.js","shasum":"53c1167db91569a3213eeb6871e4016d45fed122","modified":1459156453619,"hash":"53c1167db91569a3213eeb6871e4016d45fed122"},{"_id":"themes/usagi/source/Semantic-UI/components/comment.css","shasum":"038c1302a1e59e324f6dac413f111149f17c3832","modified":1459156453620,"hash":"038c1302a1e59e324f6dac413f111149f17c3832"},{"_id":"themes/usagi/source/Semantic-UI/components/colorize.min.js","shasum":"361b9cb6eee40fee492ce9df113f43db8f533542","modified":1459156453619,"hash":"361b9cb6eee40fee492ce9df113f43db8f533542"},{"_id":"themes/usagi/source/Semantic-UI/components/comment.min.css","shasum":"12854129c4ea8e1cfa3fe00ada3a0afa70ae35bf","modified":1459156453621,"hash":"12854129c4ea8e1cfa3fe00ada3a0afa70ae35bf"},{"_id":"themes/usagi/source/Semantic-UI/components/container.css","shasum":"9343a5eee2e7713a16524b3b0b3d6de97c834576","modified":1459156453622,"hash":"9343a5eee2e7713a16524b3b0b3d6de97c834576"},{"_id":"themes/usagi/source/Semantic-UI/components/container.min.css","shasum":"43e87701642e538958c8da1c165fd61d8c2211c2","modified":1459156453622,"hash":"43e87701642e538958c8da1c165fd61d8c2211c2"},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.css","shasum":"8c5819e54a4189deb94d3ae3edaf57c2c0f8ec70","modified":1459156453623,"hash":"8c5819e54a4189deb94d3ae3edaf57c2c0f8ec70"},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.min.css","shasum":"62c36337ec08fbc8add6ef59e110dc1389b90a00","modified":1459156453624,"hash":"62c36337ec08fbc8add6ef59e110dc1389b90a00"},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.min.js","shasum":"8f9a75d19720e8986f5a1ed88dc4ea2f3c588a66","modified":1459156453625,"hash":"8f9a75d19720e8986f5a1ed88dc4ea2f3c588a66"},{"_id":"themes/usagi/source/Semantic-UI/components/dimmer.js","shasum":"f58fdc30ff851854fb9b93bccf1f234375e8eea2","modified":1459156453624,"hash":"f58fdc30ff851854fb9b93bccf1f234375e8eea2"},{"_id":"themes/usagi/source/Semantic-UI/components/divider.css","shasum":"78d65bcb917a32432586b25512faf5741a0118e1","modified":1459156453625,"hash":"78d65bcb917a32432586b25512faf5741a0118e1"},{"_id":"themes/usagi/source/Semantic-UI/components/divider.min.css","shasum":"2df9cb4bd090b63f249a8f854e0986905dd04609","modified":1459156453626,"hash":"2df9cb4bd090b63f249a8f854e0986905dd04609"},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.css","shasum":"d4286b7dc547fd61f45f1d58d1aa551897712f1f","modified":1459156453627,"hash":"d4286b7dc547fd61f45f1d58d1aa551897712f1f"},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.min.css","shasum":"917fb1dd0fed2b3f5779283c6bb15325e26abf02","modified":1459156453628,"hash":"917fb1dd0fed2b3f5779283c6bb15325e26abf02"},{"_id":"themes/usagi/source/Semantic-UI/components/embed.css","shasum":"57739146220616c5da1c97b4697627553860b8bf","modified":1459156453630,"hash":"57739146220616c5da1c97b4697627553860b8bf"},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.min.js","shasum":"281c23abd474411e2bde706eac9ca41108006692","modified":1459156453629,"hash":"281c23abd474411e2bde706eac9ca41108006692"},{"_id":"themes/usagi/source/Semantic-UI/components/embed.js","shasum":"bf70ef5864280cb8f7c3e357be00cdaea65a471e","modified":1459156453631,"hash":"bf70ef5864280cb8f7c3e357be00cdaea65a471e"},{"_id":"themes/usagi/source/Semantic-UI/components/embed.min.css","shasum":"49647d0e7a255c4d9afad1b5768760cc67dd88a1","modified":1459156453631,"hash":"49647d0e7a255c4d9afad1b5768760cc67dd88a1"},{"_id":"themes/usagi/source/Semantic-UI/components/feed.css","shasum":"540877988832592aa46e3ae8eecc92651097aea1","modified":1459156453633,"hash":"540877988832592aa46e3ae8eecc92651097aea1"},{"_id":"themes/usagi/source/Semantic-UI/components/embed.min.js","shasum":"21c9a1a67ef1a3765c9e45c6cf3cfbfae81876a2","modified":1459156453632,"hash":"21c9a1a67ef1a3765c9e45c6cf3cfbfae81876a2"},{"_id":"themes/usagi/source/Semantic-UI/components/feed.min.css","shasum":"1853cbdf077ac5df630ba568e19750106077efe9","modified":1459156453633,"hash":"1853cbdf077ac5df630ba568e19750106077efe9"},{"_id":"themes/usagi/source/Semantic-UI/components/flag.css","shasum":"e2b4a4a8edb43ee4cd88814f769b8d3ecad54337","modified":1459156453634,"hash":"e2b4a4a8edb43ee4cd88814f769b8d3ecad54337"},{"_id":"themes/usagi/source/Semantic-UI/components/flag.min.css","shasum":"35472a05ed0e1886f5e09a86f684684853f56c7e","modified":1459156453635,"hash":"35472a05ed0e1886f5e09a86f684684853f56c7e"},{"_id":"themes/usagi/source/Semantic-UI/components/form.css","shasum":"492140633a7845f5aea31311307d81cea9d05d37","modified":1459156453635,"hash":"492140633a7845f5aea31311307d81cea9d05d37"},{"_id":"themes/usagi/source/Semantic-UI/components/form.min.css","shasum":"3abe943f323ce43a65d28e135a4bb345a198e364","modified":1459156453637,"hash":"3abe943f323ce43a65d28e135a4bb345a198e364"},{"_id":"themes/usagi/source/Semantic-UI/components/form.js","shasum":"af161007073cdead99772b7bcecfa79f38657ab0","modified":1459156453636,"hash":"af161007073cdead99772b7bcecfa79f38657ab0"},{"_id":"themes/usagi/source/Semantic-UI/components/form.min.js","shasum":"977ca8a95594cd67da0654e64e8be33c06c99266","modified":1459156453637,"hash":"977ca8a95594cd67da0654e64e8be33c06c99266"},{"_id":"themes/usagi/source/Semantic-UI/components/grid.css","shasum":"fc3e7a7f7b51dc62896403d2876eab094117f969","modified":1459156453639,"hash":"fc3e7a7f7b51dc62896403d2876eab094117f969"},{"_id":"themes/usagi/source/Semantic-UI/components/header.css","shasum":"1b4d8d2c770593d8b5967ed5b2e780fabb0a7785","modified":1459156453640,"hash":"1b4d8d2c770593d8b5967ed5b2e780fabb0a7785"},{"_id":"themes/usagi/source/Semantic-UI/components/header.min.css","shasum":"2202c9f3e1873bb26ca4b7c2ab2caf82c6bc8199","modified":1459156453641,"hash":"2202c9f3e1873bb26ca4b7c2ab2caf82c6bc8199"},{"_id":"themes/usagi/source/Semantic-UI/components/grid.min.css","shasum":"3bfca9e8b11f4f44ddb3b0ab14a258852616b962","modified":1459156453639,"hash":"3bfca9e8b11f4f44ddb3b0ab14a258852616b962"},{"_id":"themes/usagi/source/Semantic-UI/components/icon.css","shasum":"ddc0a2738983e1e03dc3d5db5bf829cac13dbc4f","modified":1459156453642,"hash":"ddc0a2738983e1e03dc3d5db5bf829cac13dbc4f"},{"_id":"themes/usagi/source/Semantic-UI/components/icon.min.css","shasum":"477ae0c3ddda6bc6b4599d9be7380e9b8b927ccd","modified":1459156453642,"hash":"477ae0c3ddda6bc6b4599d9be7380e9b8b927ccd"},{"_id":"themes/usagi/source/Semantic-UI/components/image.css","shasum":"ed69f4dd43534687b9f1a1b7fb486ed8045b77af","modified":1459156453643,"hash":"ed69f4dd43534687b9f1a1b7fb486ed8045b77af"},{"_id":"themes/usagi/source/Semantic-UI/components/image.min.css","shasum":"0ccc409a0e875444cc0cabb28a8dc94401236dd1","modified":1459156453643,"hash":"0ccc409a0e875444cc0cabb28a8dc94401236dd1"},{"_id":"themes/usagi/source/Semantic-UI/components/input.css","shasum":"4efc5801adcd1e11c5330b6d2f1d6b3b58de9d78","modified":1459156453644,"hash":"4efc5801adcd1e11c5330b6d2f1d6b3b58de9d78"},{"_id":"themes/usagi/source/Semantic-UI/components/input.min.css","shasum":"73757ebdfa7f295f4707f78058ff457b91cfd2df","modified":1459156453644,"hash":"73757ebdfa7f295f4707f78058ff457b91cfd2df"},{"_id":"themes/usagi/source/Semantic-UI/components/item.css","shasum":"8b5c6543fb73e6f777c1c90e44223276d0124de4","modified":1459156453645,"hash":"8b5c6543fb73e6f777c1c90e44223276d0124de4"},{"_id":"themes/usagi/source/Semantic-UI/components/item.min.css","shasum":"bd13a3449d93a9df450da9c219752e29cfdc3113","modified":1459156453645,"hash":"bd13a3449d93a9df450da9c219752e29cfdc3113"},{"_id":"themes/usagi/source/Semantic-UI/components/label.css","shasum":"c072df7b3444469bb01c2b1de69362be86b38f39","modified":1459156453646,"hash":"c072df7b3444469bb01c2b1de69362be86b38f39"},{"_id":"themes/usagi/source/Semantic-UI/components/label.min.css","shasum":"a56d06f8d4c560d8cbbc48f14c71a4b2b4c3d651","modified":1459156453647,"hash":"a56d06f8d4c560d8cbbc48f14c71a4b2b4c3d651"},{"_id":"themes/usagi/source/Semantic-UI/components/list.min.css","shasum":"fccb47702dc5b773c66615387c064979d0955651","modified":1459156453648,"hash":"fccb47702dc5b773c66615387c064979d0955651"},{"_id":"themes/usagi/source/Semantic-UI/components/list.css","shasum":"d73a31275da082cc1a805fef2bf95f9c5980ad4f","modified":1459156453648,"hash":"d73a31275da082cc1a805fef2bf95f9c5980ad4f"},{"_id":"themes/usagi/source/Semantic-UI/components/loader.min.css","shasum":"15a440ea57244c95443e224235cf34cd34e2eb29","modified":1459156453649,"hash":"15a440ea57244c95443e224235cf34cd34e2eb29"},{"_id":"themes/usagi/source/Semantic-UI/components/loader.css","shasum":"e1d8267fc0a5993596abebf3b64c907eced5916b","modified":1459156453649,"hash":"e1d8267fc0a5993596abebf3b64c907eced5916b"},{"_id":"themes/usagi/source/Semantic-UI/components/menu.css","shasum":"f590a0b57341a06b4be8dacab5a392ef6ef35cab","modified":1459156453650,"hash":"f590a0b57341a06b4be8dacab5a392ef6ef35cab"},{"_id":"themes/usagi/source/Semantic-UI/components/menu.min.css","shasum":"92f135c308cf345a5e5592401ee79e47564666a9","modified":1459156453651,"hash":"92f135c308cf345a5e5592401ee79e47564666a9"},{"_id":"themes/usagi/source/Semantic-UI/components/message.min.css","shasum":"d7f89d339c19d68cd5bd7613f03f891fb7eb24c5","modified":1459156453652,"hash":"d7f89d339c19d68cd5bd7613f03f891fb7eb24c5"},{"_id":"themes/usagi/source/Semantic-UI/components/message.css","shasum":"24e51f8a2bb268c46f48e73787efe75a41f16847","modified":1459156453651,"hash":"24e51f8a2bb268c46f48e73787efe75a41f16847"},{"_id":"themes/usagi/source/Semantic-UI/components/modal.css","shasum":"ebd8b227a909bb7d4e84810e16c7b05792ffdbe6","modified":1459156453653,"hash":"ebd8b227a909bb7d4e84810e16c7b05792ffdbe6"},{"_id":"themes/usagi/source/Semantic-UI/components/modal.js","shasum":"ecd28602fd9698efb2a04ed889c5aa98ce012ad4","modified":1459156453653,"hash":"ecd28602fd9698efb2a04ed889c5aa98ce012ad4"},{"_id":"themes/usagi/source/Semantic-UI/components/modal.min.js","shasum":"10a34835c4961b5e816f83e1fb76bc287bd4de0d","modified":1459156453654,"hash":"10a34835c4961b5e816f83e1fb76bc287bd4de0d"},{"_id":"themes/usagi/source/Semantic-UI/components/modal.min.css","shasum":"e97b010d8df9822baec6c853ecfbbb4fc6b82d21","modified":1459156453654,"hash":"e97b010d8df9822baec6c853ecfbbb4fc6b82d21"},{"_id":"themes/usagi/source/Semantic-UI/components/nag.css","shasum":"73d4272bb19f48e984a4e92b3ab32b2af0859b74","modified":1459156453655,"hash":"73d4272bb19f48e984a4e92b3ab32b2af0859b74"},{"_id":"themes/usagi/source/Semantic-UI/components/nag.js","shasum":"6f14f9fd3b47273f10337f2b5db389dddf573f20","modified":1459156453656,"hash":"6f14f9fd3b47273f10337f2b5db389dddf573f20"},{"_id":"themes/usagi/source/Semantic-UI/components/nag.min.css","shasum":"b49f962a1c4945cb422dabbafc61ea75e721677f","modified":1459156453656,"hash":"b49f962a1c4945cb422dabbafc61ea75e721677f"},{"_id":"themes/usagi/source/Semantic-UI/components/nag.min.js","shasum":"0d6397f1be45b020b4f8808233048ee04b26aeac","modified":1459156453657,"hash":"0d6397f1be45b020b4f8808233048ee04b26aeac"},{"_id":"themes/usagi/source/Semantic-UI/components/popup.css","shasum":"3732b424ecd7c35c7e4c4cbb3f69b32b353eeb9d","modified":1459156453657,"hash":"3732b424ecd7c35c7e4c4cbb3f69b32b353eeb9d"},{"_id":"themes/usagi/source/Semantic-UI/components/popup.min.css","shasum":"a3edf4de7d197ffcb5766bce5346a740ceec8193","modified":1459156453659,"hash":"a3edf4de7d197ffcb5766bce5346a740ceec8193"},{"_id":"themes/usagi/source/Semantic-UI/components/popup.min.js","shasum":"8baa84202ffb411c3dc5721175b21687231000fb","modified":1459156453659,"hash":"8baa84202ffb411c3dc5721175b21687231000fb"},{"_id":"themes/usagi/source/Semantic-UI/components/popup.js","shasum":"7fdfa5d3c67a84d1b29f1bf49cc147e150fbb630","modified":1459156453658,"hash":"7fdfa5d3c67a84d1b29f1bf49cc147e150fbb630"},{"_id":"themes/usagi/source/Semantic-UI/components/progress.css","shasum":"0af50ec537ff29df2381043fb75963095fa761d2","modified":1459156453660,"hash":"0af50ec537ff29df2381043fb75963095fa761d2"},{"_id":"themes/usagi/source/Semantic-UI/components/progress.js","shasum":"201b9d62643ebdebb534d54b8bd43c86ac388668","modified":1459156453661,"hash":"201b9d62643ebdebb534d54b8bd43c86ac388668"},{"_id":"themes/usagi/source/Semantic-UI/components/progress.min.css","shasum":"632317519a115432ddc15cb7aecd37f33d4f497c","modified":1459156453661,"hash":"632317519a115432ddc15cb7aecd37f33d4f497c"},{"_id":"themes/usagi/source/Semantic-UI/components/progress.min.js","shasum":"cbb7e8836fe9098553b9939569a082a02505984c","modified":1459156453662,"hash":"cbb7e8836fe9098553b9939569a082a02505984c"},{"_id":"themes/usagi/source/Semantic-UI/components/rail.css","shasum":"cd888c3804b25a223096ec5a797dbf7fbc6a25f0","modified":1459156453662,"hash":"cd888c3804b25a223096ec5a797dbf7fbc6a25f0"},{"_id":"themes/usagi/source/Semantic-UI/components/rail.min.css","shasum":"8963d6078d1744059f9bb9fa43df57d8f0062cba","modified":1459156453663,"hash":"8963d6078d1744059f9bb9fa43df57d8f0062cba"},{"_id":"themes/usagi/source/Semantic-UI/components/rating.js","shasum":"846f3cbba40ab4c088489c9283aaac11d40a7931","modified":1459156453664,"hash":"846f3cbba40ab4c088489c9283aaac11d40a7931"},{"_id":"themes/usagi/source/Semantic-UI/components/rating.css","shasum":"682f76e1ab482824a66ac6e140a8257b9c1ecb2d","modified":1459156453664,"hash":"682f76e1ab482824a66ac6e140a8257b9c1ecb2d"},{"_id":"themes/usagi/source/Semantic-UI/components/rating.min.css","shasum":"494ff769515dabeb050ec23fff67074bc26fb703","modified":1459156453665,"hash":"494ff769515dabeb050ec23fff67074bc26fb703"},{"_id":"themes/usagi/source/Semantic-UI/components/rating.min.js","shasum":"6e0210ce52862a067e9ffb02cd7396e240196761","modified":1459156453665,"hash":"6e0210ce52862a067e9ffb02cd7396e240196761"},{"_id":"themes/usagi/source/Semantic-UI/components/reset.css","shasum":"e833dea16cbaee22b3e3a3aa0b8f3d9689c027c5","modified":1459156453666,"hash":"e833dea16cbaee22b3e3a3aa0b8f3d9689c027c5"},{"_id":"themes/usagi/source/Semantic-UI/components/reset.min.css","shasum":"43e31e2dc58351a8238e04e4213f43ed7388e862","modified":1459156453667,"hash":"43e31e2dc58351a8238e04e4213f43ed7388e862"},{"_id":"themes/usagi/source/Semantic-UI/components/reveal.css","shasum":"8144b285a2434b94dd956321e0b906389f108d58","modified":1459156453667,"hash":"8144b285a2434b94dd956321e0b906389f108d58"},{"_id":"themes/usagi/source/Semantic-UI/components/reveal.min.css","shasum":"2e967a77c97c54166cd5ba013520c3e66d961970","modified":1459156453668,"hash":"2e967a77c97c54166cd5ba013520c3e66d961970"},{"_id":"themes/usagi/source/Semantic-UI/components/search.css","shasum":"ec438417639faec512c180051c64f8ee6f32fce9","modified":1459156453668,"hash":"ec438417639faec512c180051c64f8ee6f32fce9"},{"_id":"themes/usagi/source/Semantic-UI/components/search.min.css","shasum":"b947fec06f670ca52d8154e7e15fe57607d5d5f8","modified":1459156453669,"hash":"b947fec06f670ca52d8154e7e15fe57607d5d5f8"},{"_id":"themes/usagi/source/Semantic-UI/components/search.js","shasum":"63dabf9e44720399282624be79188f973374ec0c","modified":1459156453669,"hash":"63dabf9e44720399282624be79188f973374ec0c"},{"_id":"themes/usagi/source/Semantic-UI/components/search.min.js","shasum":"f93246ce3d9a3af5a8f5d97371d015666ddbea65","modified":1459156453670,"hash":"f93246ce3d9a3af5a8f5d97371d015666ddbea65"},{"_id":"themes/usagi/source/Semantic-UI/components/segment.css","shasum":"7d8b60bf49a8a04e0c20ae48d47cdae5a1182440","modified":1459156453671,"hash":"7d8b60bf49a8a04e0c20ae48d47cdae5a1182440"},{"_id":"themes/usagi/source/Semantic-UI/components/segment.min.css","shasum":"2af436e9c3682fb1b5ca81e00a6dc4ccf205d033","modified":1459156453671,"hash":"2af436e9c3682fb1b5ca81e00a6dc4ccf205d033"},{"_id":"themes/usagi/source/Semantic-UI/components/shape.css","shasum":"90715b4a0d8c09aa0083b135d61ed9653dc20db4","modified":1459156453672,"hash":"90715b4a0d8c09aa0083b135d61ed9653dc20db4"},{"_id":"themes/usagi/source/Semantic-UI/components/shape.min.css","shasum":"db7789f1c396b839b059f08bb13cf5388366e922","modified":1459156453673,"hash":"db7789f1c396b839b059f08bb13cf5388366e922"},{"_id":"themes/usagi/source/Semantic-UI/components/shape.min.js","shasum":"51de40108274a298de69a602e055659b6b5309df","modified":1459156453674,"hash":"51de40108274a298de69a602e055659b6b5309df"},{"_id":"themes/usagi/source/Semantic-UI/components/shape.js","shasum":"bcce7b8038c3a23938811f8fffb9d542bd83a9cf","modified":1459156453673,"hash":"bcce7b8038c3a23938811f8fffb9d542bd83a9cf"},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.css","shasum":"2031ca13e7a130d38952d235c0ebecb2d20750d5","modified":1459156453674,"hash":"2031ca13e7a130d38952d235c0ebecb2d20750d5"},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.js","shasum":"03ee17f95fe4645f01b88a08ac027390adc2e285","modified":1459156453675,"hash":"03ee17f95fe4645f01b88a08ac027390adc2e285"},{"_id":"themes/usagi/source/Semantic-UI/components/site.css","shasum":"dcb8bedeec11910a2c4dfef58f857f87e4bef847","modified":1459156453677,"hash":"dcb8bedeec11910a2c4dfef58f857f87e4bef847"},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.min.css","shasum":"542b9576e81d35f6ecc552649eced69fe08fc688","modified":1459156453675,"hash":"542b9576e81d35f6ecc552649eced69fe08fc688"},{"_id":"themes/usagi/source/Semantic-UI/components/sidebar.min.js","shasum":"fa0be85d873ac75498cdd8c71aebd140a34c449c","modified":1459156453676,"hash":"fa0be85d873ac75498cdd8c71aebd140a34c449c"},{"_id":"themes/usagi/source/Semantic-UI/components/site.js","shasum":"0abd8710a24c02f6ebc8c645fe67088b908dc0d8","modified":1459156453677,"hash":"0abd8710a24c02f6ebc8c645fe67088b908dc0d8"},{"_id":"themes/usagi/source/Semantic-UI/components/site.min.css","shasum":"fe3fe0fadba244d45cd9400d9b27ba7a26048f9a","modified":1459156453677,"hash":"fe3fe0fadba244d45cd9400d9b27ba7a26048f9a"},{"_id":"themes/usagi/source/Semantic-UI/components/site.min.js","shasum":"586f75697a9c0953047fe8413310218be380da5e","modified":1459156453678,"hash":"586f75697a9c0953047fe8413310218be380da5e"},{"_id":"themes/usagi/source/Semantic-UI/components/statistic.min.css","shasum":"23934c491a6b0690630bea45ef2781bafa62e496","modified":1459156453680,"hash":"23934c491a6b0690630bea45ef2781bafa62e496"},{"_id":"themes/usagi/source/Semantic-UI/components/state.min.js","shasum":"dcc9df08e9aee94483e5f0112a3f9a79e03d99c0","modified":1459156453679,"hash":"dcc9df08e9aee94483e5f0112a3f9a79e03d99c0"},{"_id":"themes/usagi/source/Semantic-UI/components/statistic.css","shasum":"649d6ae696e0b719ccd5f5592410be1295ff15f7","modified":1459156453680,"hash":"649d6ae696e0b719ccd5f5592410be1295ff15f7"},{"_id":"themes/usagi/source/Semantic-UI/components/state.js","shasum":"fcd06d362286ebaefb91f2f83c796f54c1f9623f","modified":1459156453679,"hash":"fcd06d362286ebaefb91f2f83c796f54c1f9623f"},{"_id":"themes/usagi/source/Semantic-UI/components/step.css","shasum":"7c2b8d104e4890f0369a7de912e2a709d37e7f0e","modified":1459156453681,"hash":"7c2b8d104e4890f0369a7de912e2a709d37e7f0e"},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.css","shasum":"b01436be0cf381354495786e442edd2958c76776","modified":1459156453682,"hash":"b01436be0cf381354495786e442edd2958c76776"},{"_id":"themes/usagi/source/Semantic-UI/components/step.min.css","shasum":"4a164954a586b52d99dbf66bdbcd7edcff9d75bb","modified":1459156453682,"hash":"4a164954a586b52d99dbf66bdbcd7edcff9d75bb"},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.min.css","shasum":"d37a8580d3bcbe2538cecb09c3075693f136ce3b","modified":1459156453683,"hash":"d37a8580d3bcbe2538cecb09c3075693f136ce3b"},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.js","shasum":"f5e81cf9553034e3c6b857dc1bf89025aa5547a4","modified":1459156453683,"hash":"f5e81cf9553034e3c6b857dc1bf89025aa5547a4"},{"_id":"themes/usagi/source/Semantic-UI/components/tab.css","shasum":"0051be4cd6cb4ea31d5e739aaa7faf3bfb31eeb2","modified":1459156453684,"hash":"0051be4cd6cb4ea31d5e739aaa7faf3bfb31eeb2"},{"_id":"themes/usagi/source/Semantic-UI/components/sticky.min.js","shasum":"c083bf58639daf0ab6f0bbb905ea3e95b7e6b3ef","modified":1459156453684,"hash":"c083bf58639daf0ab6f0bbb905ea3e95b7e6b3ef"},{"_id":"themes/usagi/source/Semantic-UI/components/tab.js","shasum":"33222f3b0254148388ab16fccaa11ea020b67901","modified":1459156453687,"hash":"33222f3b0254148388ab16fccaa11ea020b67901"},{"_id":"themes/usagi/source/Semantic-UI/components/tab.min.js","shasum":"42212f4055e8e984f6390162d8cbac3779e6aebf","modified":1459156453689,"hash":"42212f4055e8e984f6390162d8cbac3779e6aebf"},{"_id":"themes/usagi/source/Semantic-UI/components/tab.min.css","shasum":"1a370c4281f2d66e66e73fc7ad77f5b6e5646b63","modified":1459156453688,"hash":"1a370c4281f2d66e66e73fc7ad77f5b6e5646b63"},{"_id":"themes/usagi/source/Semantic-UI/components/table.css","shasum":"52d83d1c772f39360a2a71067953746ca96155e5","modified":1459156453690,"hash":"52d83d1c772f39360a2a71067953746ca96155e5"},{"_id":"themes/usagi/source/Semantic-UI/components/table.min.css","shasum":"2034e1e2d8b1ae551c7b47185f4061c1f67dde8d","modified":1459156453690,"hash":"2034e1e2d8b1ae551c7b47185f4061c1f67dde8d"},{"_id":"themes/usagi/source/Semantic-UI/components/transition.css","shasum":"1cbd8d6f57150db9c2b413f96ee32191604c4fd3","modified":1459156453691,"hash":"1cbd8d6f57150db9c2b413f96ee32191604c4fd3"},{"_id":"themes/usagi/source/Semantic-UI/components/transition.min.css","shasum":"e104396d022bbb771fc44bed4e01d3687cfe5a03","modified":1459156453692,"hash":"e104396d022bbb771fc44bed4e01d3687cfe5a03"},{"_id":"themes/usagi/source/Semantic-UI/components/transition.min.js","shasum":"03bce43cd4bc7393dc3434b2b78ffa697062a9cf","modified":1459156453693,"hash":"03bce43cd4bc7393dc3434b2b78ffa697062a9cf"},{"_id":"themes/usagi/source/Semantic-UI/components/transition.js","shasum":"8739c39ecb97ac2a1d011ce00834622923f148b8","modified":1459156453692,"hash":"8739c39ecb97ac2a1d011ce00834622923f148b8"},{"_id":"themes/usagi/source/Semantic-UI/components/video.css","shasum":"4a84fd5967662ff25a9b8f36300c7eda6d8004aa","modified":1459156453694,"hash":"4a84fd5967662ff25a9b8f36300c7eda6d8004aa"},{"_id":"themes/usagi/source/Semantic-UI/components/video.min.css","shasum":"6f9dc479b88bcbf09a3d3bf75e7a2516f73807ad","modified":1459156453695,"hash":"6f9dc479b88bcbf09a3d3bf75e7a2516f73807ad"},{"_id":"themes/usagi/source/Semantic-UI/components/video.js","shasum":"b17047a4413971d08b77a79354c6a88b2265dc1a","modified":1459156453694,"hash":"b17047a4413971d08b77a79354c6a88b2265dc1a"},{"_id":"themes/usagi/source/Semantic-UI/components/video.min.js","shasum":"5683260455a169153ba90f03df14d56a37265d3b","modified":1459156453695,"hash":"5683260455a169153ba90f03df14d56a37265d3b"},{"_id":"themes/usagi/source/Semantic-UI/components/visibility.min.js","shasum":"a83e668b8cf580423f708336635f206b46669401","modified":1459156453696,"hash":"a83e668b8cf580423f708336635f206b46669401"},{"_id":"themes/usagi/source/Semantic-UI/components/visit.js","shasum":"9de53d11dc71a0a862d2b3a443eb7a90280c8924","modified":1459156453697,"hash":"9de53d11dc71a0a862d2b3a443eb7a90280c8924"},{"_id":"themes/usagi/source/Semantic-UI/components/visibility.js","shasum":"8bf69a2f3b1083d1b0edb1ed9920ee6f4ea6bb92","modified":1459156453696,"hash":"8bf69a2f3b1083d1b0edb1ed9920ee6f4ea6bb92"},{"_id":"themes/usagi/source/Semantic-UI/components/visit.min.js","shasum":"c4426ad6e7ee021f949edbde9d1adb283a9298a6","modified":1459156453697,"hash":"c4426ad6e7ee021f949edbde9d1adb283a9298a6"},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.eot","shasum":"f5e824186bc1d712d5703c872135ef0e786cabf8","modified":1459156453708,"hash":"f5e824186bc1d712d5703c872135ef0e786cabf8"},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.svg","shasum":"144958374a5b188939a4ef8a578ba46ffdc8ba61","modified":1459156453709,"hash":"144958374a5b188939a4ef8a578ba46ffdc8ba61"},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.ttf","shasum":"aa384f8e70fe7d54b7ed05ecd2c2ec13a01fad77","modified":1459156453710,"hash":"aa384f8e70fe7d54b7ed05ecd2c2ec13a01fad77"},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.eot","shasum":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1459156453712,"hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167"},{"_id":"themes/usagi/source/Semantic-UI/themes/basic/assets/fonts/icons.woff","shasum":"6ec5c193dd77b2c65af67806c13b83384ff617c9","modified":1459156453710,"hash":"6ec5c193dd77b2c65af67806c13b83384ff617c9"},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.woff2","shasum":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1459156453719,"hash":"1075231650f579955905bb2f6527148a8e2b4b16"},{"_id":"themes/usagi/source/css/_reset.scss","shasum":"8b31a7139ba5934b0901f0c43097376a697b765e","modified":1459156453720,"hash":"8b31a7139ba5934b0901f0c43097376a697b765e"},{"_id":"themes/usagi/source/css/_variables.scss","shasum":"63a502d84cf81a193b036082deb5a2fdfba04843","modified":1459156453721,"hash":"63a502d84cf81a193b036082deb5a2fdfba04843"},{"_id":"themes/usagi/source/css/index.scss","shasum":"0fb8c582d3bb43ffa2338ff072f8e210b995aa12","modified":1459156453721,"hash":"0fb8c582d3bb43ffa2338ff072f8e210b995aa12"},{"_id":"themes/usagi/source/css/partial/_header.scss","shasum":"cf9e18978d2ab99aacdb9f546660c3c8b8a4dba6","modified":1459156453723,"hash":"cf9e18978d2ab99aacdb9f546660c3c8b8a4dba6"},{"_id":"themes/usagi/source/css/partial/_post-list.scss","shasum":"ef67ef028930702a0d4908e512373537b1e7b425","modified":1459156453723,"hash":"ef67ef028930702a0d4908e512373537b1e7b425"},{"_id":"themes/usagi/source/image/author-image.svg","shasum":"2af0ec51229e95b357b30dd069a772043b3b6bae","modified":1459156453769,"hash":"2af0ec51229e95b357b30dd069a772043b3b6bae"},{"_id":"themes/usagi/source/image/cloud-bg.svg","shasum":"00fdc9bd034a7314c0bd959d3382a3ef3e698083","modified":1459156453769,"hash":"00fdc9bd034a7314c0bd959d3382a3ef3e698083"},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/images/flags.png","shasum":"4a552ecb123ded5040ddda01d626103cc65db055","modified":1459156453720,"hash":"4a552ecb123ded5040ddda01d626103cc65db055"},{"_id":"themes/usagi/source/Semantic-UI/components/button.min.css","shasum":"5b904c0dc4817069192b432bcd6bfd8cce682be0","modified":1459156453614,"hash":"5b904c0dc4817069192b432bcd6bfd8cce682be0"},{"_id":"themes/usagi/source/Semantic-UI/components/button.css","shasum":"3e23d0c327aea86d24d213811ad89c8e7ea9ff22","modified":1459156453613,"hash":"3e23d0c327aea86d24d213811ad89c8e7ea9ff22"},{"_id":"themes/usagi/source/Semantic-UI/components/dropdown.js","shasum":"81b293f5b7cf2ffb9406196919b295fe8278956b","modified":1459156453628,"hash":"81b293f5b7cf2ffb9406196919b295fe8278956b"},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.otf","shasum":"cde9eb92c8a3ba23d648f76ea3931511f30813f4","modified":1459156453713,"hash":"cde9eb92c8a3ba23d648f76ea3931511f30813f4"},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.ttf","shasum":"9088143b19979779b2116cef38b661f72d982e19","modified":1459156453717,"hash":"9088143b19979779b2116cef38b661f72d982e19"},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.woff","shasum":"56ce13e71c2150d81bc972940584915181bd6081","modified":1459156453717,"hash":"56ce13e71c2150d81bc972940584915181bd6081"},{"_id":"themes/usagi/source/Semantic-UI/semantic.min.js","shasum":"2a35bedce057b6a1a9b000b938885a8302ac2f3c","modified":1459156453706,"hash":"2a35bedce057b6a1a9b000b938885a8302ac2f3c"},{"_id":"themes/usagi/source/Semantic-UI/themes/default/assets/fonts/icons.svg","shasum":"26bb1c5ef100a1cd71923f1d5dc29fc797ef4639","modified":1459156453715,"hash":"26bb1c5ef100a1cd71923f1d5dc29fc797ef4639"},{"_id":"themes/usagi/source/Semantic-UI/semantic.min.css","shasum":"605716fd8adba03407c84e47264231ffca7faae6","modified":1459156453705,"hash":"605716fd8adba03407c84e47264231ffca7faae6"},{"_id":"themes/usagi/source/Semantic-UI/semantic.css","shasum":"856599ed0238f310c97cdab56fb12580d7b0d31a","modified":1459156453701,"hash":"856599ed0238f310c97cdab56fb12580d7b0d31a"},{"_id":"themes/usagi/source/Semantic-UI/semantic.js","shasum":"ae887a36b586486fbbf1da93c9d13f47d95b3f74","modified":1459156453702,"hash":"ae887a36b586486fbbf1da93c9d13f47d95b3f74"},{"_id":"themes/usagi/_config.yml","shasum":"fecf3414f1420dd3fa31550c4ce3d61a947c96d1","modified":1459156453602,"hash":"fecf3414f1420dd3fa31550c4ce3d61a947c96d1"},{"_id":"source/_posts/Aurelia-doc-translation-part2.md","shasum":"bd0bd5c8e9df5dd3cf26129e0219516fb0a9956b","modified":1459156453538,"hash":"bd0bd5c8e9df5dd3cf26129e0219516fb0a9956b"},{"_id":"themes/usagi/source/highlight/CHANGES.md","shasum":"f684f145af21dc2a97b2e16a2021ff33ab4c3c91","modified":1459156453725,"hash":"f684f145af21dc2a97b2e16a2021ff33ab4c3c91"},{"_id":"themes/usagi/source/highlight/LICENSE","shasum":"cd25196630fe891662ad77810f0f6dee5bc85ddc","modified":1459156453726,"hash":"cd25196630fe891662ad77810f0f6dee5bc85ddc"},{"_id":"themes/usagi/source/highlight/README.md","shasum":"c15cfe5cfca5d87411e9d7cbc013aa1feefb7dc1","modified":1459156453726,"hash":"c15cfe5cfca5d87411e9d7cbc013aa1feefb7dc1"},{"_id":"themes/usagi/source/highlight/README.ru.md","shasum":"cff459e12dee971e937d5a31df970533e5094656","modified":1459156453727,"hash":"cff459e12dee971e937d5a31df970533e5094656"},{"_id":"themes/usagi/source/highlight/highlight.pack.js","shasum":"83da0f1aefd0a360e3d33a606b7fa3292e7eb505","modified":1459156453728,"hash":"83da0f1aefd0a360e3d33a606b7fa3292e7eb505"},{"_id":"themes/usagi/source/highlight/styles/agate.css","shasum":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1459156453729,"hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0"},{"_id":"themes/usagi/source/highlight/styles/androidstudio.css","shasum":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1459156453729,"hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1"},{"_id":"themes/usagi/source/highlight/styles/arduino-light.css","shasum":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1459156453730,"hash":"c6e05580b51b755e229e99eb156940ad2cab192b"},{"_id":"themes/usagi/source/highlight/styles/arta.css","shasum":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1459156453730,"hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584"},{"_id":"themes/usagi/source/highlight/styles/ascetic.css","shasum":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1459156453731,"hash":"6358377b5c25667886aca0d605cbc497cf02405f"},{"_id":"themes/usagi/source/highlight/styles/atelier-cave-dark.css","shasum":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1459156453731,"hash":"f397d4418ce88b998841fd9135242461ba1a79b5"},{"_id":"themes/usagi/source/highlight/styles/atelier-cave-light.css","shasum":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1459156453732,"hash":"2933f0247ac6d84c2954dd4946e359853abbf70a"},{"_id":"themes/usagi/source/highlight/styles/atelier-dune-dark.css","shasum":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1459156453732,"hash":"081d73e454db140cd41b2bb595be297cfcab25e0"},{"_id":"themes/usagi/source/highlight/styles/atelier-dune-light.css","shasum":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1459156453733,"hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72"},{"_id":"themes/usagi/source/highlight/styles/atelier-estuary-dark.css","shasum":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1459156453733,"hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8"},{"_id":"themes/usagi/source/highlight/styles/atelier-estuary-light.css","shasum":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1459156453734,"hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a"},{"_id":"themes/usagi/source/highlight/styles/atelier-forest-dark.css","shasum":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1459156453734,"hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101"},{"_id":"themes/usagi/source/highlight/styles/atelier-forest-light.css","shasum":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1459156453735,"hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97"},{"_id":"themes/usagi/source/highlight/styles/atelier-heath-dark.css","shasum":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1459156453735,"hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78"},{"_id":"themes/usagi/source/highlight/styles/atelier-heath-light.css","shasum":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1459156453736,"hash":"172b98f783d213a20211ec6aca9a3840ba524f55"},{"_id":"themes/usagi/source/highlight/styles/atelier-lakeside-dark.css","shasum":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1459156453736,"hash":"fa707b252d5d5caccc0589374522bed47b7ca100"},{"_id":"themes/usagi/source/highlight/styles/atelier-lakeside-light.css","shasum":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1459156453737,"hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686"},{"_id":"themes/usagi/source/highlight/styles/atelier-plateau-dark.css","shasum":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1459156453737,"hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d"},{"_id":"themes/usagi/source/highlight/styles/atelier-plateau-light.css","shasum":"9731db1052f23351c983210701edd3f5ceed343f","modified":1459156453738,"hash":"9731db1052f23351c983210701edd3f5ceed343f"},{"_id":"themes/usagi/source/highlight/styles/atelier-savanna-dark.css","shasum":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1459156453739,"hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a"},{"_id":"themes/usagi/source/highlight/styles/atelier-savanna-light.css","shasum":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1459156453739,"hash":"6bd3a62c32558476d436bd389500e5fbeb693d67"},{"_id":"themes/usagi/source/highlight/styles/atelier-seaside-dark.css","shasum":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1459156453740,"hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c"},{"_id":"themes/usagi/source/highlight/styles/atelier-seaside-light.css","shasum":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1459156453740,"hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9"},{"_id":"themes/usagi/source/highlight/styles/atelier-sulphurpool-dark.css","shasum":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1459156453741,"hash":"1f006f8bd28e2ffbb73f708769605ba766787fff"},{"_id":"themes/usagi/source/highlight/styles/atelier-sulphurpool-light.css","shasum":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1459156453741,"hash":"0319c3eea893601b79b6c57652ef49b9222cc9de"},{"_id":"themes/usagi/source/highlight/styles/brown-paper.css","shasum":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1459156453742,"hash":"a6817d890e58f80ce79d87620791dae821a70fff"},{"_id":"themes/usagi/source/highlight/styles/brown-papersq.png","shasum":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1459156453742,"hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182"},{"_id":"themes/usagi/source/highlight/styles/codepen-embed.css","shasum":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1459156453743,"hash":"c4520e45d18259817b8942d17971f27c94f0fb09"},{"_id":"themes/usagi/source/highlight/styles/color-brewer.css","shasum":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1459156453743,"hash":"96332573db854e7b7411caa94ba29b238fede2d3"},{"_id":"themes/usagi/source/highlight/styles/dark.css","shasum":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1459156453744,"hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271"},{"_id":"themes/usagi/source/highlight/styles/darkula.css","shasum":"98e2c777fb1b7a3c63dd68b5b2c4ed5fee2349a9","modified":1459156453744,"hash":"98e2c777fb1b7a3c63dd68b5b2c4ed5fee2349a9"},{"_id":"themes/usagi/source/highlight/styles/default.css","shasum":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1459156453745,"hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74"},{"_id":"themes/usagi/source/highlight/styles/docco.css","shasum":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1459156453746,"hash":"1be7be09a1b927c22c7f11451becdb335145bdd2"},{"_id":"themes/usagi/source/highlight/styles/dracula.css","shasum":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1459156453746,"hash":"2633f2e84680e9f381e9ac1df344b542e28f9774"},{"_id":"themes/usagi/source/highlight/styles/far.css","shasum":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1459156453747,"hash":"67e0658b2376e91e4894636a3522a30c2aec42de"},{"_id":"themes/usagi/source/highlight/styles/foundation.css","shasum":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1459156453747,"hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b"},{"_id":"themes/usagi/source/highlight/styles/github-gist.css","shasum":"77cf684fda415812d6279a52f299c84850244778","modified":1459156453748,"hash":"77cf684fda415812d6279a52f299c84850244778"},{"_id":"themes/usagi/source/highlight/styles/github.css","shasum":"ee593952684a791317ee8b77ad096e729dec649e","modified":1459156453748,"hash":"ee593952684a791317ee8b77ad096e729dec649e"},{"_id":"themes/usagi/source/highlight/styles/googlecode.css","shasum":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1459156453749,"hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445"},{"_id":"themes/usagi/source/highlight/styles/grayscale.css","shasum":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1459156453749,"hash":"5688658c28fc5799517e8f3c224ae3da3797ba44"},{"_id":"themes/usagi/source/highlight/styles/gruvbox-dark.css","shasum":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1459156453750,"hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc"},{"_id":"themes/usagi/source/highlight/styles/gruvbox-light.css","shasum":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1459156453750,"hash":"084699ab0aa326fede86e38bf41ebe49edde3a90"},{"_id":"themes/usagi/source/highlight/styles/hopscotch.css","shasum":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1459156453751,"hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8"},{"_id":"themes/usagi/source/highlight/styles/hybrid.css","shasum":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1459156453752,"hash":"1e2d54598b5f948b597059909d4bd158b7df021f"},{"_id":"themes/usagi/source/highlight/styles/idea.css","shasum":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1459156453753,"hash":"164649ae1e7c891a0d88cca075521af28656e2a1"},{"_id":"themes/usagi/source/highlight/styles/ir-black.css","shasum":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1459156453753,"hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c"},{"_id":"themes/usagi/source/highlight/styles/kimbie.dark.css","shasum":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1459156453754,"hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3"},{"_id":"themes/usagi/source/highlight/styles/kimbie.light.css","shasum":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1459156453754,"hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913"},{"_id":"themes/usagi/source/highlight/styles/magula.css","shasum":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1459156453755,"hash":"ebc291f90e456abeeccb16937e7f51735733f4f7"},{"_id":"themes/usagi/source/highlight/styles/mono-blue.css","shasum":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1459156453755,"hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb"},{"_id":"themes/usagi/source/highlight/styles/monokai-sublime.css","shasum":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1459156453756,"hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986"},{"_id":"themes/usagi/source/highlight/styles/monokai.css","shasum":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1459156453756,"hash":"f69df92e3ccdce28e6f811ec84f11698f2811198"},{"_id":"themes/usagi/source/highlight/styles/obsidian.css","shasum":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1459156453757,"hash":"6ed475813fe4886a58b236297862ff2f181e66f7"},{"_id":"themes/usagi/source/highlight/styles/paraiso-dark.css","shasum":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1459156453757,"hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341"},{"_id":"themes/usagi/source/highlight/styles/paraiso-light.css","shasum":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1459156453758,"hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8"},{"_id":"themes/usagi/source/highlight/styles/pojoaque.css","shasum":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1459156453758,"hash":"4e1e6a431212f5043a550474a1acda63362cdd6f"},{"_id":"themes/usagi/source/highlight/styles/pojoaque.jpg","shasum":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1459156453759,"hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791"},{"_id":"themes/usagi/source/highlight/styles/qtcreator_dark.css","shasum":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1459156453759,"hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba"},{"_id":"themes/usagi/source/highlight/styles/qtcreator_light.css","shasum":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1459156453760,"hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878"},{"_id":"themes/usagi/source/highlight/styles/railscasts.css","shasum":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1459156453760,"hash":"a6d2043478fae5915926914cbd96fe9b706d98a6"},{"_id":"themes/usagi/source/highlight/styles/rainbow.css","shasum":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1459156453761,"hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e"},{"_id":"themes/usagi/source/highlight/styles/school-book.css","shasum":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1459156453761,"hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9"},{"_id":"themes/usagi/source/highlight/styles/school-book.png","shasum":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1459156453762,"hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee"},{"_id":"themes/usagi/source/highlight/styles/solarized-dark.css","shasum":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1459156453762,"hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7"},{"_id":"themes/usagi/source/highlight/styles/solarized-light.css","shasum":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1459156453763,"hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3"},{"_id":"themes/usagi/source/highlight/styles/sunburst.css","shasum":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1459156453763,"hash":"8309eab2e5b1765dbee81a626baacbdad869b76a"},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night-blue.css","shasum":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1459156453764,"hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f"},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night-bright.css","shasum":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1459156453765,"hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89"},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night-eighties.css","shasum":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1459156453765,"hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061"},{"_id":"themes/usagi/source/highlight/styles/tomorrow-night.css","shasum":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1459156453766,"hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16"},{"_id":"themes/usagi/source/highlight/styles/tomorrow.css","shasum":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1459156453766,"hash":"163593ad70770d0296c5e643fa62e58e63f1b340"},{"_id":"themes/usagi/source/highlight/styles/vs.css","shasum":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1459156453767,"hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa"},{"_id":"themes/usagi/source/highlight/styles/xcode.css","shasum":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1459156453767,"hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3"},{"_id":"themes/usagi/source/highlight/styles/zenburn.css","shasum":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1459156453768,"hash":"933a3b196d01254dea5e6f48105ea15e210ae000"},{"_id":"themes/usagi/source/css/partial/_post.scss","shasum":"f529739566c6b143b9c1e223831c9f01becfb8c2","modified":1459156453724,"hash":"f529739566c6b143b9c1e223831c9f01becfb8c2"},{"_id":"public/2016/03/28/hello-world/index.html","hash":"d01fea668b717055a3f603afd64207d61d504cdf","modified":1459157167198},{"_id":"public/archives/index.html","hash":"31fdc066ce4344710f94f97d46460beeb1698b32","modified":1459157167199},{"_id":"public/archives/2015/index.html","hash":"e59a4fb9bc8ca88e642bd909042c68acdef4123a","modified":1459157167199},{"_id":"public/archives/2015/06/index.html","hash":"e59a4fb9bc8ca88e642bd909042c68acdef4123a","modified":1459157167199},{"_id":"public/archives/2016/index.html","hash":"e5cc813ab979cf0e106550e0487a9693c6e979dc","modified":1459157167199},{"_id":"public/archives/2016/03/index.html","hash":"e5cc813ab979cf0e106550e0487a9693c6e979dc","modified":1459157167199},{"_id":"public/index.html","hash":"5e2200d2f81e196cad3efd840095b0ca5080ee6e","modified":1459157167199},{"_id":"public/categories/Aurelia/index.html","hash":"32e769a9dfdccd75d9078cd6dd02b09eb8298b6e","modified":1459157167199},{"_id":"public/2015/06/13/Aurelia-doc-translation-part2/index.html","hash":"7d32a4f9a1e9577b403494b9a7050fe1ceae5dff","modified":1459157167200},{"_id":"public/image/cloud-bg.svg","hash":"00fdc9bd034a7314c0bd959d3382a3ef3e698083","modified":1459157167208},{"_id":"public/image/author-image.svg","hash":"2af0ec51229e95b357b30dd069a772043b3b6bae","modified":1459157167208},{"_id":"public/Semantic-UI/themes/default/assets/images/flags.png","hash":"4a552ecb123ded5040ddda01d626103cc65db055","modified":1459157167208},{"_id":"public/Semantic-UI/themes/default/assets/fonts/icons.woff2","hash":"1075231650f579955905bb2f6527148a8e2b4b16","modified":1459157167208},{"_id":"public/Semantic-UI/themes/default/assets/fonts/icons.eot","hash":"3e63fc9b3de4580f1f3bec0631436f755b80f167","modified":1459157167209},{"_id":"public/Semantic-UI/themes/basic/assets/fonts/icons.woff","hash":"6ec5c193dd77b2c65af67806c13b83384ff617c9","modified":1459157167209},{"_id":"public/Semantic-UI/themes/basic/assets/fonts/icons.ttf","hash":"aa384f8e70fe7d54b7ed05ecd2c2ec13a01fad77","modified":1459157167209},{"_id":"public/Semantic-UI/themes/basic/assets/fonts/icons.eot","hash":"f5e824186bc1d712d5703c872135ef0e786cabf8","modified":1459157167209},{"_id":"public/Semantic-UI/themes/basic/assets/fonts/icons.svg","hash":"144958374a5b188939a4ef8a578ba46ffdc8ba61","modified":1459157167209},{"_id":"public/highlight/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1459157167209},{"_id":"public/highlight/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1459157167209},{"_id":"public/highlight/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1459157167209},{"_id":"public/highlight/LICENSE","hash":"cd25196630fe891662ad77810f0f6dee5bc85ddc","modified":1459157167209},{"_id":"public/Semantic-UI/themes/default/assets/fonts/icons.woff","hash":"56ce13e71c2150d81bc972940584915181bd6081","modified":1459157167276},{"_id":"public/Semantic-UI/themes/default/assets/fonts/icons.ttf","hash":"9088143b19979779b2116cef38b661f72d982e19","modified":1459157167281},{"_id":"public/Semantic-UI/themes/default/assets/fonts/icons.otf","hash":"cde9eb92c8a3ba23d648f76ea3931511f30813f4","modified":1459157167307},{"_id":"public/css/index.css","hash":"87e3aa3c01d379fda9d7f62a73c69cf97f76d719","modified":1459157167323},{"_id":"public/Semantic-UI/components/visit.min.js","hash":"c4426ad6e7ee021f949edbde9d1adb283a9298a6","modified":1459157167323},{"_id":"public/Semantic-UI/components/visit.js","hash":"9de53d11dc71a0a862d2b3a443eb7a90280c8924","modified":1459157167323},{"_id":"public/Semantic-UI/components/video.min.css","hash":"6f9dc479b88bcbf09a3d3bf75e7a2516f73807ad","modified":1459157167323},{"_id":"public/Semantic-UI/components/video.min.js","hash":"5683260455a169153ba90f03df14d56a37265d3b","modified":1459157167323},{"_id":"public/Semantic-UI/components/visibility.min.js","hash":"a83e668b8cf580423f708336635f206b46669401","modified":1459157167323},{"_id":"public/Semantic-UI/components/video.css","hash":"4a84fd5967662ff25a9b8f36300c7eda6d8004aa","modified":1459157167323},{"_id":"public/Semantic-UI/components/video.js","hash":"b17047a4413971d08b77a79354c6a88b2265dc1a","modified":1459157167323},{"_id":"public/Semantic-UI/components/transition.min.js","hash":"03bce43cd4bc7393dc3434b2b78ffa697062a9cf","modified":1459157167323},{"_id":"public/Semantic-UI/components/table.min.css","hash":"2034e1e2d8b1ae551c7b47185f4061c1f67dde8d","modified":1459157167323},{"_id":"public/Semantic-UI/components/tab.min.css","hash":"1a370c4281f2d66e66e73fc7ad77f5b6e5646b63","modified":1459157167323},{"_id":"public/Semantic-UI/components/tab.min.js","hash":"42212f4055e8e984f6390162d8cbac3779e6aebf","modified":1459157167323},{"_id":"public/Semantic-UI/components/sticky.min.js","hash":"c083bf58639daf0ab6f0bbb905ea3e95b7e6b3ef","modified":1459157167323},{"_id":"public/Semantic-UI/components/tab.css","hash":"0051be4cd6cb4ea31d5e739aaa7faf3bfb31eeb2","modified":1459157167323},{"_id":"public/Semantic-UI/components/sticky.min.css","hash":"d37a8580d3bcbe2538cecb09c3075693f136ce3b","modified":1459157167323},{"_id":"public/Semantic-UI/components/sticky.css","hash":"b01436be0cf381354495786e442edd2958c76776","modified":1459157167323},{"_id":"public/Semantic-UI/components/statistic.min.css","hash":"23934c491a6b0690630bea45ef2781bafa62e496","modified":1459157167323},{"_id":"public/Semantic-UI/components/state.min.js","hash":"dcc9df08e9aee94483e5f0112a3f9a79e03d99c0","modified":1459157167323},{"_id":"public/Semantic-UI/components/statistic.css","hash":"649d6ae696e0b719ccd5f5592410be1295ff15f7","modified":1459157167324},{"_id":"public/Semantic-UI/components/site.min.js","hash":"586f75697a9c0953047fe8413310218be380da5e","modified":1459157167324},{"_id":"public/Semantic-UI/components/site.min.css","hash":"fe3fe0fadba244d45cd9400d9b27ba7a26048f9a","modified":1459157167324},{"_id":"public/Semantic-UI/components/site.js","hash":"0abd8710a24c02f6ebc8c645fe67088b908dc0d8","modified":1459157167324},{"_id":"public/Semantic-UI/components/site.css","hash":"dcb8bedeec11910a2c4dfef58f857f87e4bef847","modified":1459157167324},{"_id":"public/Semantic-UI/components/sidebar.min.js","hash":"fa0be85d873ac75498cdd8c71aebd140a34c449c","modified":1459157167324},{"_id":"public/Semantic-UI/components/sidebar.min.css","hash":"542b9576e81d35f6ecc552649eced69fe08fc688","modified":1459157167324},{"_id":"public/Semantic-UI/components/shape.min.js","hash":"51de40108274a298de69a602e055659b6b5309df","modified":1459157167324},{"_id":"public/Semantic-UI/components/sidebar.css","hash":"2031ca13e7a130d38952d235c0ebecb2d20750d5","modified":1459157167324},{"_id":"public/Semantic-UI/components/shape.min.css","hash":"db7789f1c396b839b059f08bb13cf5388366e922","modified":1459157167324},{"_id":"public/Semantic-UI/components/shape.css","hash":"90715b4a0d8c09aa0083b135d61ed9653dc20db4","modified":1459157167324},{"_id":"public/Semantic-UI/components/segment.min.css","hash":"2af436e9c3682fb1b5ca81e00a6dc4ccf205d033","modified":1459157167324},{"_id":"public/Semantic-UI/components/segment.css","hash":"7d8b60bf49a8a04e0c20ae48d47cdae5a1182440","modified":1459157167324},{"_id":"public/Semantic-UI/components/search.min.js","hash":"f93246ce3d9a3af5a8f5d97371d015666ddbea65","modified":1459157167324},{"_id":"public/Semantic-UI/components/search.min.css","hash":"b947fec06f670ca52d8154e7e15fe57607d5d5f8","modified":1459157167324},{"_id":"public/Semantic-UI/components/search.css","hash":"ec438417639faec512c180051c64f8ee6f32fce9","modified":1459157167324},{"_id":"public/Semantic-UI/components/reveal.min.css","hash":"2e967a77c97c54166cd5ba013520c3e66d961970","modified":1459157167324},{"_id":"public/Semantic-UI/components/reset.min.css","hash":"43e31e2dc58351a8238e04e4213f43ed7388e862","modified":1459157167324},{"_id":"public/Semantic-UI/components/reveal.css","hash":"8144b285a2434b94dd956321e0b906389f108d58","modified":1459157167324},{"_id":"public/Semantic-UI/components/reset.css","hash":"e833dea16cbaee22b3e3a3aa0b8f3d9689c027c5","modified":1459157167324},{"_id":"public/Semantic-UI/components/rating.min.js","hash":"6e0210ce52862a067e9ffb02cd7396e240196761","modified":1459157167324},{"_id":"public/Semantic-UI/components/rating.js","hash":"846f3cbba40ab4c088489c9283aaac11d40a7931","modified":1459157167324},{"_id":"public/Semantic-UI/components/rail.css","hash":"cd888c3804b25a223096ec5a797dbf7fbc6a25f0","modified":1459157167324},{"_id":"public/Semantic-UI/components/rail.min.css","hash":"8963d6078d1744059f9bb9fa43df57d8f0062cba","modified":1459157167324},{"_id":"public/Semantic-UI/components/progress.min.css","hash":"632317519a115432ddc15cb7aecd37f33d4f497c","modified":1459157167324},{"_id":"public/Semantic-UI/components/progress.min.js","hash":"cbb7e8836fe9098553b9939569a082a02505984c","modified":1459157167325},{"_id":"public/Semantic-UI/components/progress.css","hash":"0af50ec537ff29df2381043fb75963095fa761d2","modified":1459157167325},{"_id":"public/Semantic-UI/components/popup.min.css","hash":"a3edf4de7d197ffcb5766bce5346a740ceec8193","modified":1459157167325},{"_id":"public/Semantic-UI/components/popup.css","hash":"3732b424ecd7c35c7e4c4cbb3f69b32b353eeb9d","modified":1459157167325},{"_id":"public/Semantic-UI/components/nag.min.js","hash":"0d6397f1be45b020b4f8808233048ee04b26aeac","modified":1459157167325},{"_id":"public/Semantic-UI/components/nag.js","hash":"6f14f9fd3b47273f10337f2b5db389dddf573f20","modified":1459157167325},{"_id":"public/Semantic-UI/components/nag.css","hash":"73d4272bb19f48e984a4e92b3ab32b2af0859b74","modified":1459157167325},{"_id":"public/Semantic-UI/components/nag.min.css","hash":"b49f962a1c4945cb422dabbafc61ea75e721677f","modified":1459157167325},{"_id":"public/Semantic-UI/components/modal.min.js","hash":"10a34835c4961b5e816f83e1fb76bc287bd4de0d","modified":1459157167325},{"_id":"public/Semantic-UI/components/modal.min.css","hash":"e97b010d8df9822baec6c853ecfbbb4fc6b82d21","modified":1459157167325},{"_id":"public/Semantic-UI/components/message.min.css","hash":"d7f89d339c19d68cd5bd7613f03f891fb7eb24c5","modified":1459157167325},{"_id":"public/Semantic-UI/components/message.css","hash":"24e51f8a2bb268c46f48e73787efe75a41f16847","modified":1459157167325},{"_id":"public/Semantic-UI/components/modal.css","hash":"ebd8b227a909bb7d4e84810e16c7b05792ffdbe6","modified":1459157167325},{"_id":"public/Semantic-UI/components/loader.css","hash":"e1d8267fc0a5993596abebf3b64c907eced5916b","modified":1459157167325},{"_id":"public/Semantic-UI/components/list.min.css","hash":"fccb47702dc5b773c66615387c064979d0955651","modified":1459157167325},{"_id":"public/Semantic-UI/components/loader.min.css","hash":"15a440ea57244c95443e224235cf34cd34e2eb29","modified":1459157167325},{"_id":"public/Semantic-UI/components/item.min.css","hash":"bd13a3449d93a9df450da9c219752e29cfdc3113","modified":1459157167325},{"_id":"public/Semantic-UI/components/item.css","hash":"8b5c6543fb73e6f777c1c90e44223276d0124de4","modified":1459157167325},{"_id":"public/Semantic-UI/components/input.min.css","hash":"73757ebdfa7f295f4707f78058ff457b91cfd2df","modified":1459157167326},{"_id":"public/Semantic-UI/components/input.css","hash":"4efc5801adcd1e11c5330b6d2f1d6b3b58de9d78","modified":1459157167326},{"_id":"public/Semantic-UI/components/image.min.css","hash":"0ccc409a0e875444cc0cabb28a8dc94401236dd1","modified":1459157167326},{"_id":"public/Semantic-UI/components/image.css","hash":"ed69f4dd43534687b9f1a1b7fb486ed8045b77af","modified":1459157167326},{"_id":"public/Semantic-UI/components/header.min.css","hash":"2202c9f3e1873bb26ca4b7c2ab2caf82c6bc8199","modified":1459157167326},{"_id":"public/Semantic-UI/components/header.css","hash":"1b4d8d2c770593d8b5967ed5b2e780fabb0a7785","modified":1459157167326},{"_id":"public/Semantic-UI/components/form.min.js","hash":"977ca8a95594cd67da0654e64e8be33c06c99266","modified":1459157167326},{"_id":"public/Semantic-UI/components/feed.min.css","hash":"1853cbdf077ac5df630ba568e19750106077efe9","modified":1459157167326},{"_id":"public/Semantic-UI/components/feed.css","hash":"540877988832592aa46e3ae8eecc92651097aea1","modified":1459157167326},{"_id":"public/Semantic-UI/components/embed.min.js","hash":"21c9a1a67ef1a3765c9e45c6cf3cfbfae81876a2","modified":1459157167326},{"_id":"public/Semantic-UI/components/embed.css","hash":"57739146220616c5da1c97b4697627553860b8bf","modified":1459157167326},{"_id":"public/Semantic-UI/components/embed.min.css","hash":"49647d0e7a255c4d9afad1b5768760cc67dd88a1","modified":1459157167326},{"_id":"public/Semantic-UI/components/divider.min.css","hash":"2df9cb4bd090b63f249a8f854e0986905dd04609","modified":1459157167326},{"_id":"public/Semantic-UI/components/divider.css","hash":"78d65bcb917a32432586b25512faf5741a0118e1","modified":1459157167326},{"_id":"public/Semantic-UI/components/dimmer.min.css","hash":"62c36337ec08fbc8add6ef59e110dc1389b90a00","modified":1459157167326},{"_id":"public/Semantic-UI/components/dimmer.min.js","hash":"8f9a75d19720e8986f5a1ed88dc4ea2f3c588a66","modified":1459157167326},{"_id":"public/Semantic-UI/components/dimmer.css","hash":"8c5819e54a4189deb94d3ae3edaf57c2c0f8ec70","modified":1459157167326},{"_id":"public/Semantic-UI/components/container.min.css","hash":"43e87701642e538958c8da1c165fd61d8c2211c2","modified":1459157167326},{"_id":"public/Semantic-UI/components/container.css","hash":"9343a5eee2e7713a16524b3b0b3d6de97c834576","modified":1459157167326},{"_id":"public/Semantic-UI/components/comment.min.css","hash":"12854129c4ea8e1cfa3fe00ada3a0afa70ae35bf","modified":1459157167326},{"_id":"public/Semantic-UI/components/comment.css","hash":"038c1302a1e59e324f6dac413f111149f17c3832","modified":1459157167326},{"_id":"public/Semantic-UI/components/colorize.min.js","hash":"361b9cb6eee40fee492ce9df113f43db8f533542","modified":1459157167326},{"_id":"public/Semantic-UI/components/colorize.js","hash":"53c1167db91569a3213eeb6871e4016d45fed122","modified":1459157167326},{"_id":"public/Semantic-UI/components/checkbox.min.js","hash":"c2e1afdf85b7ebc3a2c43dc0207a38af48df9488","modified":1459157167326},{"_id":"public/Semantic-UI/components/checkbox.min.css","hash":"b35f45a65e7192e20d79c0d20570c2767c142bff","modified":1459157167326},{"_id":"public/Semantic-UI/components/checkbox.css","hash":"89ba73f64d654c4f59140c7762241f8b5a6176ef","modified":1459157167326},{"_id":"public/Semantic-UI/components/card.min.css","hash":"e0f4ee44162ce7707b485388b8fc3d42b50d3912","modified":1459157167327},{"_id":"public/Semantic-UI/components/breadcrumb.css","hash":"7a077ab695ca2e22281b4fcbe95a3f556470d160","modified":1459157167327},{"_id":"public/Semantic-UI/components/breadcrumb.min.css","hash":"4fce94183bee9a2952e77e02b9566c4b91e5d919","modified":1459157167327},{"_id":"public/Semantic-UI/components/api.min.js","hash":"3c47622e1e7144001bd790c4e4effb58ba7cf26d","modified":1459157167327},{"_id":"public/Semantic-UI/components/ad.min.css","hash":"dc1eb8ab894437e7e2936879bce730c57435d46a","modified":1459157167327},{"_id":"public/Semantic-UI/components/ad.css","hash":"f890ec539e660517ae3b7af08de30a692bd7b7dd","modified":1459157167327},{"_id":"public/Semantic-UI/components/accordion.min.js","hash":"1cc39733d0bc1043e4354286e7a1f4402df16dbb","modified":1459157167327},{"_id":"public/Semantic-UI/components/accordion.css","hash":"3f76d880441251e622b44e4a569ba32c5c1ecea2","modified":1459157167327},{"_id":"public/highlight/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1459157167327},{"_id":"public/highlight/styles/xcode.css","hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1459157167327},{"_id":"public/highlight/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1459157167327},{"_id":"public/highlight/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1459157167327},{"_id":"public/highlight/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1459157167327},{"_id":"public/highlight/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1459157167327},{"_id":"public/highlight/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1459157167327},{"_id":"public/highlight/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1459157167327},{"_id":"public/highlight/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1459157167327},{"_id":"public/highlight/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1459157167327},{"_id":"public/highlight/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1459157167327},{"_id":"public/highlight/styles/school-book.css","hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1459157167327},{"_id":"public/highlight/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1459157167328},{"_id":"public/highlight/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1459157167328},{"_id":"public/highlight/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1459157167328},{"_id":"public/highlight/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1459157167329},{"_id":"public/highlight/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1459157167329},{"_id":"public/highlight/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1459157167329},{"_id":"public/highlight/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1459157167329},{"_id":"public/highlight/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1459157167329},{"_id":"public/highlight/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1459157167329},{"_id":"public/highlight/styles/monokai.css","hash":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1459157167329},{"_id":"public/highlight/styles/mono-blue.css","hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1459157167329},{"_id":"public/highlight/styles/magula.css","hash":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1459157167329},{"_id":"public/highlight/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1459157167329},{"_id":"public/highlight/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1459157167329},{"_id":"public/highlight/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1459157167329},{"_id":"public/highlight/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1459157167329},{"_id":"public/highlight/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1459157167329},{"_id":"public/highlight/styles/hopscotch.css","hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1459157167329},{"_id":"public/highlight/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1459157167329},{"_id":"public/highlight/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1459157167329},{"_id":"public/highlight/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1459157167329},{"_id":"public/highlight/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1459157167329},{"_id":"public/highlight/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1459157167329},{"_id":"public/highlight/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1459157167329},{"_id":"public/highlight/styles/foundation.css","hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1459157167329},{"_id":"public/highlight/styles/github-gist.css","hash":"77cf684fda415812d6279a52f299c84850244778","modified":1459157167329},{"_id":"public/highlight/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1459157167330},{"_id":"public/highlight/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1459157167330},{"_id":"public/highlight/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1459157167330},{"_id":"public/highlight/styles/darkula.css","hash":"98e2c777fb1b7a3c63dd68b5b2c4ed5fee2349a9","modified":1459157167330},{"_id":"public/highlight/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1459157167330},{"_id":"public/highlight/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1459157167330},{"_id":"public/highlight/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1459157167330},{"_id":"public/highlight/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1459157167330},{"_id":"public/highlight/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1459157167330},{"_id":"public/highlight/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1459157167330},{"_id":"public/highlight/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1459157167330},{"_id":"public/highlight/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1459157167330},{"_id":"public/highlight/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1459157167330},{"_id":"public/highlight/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1459157167330},{"_id":"public/highlight/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1459157167330},{"_id":"public/highlight/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1459157167330},{"_id":"public/highlight/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1459157167330},{"_id":"public/highlight/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1459157167330},{"_id":"public/highlight/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1459157167330},{"_id":"public/highlight/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1459157167330},{"_id":"public/highlight/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1459157167330},{"_id":"public/highlight/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1459157167330},{"_id":"public/highlight/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1459157167330},{"_id":"public/highlight/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1459157167330},{"_id":"public/highlight/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1459157167330},{"_id":"public/highlight/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1459157167330},{"_id":"public/highlight/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1459157167330},{"_id":"public/highlight/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1459157167330},{"_id":"public/highlight/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1459157167330},{"_id":"public/highlight/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1459157167330},{"_id":"public/highlight/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1459157167330},{"_id":"public/highlight/styles/arduino-light.css","hash":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1459157167330},{"_id":"public/highlight/README.ru.html","hash":"32d25a7b9fe819a9d31c16651144efa085d73551","modified":1459157167331},{"_id":"public/highlight/README.html","hash":"795e7d01f427a042efb299f1c73edf0dbf08f28c","modified":1459157167331},{"_id":"public/Semantic-UI/components/accordion.min.css","hash":"f3644ad1b1aece623e00396d91ac86130b5da169","modified":1459157167331},{"_id":"public/highlight/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1459157167331},{"_id":"public/Semantic-UI/semantic.min.js","hash":"2a35bedce057b6a1a9b000b938885a8302ac2f3c","modified":1459157167331},{"_id":"public/Semantic-UI/semantic.min.css","hash":"605716fd8adba03407c84e47264231ffca7faae6","modified":1459157167331},{"_id":"public/Semantic-UI/semantic.js","hash":"ae887a36b586486fbbf1da93c9d13f47d95b3f74","modified":1459157167331},{"_id":"public/Semantic-UI/semantic.css","hash":"856599ed0238f310c97cdab56fb12580d7b0d31a","modified":1459157167331},{"_id":"public/Semantic-UI/components/transition.min.css","hash":"e104396d022bbb771fc44bed4e01d3687cfe5a03","modified":1459157167331},{"_id":"public/Semantic-UI/components/visibility.js","hash":"8bf69a2f3b1083d1b0edb1ed9920ee6f4ea6bb92","modified":1459157167331},{"_id":"public/Semantic-UI/components/transition.css","hash":"1cbd8d6f57150db9c2b413f96ee32191604c4fd3","modified":1459157167331},{"_id":"public/Semantic-UI/components/transition.js","hash":"8739c39ecb97ac2a1d011ce00834622923f148b8","modified":1459157167331},{"_id":"public/Semantic-UI/components/table.css","hash":"52d83d1c772f39360a2a71067953746ca96155e5","modified":1459157167331},{"_id":"public/Semantic-UI/components/tab.js","hash":"33222f3b0254148388ab16fccaa11ea020b67901","modified":1459157167331},{"_id":"public/Semantic-UI/components/sticky.js","hash":"f5e81cf9553034e3c6b857dc1bf89025aa5547a4","modified":1459157167331},{"_id":"public/Semantic-UI/components/step.min.css","hash":"4a164954a586b52d99dbf66bdbcd7edcff9d75bb","modified":1459157167332},{"_id":"public/Semantic-UI/components/step.css","hash":"7c2b8d104e4890f0369a7de912e2a709d37e7f0e","modified":1459157167332},{"_id":"public/Semantic-UI/components/state.js","hash":"fcd06d362286ebaefb91f2f83c796f54c1f9623f","modified":1459157167332},{"_id":"public/Semantic-UI/components/sidebar.js","hash":"03ee17f95fe4645f01b88a08ac027390adc2e285","modified":1459157167332},{"_id":"public/Semantic-UI/components/shape.js","hash":"bcce7b8038c3a23938811f8fffb9d542bd83a9cf","modified":1459157167332},{"_id":"public/Semantic-UI/components/search.js","hash":"63dabf9e44720399282624be79188f973374ec0c","modified":1459157167332},{"_id":"public/Semantic-UI/components/rating.min.css","hash":"494ff769515dabeb050ec23fff67074bc26fb703","modified":1459157167332},{"_id":"public/Semantic-UI/components/rating.css","hash":"682f76e1ab482824a66ac6e140a8257b9c1ecb2d","modified":1459157167332},{"_id":"public/Semantic-UI/components/progress.js","hash":"201b9d62643ebdebb534d54b8bd43c86ac388668","modified":1459157167332},{"_id":"public/Semantic-UI/components/popup.min.js","hash":"8baa84202ffb411c3dc5721175b21687231000fb","modified":1459157167332},{"_id":"public/Semantic-UI/components/popup.js","hash":"7fdfa5d3c67a84d1b29f1bf49cc147e150fbb630","modified":1459157167332},{"_id":"public/Semantic-UI/components/modal.js","hash":"ecd28602fd9698efb2a04ed889c5aa98ce012ad4","modified":1459157167332},{"_id":"public/Semantic-UI/components/menu.min.css","hash":"92f135c308cf345a5e5592401ee79e47564666a9","modified":1459157167332},{"_id":"public/Semantic-UI/components/menu.css","hash":"f590a0b57341a06b4be8dacab5a392ef6ef35cab","modified":1459157167332},{"_id":"public/Semantic-UI/components/list.css","hash":"d73a31275da082cc1a805fef2bf95f9c5980ad4f","modified":1459157167332},{"_id":"public/Semantic-UI/components/label.min.css","hash":"a56d06f8d4c560d8cbbc48f14c71a4b2b4c3d651","modified":1459157167332},{"_id":"public/Semantic-UI/components/label.css","hash":"c072df7b3444469bb01c2b1de69362be86b38f39","modified":1459157167332},{"_id":"public/Semantic-UI/components/icon.min.css","hash":"477ae0c3ddda6bc6b4599d9be7380e9b8b927ccd","modified":1459157167332},{"_id":"public/Semantic-UI/components/icon.css","hash":"ddc0a2738983e1e03dc3d5db5bf829cac13dbc4f","modified":1459157167332},{"_id":"public/Semantic-UI/components/grid.min.css","hash":"3bfca9e8b11f4f44ddb3b0ab14a258852616b962","modified":1459157167332},{"_id":"public/Semantic-UI/components/grid.css","hash":"fc3e7a7f7b51dc62896403d2876eab094117f969","modified":1459157167332},{"_id":"public/Semantic-UI/components/form.min.css","hash":"3abe943f323ce43a65d28e135a4bb345a198e364","modified":1459157167332},{"_id":"public/Semantic-UI/components/flag.min.css","hash":"35472a05ed0e1886f5e09a86f684684853f56c7e","modified":1459157167333},{"_id":"public/Semantic-UI/components/form.js","hash":"af161007073cdead99772b7bcecfa79f38657ab0","modified":1459157167333},{"_id":"public/Semantic-UI/components/flag.css","hash":"e2b4a4a8edb43ee4cd88814f769b8d3ecad54337","modified":1459157167333},{"_id":"public/Semantic-UI/components/form.css","hash":"492140633a7845f5aea31311307d81cea9d05d37","modified":1459157167333},{"_id":"public/Semantic-UI/components/embed.js","hash":"bf70ef5864280cb8f7c3e357be00cdaea65a471e","modified":1459157167333},{"_id":"public/Semantic-UI/components/dropdown.min.css","hash":"917fb1dd0fed2b3f5779283c6bb15325e26abf02","modified":1459157167333},{"_id":"public/Semantic-UI/components/dropdown.min.js","hash":"281c23abd474411e2bde706eac9ca41108006692","modified":1459157167333},{"_id":"public/Semantic-UI/components/dropdown.css","hash":"d4286b7dc547fd61f45f1d58d1aa551897712f1f","modified":1459157167333},{"_id":"public/Semantic-UI/components/dropdown.js","hash":"81b293f5b7cf2ffb9406196919b295fe8278956b","modified":1459157167333},{"_id":"public/Semantic-UI/components/dimmer.js","hash":"f58fdc30ff851854fb9b93bccf1f234375e8eea2","modified":1459157167333},{"_id":"public/Semantic-UI/components/checkbox.js","hash":"b5f5769524a54ac6e89ec10bb4d7ac73d93cf61c","modified":1459157167333},{"_id":"public/Semantic-UI/components/card.css","hash":"773dccbdead910e53ef4ebf7a4120b6dacf4e26a","modified":1459157167333},{"_id":"public/Semantic-UI/components/button.min.css","hash":"5b904c0dc4817069192b432bcd6bfd8cce682be0","modified":1459157167333},{"_id":"public/Semantic-UI/components/api.js","hash":"65b54df2bec071fa3c772349a124511d5b070889","modified":1459157167333},{"_id":"public/Semantic-UI/components/accordion.js","hash":"8a5f2183a11f42e04ba5b8366aa8d867efa99223","modified":1459157167333},{"_id":"public/Semantic-UI/components/button.css","hash":"3e23d0c327aea86d24d213811ad89c8e7ea9ff22","modified":1459157167333},{"_id":"public/highlight/CHANGES.html","hash":"ab31891e4edb3e301cd59b6c76f2cb853c9075ee","modified":1459157167333},{"_id":"public/highlight/highlight.pack.js","hash":"83da0f1aefd0a360e3d33a606b7fa3292e7eb505","modified":1459157167333},{"_id":"public/Semantic-UI/themes/default/assets/fonts/icons.svg","hash":"26bb1c5ef100a1cd71923f1d5dc29fc797ef4639","modified":1459157167361},{"_id":"source/CNAME","hash":"ccc5f820eca94c846077c09c1504a348376c0901","modified":1423735419864},{"_id":"source/gK2GpTxRdv991SKVFAOhK-0mOrY.html","hash":"b8992b270e15d0508152ad030b174e2a0d2b72ca","modified":1430375716148},{"_id":"source/_posts/0213-clipstadiopaint初学教程.md","hash":"d3f9ad7700adc68290a1b9f4c207b85dc7d62d5d","modified":1423818090439},{"_id":"source/_posts/0611-Ionic.md","hash":"0b51a580b8c6e0740d6a129132692bbace3b2f6b","modified":1423807916659},{"_id":"source/_posts/0611-yeoman.md","hash":"96d7e18d41bd61e44af38aa51c80da8419f702b4","modified":1423807947499},{"_id":"source/_posts/0214-音乐乐理笔记.md","hash":"7e0a55f33f77c0c757addfa57feaeff1dd66a233","modified":1423818335409},{"_id":"source/_posts/0618-phonegap.md","hash":"51020c099da3f2de44a95aa8b41e8ce4cb496f7a","modified":1423808008998},{"_id":"source/_posts/0623-grunt.md","hash":"f662d1901921d87fc4b8764ef49f033682565556","modified":1423808068384},{"_id":"source/_posts/0623-gruntfile 配置.md","hash":"302da5ef3f492e3c0582a612102e35ee6c520868","modified":1423808170388},{"_id":"source/_posts/0624-JS Unit Testing.md","hash":"6141a19fd3607b268e44b8b04196fd828057c365","modified":1430361019721},{"_id":"source/_posts/0624-grunt common plugin.md","hash":"95aabda17328778dd2c625e7d11c7bb984c1e73f","modified":1423808208558},{"_id":"source/_posts/0625-grunt 项目架设.md","hash":"3dcce70ac041f895624e1d0991d4aa5ffaa27691","modified":1423808363126},{"_id":"source/_posts/0627-前端规范--思维导图.md","hash":"a820e2d74b22ce88b572964076c8691ca6550143","modified":1423808397842},{"_id":"source/_posts/0812-SVG 信息图表——实例流程介绍.md","hash":"4efda0faa8f6760257794cdd6f9b47dd155a15ba","modified":1423808418913},{"_id":"source/_posts/0812-svg pattern.md","hash":"07f969c37be6fc464a295da40e338e6f1a3d721f","modified":1423809706405},{"_id":"source/_posts/0820-jquery 插件自定义.md","hash":"42e566add85cab003849d39f9af33ab9464394b7","modified":1430361138525},{"_id":"source/_posts/0925-angular phonecat.md","hash":"094ce119c821e034a19a238c47f7fa803fa0dc67","modified":1423808528990},{"_id":"source/_posts/0926-angular lesson2.md","hash":"203197419c3ceb7ca842fe9f36b2fec9fbb532d6","modified":1423807884962},{"_id":"source/_posts/0926-angular lesson3 - part2.md","hash":"53e9b36691c893fd461ad8b2aa8d27a2393666cd","modified":1423808568080},{"_id":"source/_posts/0926-angular lesson3.md","hash":"af39cc4e4acf2f9b74b56e7c8a125e3a830614f3","modified":1423808604294},{"_id":"source/_posts/0930-protractor.md","hash":"769586fc0f7a23cd022f6d7ea8e2158e9a4a6495","modified":1430361120860},{"_id":"source/_posts/1013-getBoundClientRect.md","hash":"956196b65d2591abdcc9839ca9b6bccd6d1bcaf6","modified":1423809642635},{"_id":"source/_posts/1101-history.md","hash":"03989475d611ae338f34368c396ce0f2428baa9e","modified":1430360875290},{"_id":"source/_posts/2015不是本命，也要拼命——最近要做的事2015春.md","hash":"c7f7c296d482bbb323966a01014a1c94d151af2f","modified":1423808996503},{"_id":"source/_posts/Aurelia-文档小翻译.md","hash":"689d439a13ff1d26b31b6621858876bada357240","modified":1434013369652},{"_id":"source/_posts/Aurelia-文档小翻译（二）.md","hash":"12bfd3750c98972407f88ac0076ede7ad7bd30ee","modified":1434615125629},{"_id":"source/_posts/CMD 和 AMD.md","hash":"6978db24b8af195b80b12f915fdb3f22827a8f5c","modified":1430361000368},{"_id":"source/_posts/JS-怎么克隆对象？.md","hash":"2b2a1538b9cf5886c2c2ce989f2d6195644c57ff","modified":1430360968992},{"_id":"source/_posts/JSON-是否为空.md","hash":"6e935e850760fd781e764fdc5af2fb0ff5879896","modified":1430359757814},{"_id":"source/_posts/a-标签中的-input-文本不能被选中.md","hash":"9455ed4973b71054ceffac71ea2363f4ab44d292","modified":1430360547930},{"_id":"source/_posts/git-bash-之-export-与-bashrc.md","hash":"b981072c520d21d54e3631deff3575417fe89525","modified":1430360620246},{"_id":"source/_posts/14-06-todo.md","hash":"231078d1bee476be24f17b2ec2caf56af0542077","modified":1423799786168},{"_id":"source/_posts/git-bash-使用-sublime-text-打开文件.md","hash":"4579b256972581a18aa55173a337e1a82b699c06","modified":1430360751509},{"_id":"source/_posts/git-不小心提交了的目录下有-git-文件，咋办？.md","hash":"f0a205d50314d7547b8d68b68d4762a3a75662e0","modified":1429695917730},{"_id":"source/_posts/git-config-常用命.md","hash":"ba93e417de6912ecc7512b7914e2cb4965b31970","modified":1430359910744},{"_id":"source/_posts/我就是记不住-callee-与-caller-的区别.md","hash":"edee260d977caa8f36c617ccb6f7c5dd9dc8c672","modified":1429694781389},{"_id":"source/categories/index.md","hash":"f6b05f97bed3a2acfbe0287536d3902991748c58","modified":1423561138139},{"_id":"source/about/index.md","hash":"84c344188d9ff0abffea81976086a6da710ce48c","modified":1430126712383},{"_id":"source/lab/index.md","hash":"c6d6f2ee29c2f91044049f84c3882ff4844ba9fb","modified":1430127418150},{"_id":"source/tags/index.md","hash":"a59df0a497bf9f98fe3e6c8d9e9022e1c5795205","modified":1423561158369}],"Category":[{"name":"Aurelia","_id":"cim0p8nxq00014h7od5ubbt18"},{"name":"手绘","_id":"cimbugpgh0005ok1vejxctfir"},{"name":"Yeoman","_id":"cimbugpgq0009ok1vyoi48aql"},{"name":"Angular","_id":"cimbugpgt000dok1veobo6x8s"},{"name":"音乐","_id":"cimbugpgy000hok1vseu3q0y6"},{"name":"phonegap","_id":"cimbugph1000lok1vt8mf450d"},{"name":"Grunt","_id":"cimbugph5000qok1vdkmzvg2v"},{"name":"test","_id":"cimbugphb000yok1vahw7a1k9"},{"name":"规范","_id":"cimbugphk001dok1vlamrooud"},{"name":"svg","_id":"cimbugpho001jok1v6qn4fc1v"},{"name":"js","_id":"cimbugpi9001uok1v1siakhlb"},{"name":"to-do","_id":"cimbugpig0024ok1vjrzd6dys"},{"name":"html","_id":"cimbugpij002bok1vairadin6"},{"name":"git","_id":"cimbugpil002dok1vktan65d6"}],"Data":[],"Page":[{"_content":"<html>\n    <head>\n        <meta name=\"alexaVerifyID\" content=\"gK2GpTxRdv991SKVFAOhK-0mOrY\" />\n    </head>\n    <body>\n        <p>Great! The file uploaded properly.  Now click the 'Verify my file' button to\n        complete the process.</p>\n    </body>\n</html>\n","source":"gK2GpTxRdv991SKVFAOhK-0mOrY.html","raw":"<html>\n    <head>\n        <meta name=\"alexaVerifyID\" content=\"gK2GpTxRdv991SKVFAOhK-0mOrY\" />\n    </head>\n    <body>\n        <p>Great! The file uploaded properly.  Now click the 'Verify my file' button to\n        complete the process.</p>\n    </body>\n</html>\n","date":"2016-03-28T10:20:04.837Z","updated":"2015-04-30T06:35:16.148Z","path":"gK2GpTxRdv991SKVFAOhK-0mOrY.html","title":"","comments":1,"layout":"page","_id":"cimbugpfq0000ok1vt7k7ducd","content":"<html>\n    <head>\n        <meta name=\"alexaVerifyID\" content=\"gK2GpTxRdv991SKVFAOhK-0mOrY\">\n    </head>\n    <body>\n        <p>Great! The file uploaded properly.  Now click the 'Verify my file' button to\n        complete the process.</p>\n    </body>\n</html>\n","excerpt":"","more":"<html>\n    <head>\n        <meta name=\"alexaVerifyID\" content=\"gK2GpTxRdv991SKVFAOhK-0mOrY\" />\n    </head>\n    <body>\n        <p>Great! The file uploaded properly.  Now click the 'Verify my file' button to\n        complete the process.</p>\n    </body>\n</html>\n"},{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n---","date":"2016-03-28T10:20:05.136Z","updated":"2015-02-10T09:38:58.139Z","path":"categories/index.html","comments":1,"_id":"cimbugpgc0002ok1vrnazuw8g","content":"","excerpt":"","more":""},{"_content":"# about\n## asjmtz@163.com","source":"about/index.md","raw":"# about\n## asjmtz@163.com","date":"2016-03-28T10:20:05.128Z","updated":"2015-04-27T09:25:12.383Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cimbugpgf0004ok1v09lwm9v0","content":"<h1 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h1><h2 id=\"asjmtz-163-com\"><a href=\"#asjmtz-163-com\" class=\"headerlink\" title=\"asjmtz@163.com\"></a>asjmtz@163.com</h2>","excerpt":"","more":"<h1 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h1><h2 id=\"asjmtz-163-com\"><a href=\"#asjmtz-163-com\" class=\"headerlink\" title=\"asjmtz@163.com\"></a>asjmtz@163.com</h2>"},{"_content":"# lab\n\n## js bin\n\n- [ JS 对象克隆 ](http://jsbin.com/hudoke/2/edit)\n- [ callee 与 caller ](http://jsbin.com/miqok/7/edit)\n- [自定义 input ranger 样式](http://jsbin.com/pavuvi/2)\n\n## 测试 in JsPerf\n\n- [JS 对象克隆方法的性能比较](http://jsperf.com/clone-object-ways)\n","source":"lab/index.md","raw":"# lab\n\n## js bin\n\n- [ JS 对象克隆 ](http://jsbin.com/hudoke/2/edit)\n- [ callee 与 caller ](http://jsbin.com/miqok/7/edit)\n- [自定义 input ranger 样式](http://jsbin.com/pavuvi/2)\n\n## 测试 in JsPerf\n\n- [JS 对象克隆方法的性能比较](http://jsperf.com/clone-object-ways)\n","date":"2016-03-28T10:20:05.143Z","updated":"2015-04-27T09:36:58.150Z","path":"lab/index.html","title":"","comments":1,"layout":"page","_id":"cimbugpj1002ook1v4n047nzz","content":"<h1 id=\"lab\"><a href=\"#lab\" class=\"headerlink\" title=\"lab\"></a>lab</h1><h2 id=\"js-bin\"><a href=\"#js-bin\" class=\"headerlink\" title=\"js bin\"></a>js bin</h2><ul>\n<li><a href=\"http://jsbin.com/hudoke/2/edit\" target=\"_blank\" rel=\"external\"> JS 对象克隆 </a></li>\n<li><a href=\"http://jsbin.com/miqok/7/edit\" target=\"_blank\" rel=\"external\"> callee 与 caller </a></li>\n<li><a href=\"http://jsbin.com/pavuvi/2\" target=\"_blank\" rel=\"external\">自定义 input ranger 样式</a></li>\n</ul>\n<h2 id=\"测试-in-JsPerf\"><a href=\"#测试-in-JsPerf\" class=\"headerlink\" title=\"测试 in JsPerf\"></a>测试 in JsPerf</h2><ul>\n<li><a href=\"http://jsperf.com/clone-object-ways\" target=\"_blank\" rel=\"external\">JS 对象克隆方法的性能比较</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"lab\"><a href=\"#lab\" class=\"headerlink\" title=\"lab\"></a>lab</h1><h2 id=\"js-bin\"><a href=\"#js-bin\" class=\"headerlink\" title=\"js bin\"></a>js bin</h2><ul>\n<li><a href=\"http://jsbin.com/hudoke/2/edit\"> JS 对象克隆 </a></li>\n<li><a href=\"http://jsbin.com/miqok/7/edit\"> callee 与 caller </a></li>\n<li><a href=\"http://jsbin.com/pavuvi/2\">自定义 input ranger 样式</a></li>\n</ul>\n<h2 id=\"测试-in-JsPerf\"><a href=\"#测试-in-JsPerf\" class=\"headerlink\" title=\"测试 in JsPerf\"></a>测试 in JsPerf</h2><ul>\n<li><a href=\"http://jsperf.com/clone-object-ways\">JS 对象克隆方法的性能比较</a></li>\n</ul>\n"},{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle: tags\n---","date":"2016-03-28T10:20:05.151Z","updated":"2015-02-10T09:39:18.369Z","path":"tags/index.html","comments":1,"_id":"cimbugpjk002pok1vjxtxhr04","content":"","excerpt":"","more":""}],"Post":[{"title":"clip stadio paint 初学教程及使用方法（Ver 1.3.9）","date":"2015-02-13T08:58:37.000Z","description":"clip stadio paint 初学教程和常用快捷键","_content":"\n参考教程\n> [《日本官网教程》](http://www.clip-studio.com/clip_site/howto/library/page/view/clipstudiopaint_hajimete_before_003)\n> [《静音双子的上色过程》](http://www.pixvi.net/pitech/?p=279) -- p站\n\n## 基本用法\n\n常用快捷键\n\n* P.S: 在放大缩小的时候， Mac OS X 的用法是先按 [ Space ]键，再按[ Command ]键。\n\n|   ********   | Windows |   Macintosh   |\n| :---------   |:--------:| :------: |\n|  显示全部  | [Ctrl]+[0(数字))] |  [Command]+[0(数字)]  |\n| 扩大/缩小 | [Ctrl]+[Space]+([Alt]缩小) |  [Command]+[Space]+([Alt]缩小)  |\n| 画布移动 | [Space] | [Space] |\n| 画布旋转 | [Shift]+[Space] | [Shift]+[Space] |\n| 画布清空 | [Delete] | [Delete] |\n\n## 插画创作基本流程\n\n### 草稿（下描き）\n\n**[1]描线**\n\n选择铅笔画草稿，调整合适你的笔大小和颜色\n\n**[2]線を修正する**\n\n选择橡皮工具，调整他的大小然后擦出多余的线条\n\n### 描线\n\n**[1]新建描线层**\n\n**[2]选择钢笔工具的G笔**\n调整笔的大小和颜色，开画。\n\n###上色\n\n**[1]新建上色图层**\n\n建议每个颜色一个图层，按涂得部分命名，比如：身体、头发、衣服等等。\n\n**[2]上色工具**\n\n可以用钢笔工具或其他如铅笔铺色，橡皮擦清除超出的部分，或者用填充工具来填充封闭的区域。\n\n水彩可以涂比较温和的光色，比如脸上的红晕等\n\n**[3]铺色**\n\n填入每个区块的基本颜色\n\n**[4]投影**\n\n- 假设光的强度和照过来的方向，不同时间（早中晚）、不同环境的光是不一样的\n- 根据光，在合适的地方用笔轻轻地加深一下\n\n**[5]反光点**\n\n\n\n\n\n\n\n","source":"_posts/0213-clipstadiopaint初学教程.md","raw":"title: clip stadio paint 初学教程及使用方法（Ver 1.3.9）\ndate: 2015-02-13 16:58:37\ncategories: 手绘\ndescription: clip stadio paint 初学教程和常用快捷键\n---\n\n参考教程\n> [《日本官网教程》](http://www.clip-studio.com/clip_site/howto/library/page/view/clipstudiopaint_hajimete_before_003)\n> [《静音双子的上色过程》](http://www.pixvi.net/pitech/?p=279) -- p站\n\n## 基本用法\n\n常用快捷键\n\n* P.S: 在放大缩小的时候， Mac OS X 的用法是先按 [ Space ]键，再按[ Command ]键。\n\n|   ********   | Windows |   Macintosh   |\n| :---------   |:--------:| :------: |\n|  显示全部  | [Ctrl]+[0(数字))] |  [Command]+[0(数字)]  |\n| 扩大/缩小 | [Ctrl]+[Space]+([Alt]缩小) |  [Command]+[Space]+([Alt]缩小)  |\n| 画布移动 | [Space] | [Space] |\n| 画布旋转 | [Shift]+[Space] | [Shift]+[Space] |\n| 画布清空 | [Delete] | [Delete] |\n\n## 插画创作基本流程\n\n### 草稿（下描き）\n\n**[1]描线**\n\n选择铅笔画草稿，调整合适你的笔大小和颜色\n\n**[2]線を修正する**\n\n选择橡皮工具，调整他的大小然后擦出多余的线条\n\n### 描线\n\n**[1]新建描线层**\n\n**[2]选择钢笔工具的G笔**\n调整笔的大小和颜色，开画。\n\n###上色\n\n**[1]新建上色图层**\n\n建议每个颜色一个图层，按涂得部分命名，比如：身体、头发、衣服等等。\n\n**[2]上色工具**\n\n可以用钢笔工具或其他如铅笔铺色，橡皮擦清除超出的部分，或者用填充工具来填充封闭的区域。\n\n水彩可以涂比较温和的光色，比如脸上的红晕等\n\n**[3]铺色**\n\n填入每个区块的基本颜色\n\n**[4]投影**\n\n- 假设光的强度和照过来的方向，不同时间（早中晚）、不同环境的光是不一样的\n- 根据光，在合适的地方用笔轻轻地加深一下\n\n**[5]反光点**\n\n\n\n\n\n\n\n","slug":"0213-clipstadiopaint初学教程","published":1,"updated":"2015-02-13T09:01:30.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpg80001ok1v58ofzjgj","content":"<p>参考教程</p>\n<blockquote>\n<p><a href=\"http://www.clip-studio.com/clip_site/howto/library/page/view/clipstudiopaint_hajimete_before_003\" target=\"_blank\" rel=\"external\">《日本官网教程》</a><br><a href=\"http://www.pixvi.net/pitech/?p=279\" target=\"_blank\" rel=\"external\">《静音双子的上色过程》</a> – p站</p>\n</blockquote>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>常用快捷键</p>\n<ul>\n<li>P.S: 在放大缩小的时候， Mac OS X 的用法是先按 [ Space ]键，再按[ Command ]键。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong><em>**</em></strong></th>\n<th style=\"text-align:center\">Windows</th>\n<th style=\"text-align:center\">Macintosh</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">显示全部</td>\n<td style=\"text-align:center\">[Ctrl]+[0(数字))]</td>\n<td style=\"text-align:center\">[Command]+[0(数字)]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">扩大/缩小</td>\n<td style=\"text-align:center\">[Ctrl]+[Space]+([Alt]缩小)</td>\n<td style=\"text-align:center\">[Command]+[Space]+([Alt]缩小)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">画布移动</td>\n<td style=\"text-align:center\">[Space]</td>\n<td style=\"text-align:center\">[Space]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">画布旋转</td>\n<td style=\"text-align:center\">[Shift]+[Space]</td>\n<td style=\"text-align:center\">[Shift]+[Space]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">画布清空</td>\n<td style=\"text-align:center\">[Delete]</td>\n<td style=\"text-align:center\">[Delete]</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"插画创作基本流程\"><a href=\"#插画创作基本流程\" class=\"headerlink\" title=\"插画创作基本流程\"></a>插画创作基本流程</h2><h3 id=\"草稿（下描き）\"><a href=\"#草稿（下描き）\" class=\"headerlink\" title=\"草稿（下描き）\"></a>草稿（下描き）</h3><p><strong>[1]描线</strong></p>\n<p>选择铅笔画草稿，调整合适你的笔大小和颜色</p>\n<p><strong>[2]線を修正する</strong></p>\n<p>选择橡皮工具，调整他的大小然后擦出多余的线条</p>\n<h3 id=\"描线\"><a href=\"#描线\" class=\"headerlink\" title=\"描线\"></a>描线</h3><p><strong>[1]新建描线层</strong></p>\n<p><strong>[2]选择钢笔工具的G笔</strong><br>调整笔的大小和颜色，开画。</p>\n<p>###上色</p>\n<p><strong>[1]新建上色图层</strong></p>\n<p>建议每个颜色一个图层，按涂得部分命名，比如：身体、头发、衣服等等。</p>\n<p><strong>[2]上色工具</strong></p>\n<p>可以用钢笔工具或其他如铅笔铺色，橡皮擦清除超出的部分，或者用填充工具来填充封闭的区域。</p>\n<p>水彩可以涂比较温和的光色，比如脸上的红晕等</p>\n<p><strong>[3]铺色</strong></p>\n<p>填入每个区块的基本颜色</p>\n<p><strong>[4]投影</strong></p>\n<ul>\n<li>假设光的强度和照过来的方向，不同时间（早中晚）、不同环境的光是不一样的</li>\n<li>根据光，在合适的地方用笔轻轻地加深一下</li>\n</ul>\n<p><strong>[5]反光点</strong></p>\n","excerpt":"","more":"<p>参考教程</p>\n<blockquote>\n<p><a href=\"http://www.clip-studio.com/clip_site/howto/library/page/view/clipstudiopaint_hajimete_before_003\">《日本官网教程》</a><br><a href=\"http://www.pixvi.net/pitech/?p=279\">《静音双子的上色过程》</a> – p站</p>\n</blockquote>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>常用快捷键</p>\n<ul>\n<li>P.S: 在放大缩小的时候， Mac OS X 的用法是先按 [ Space ]键，再按[ Command ]键。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong><em>**</em></strong></th>\n<th style=\"text-align:center\">Windows</th>\n<th style=\"text-align:center\">Macintosh</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">显示全部</td>\n<td style=\"text-align:center\">[Ctrl]+[0(数字))]</td>\n<td style=\"text-align:center\">[Command]+[0(数字)]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">扩大/缩小</td>\n<td style=\"text-align:center\">[Ctrl]+[Space]+([Alt]缩小)</td>\n<td style=\"text-align:center\">[Command]+[Space]+([Alt]缩小)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">画布移动</td>\n<td style=\"text-align:center\">[Space]</td>\n<td style=\"text-align:center\">[Space]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">画布旋转</td>\n<td style=\"text-align:center\">[Shift]+[Space]</td>\n<td style=\"text-align:center\">[Shift]+[Space]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">画布清空</td>\n<td style=\"text-align:center\">[Delete]</td>\n<td style=\"text-align:center\">[Delete]</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"插画创作基本流程\"><a href=\"#插画创作基本流程\" class=\"headerlink\" title=\"插画创作基本流程\"></a>插画创作基本流程</h2><h3 id=\"草稿（下描き）\"><a href=\"#草稿（下描き）\" class=\"headerlink\" title=\"草稿（下描き）\"></a>草稿（下描き）</h3><p><strong>[1]描线</strong></p>\n<p>选择铅笔画草稿，调整合适你的笔大小和颜色</p>\n<p><strong>[2]線を修正する</strong></p>\n<p>选择橡皮工具，调整他的大小然后擦出多余的线条</p>\n<h3 id=\"描线\"><a href=\"#描线\" class=\"headerlink\" title=\"描线\"></a>描线</h3><p><strong>[1]新建描线层</strong></p>\n<p><strong>[2]选择钢笔工具的G笔</strong><br>调整笔的大小和颜色，开画。</p>\n<p>###上色</p>\n<p><strong>[1]新建上色图层</strong></p>\n<p>建议每个颜色一个图层，按涂得部分命名，比如：身体、头发、衣服等等。</p>\n<p><strong>[2]上色工具</strong></p>\n<p>可以用钢笔工具或其他如铅笔铺色，橡皮擦清除超出的部分，或者用填充工具来填充封闭的区域。</p>\n<p>水彩可以涂比较温和的光色，比如脸上的红晕等</p>\n<p><strong>[3]铺色</strong></p>\n<p>填入每个区块的基本颜色</p>\n<p><strong>[4]投影</strong></p>\n<ul>\n<li>假设光的强度和照过来的方向，不同时间（早中晚）、不同环境的光是不一样的</li>\n<li>根据光，在合适的地方用笔轻轻地加深一下</li>\n</ul>\n<p><strong>[5]反光点</strong></p>\n"},{"title":"Yeoman 安装","date":"2014-06-11T03:06:59.000Z","description":"Yeoman 安装过程介绍","_content":"\n\n官网：http://yeoman.io/learning/index.html\n中文官网：http://yeomanjs.org/index.html\n\n##安装yo\n\n安装yo之前，注意先有node环境和git。\n在windows下，安装完git程序后，还要将他的bin目录添加到PATH中，才能全局调用git命令。\n\n```\nnpm install -g yo\n```\n我的yo版本是1.1.2\n\n一般会自动安装`grunt`和`bower`，如果是老版本，需手动安装他们，类似\n\n```\nnpm install -g grunt-cli bower\n```\n\n##架设生成器\n\n安装`generator-webapp`生成器\n\n```\nnpm install -g generator-webapp\n```\n\n建立目录`mkdir my-yo-project cd my-yo-project`\n\n在工程目录下，命令\n\n```\nyo webapp\n```\n\nEach project created with yo will also pull in relevant Grunt tasks which the community feels is needed or useful for your workflow.\n\n整个工作流程，应该是\n```\nyo webapp\ngrunt server\n```\n和中文官网的例子有些不同，就是中间的`bower install <dep>`那步是可以选择的，即如果webapp安装的时候，没有自动安装的依赖的库可以之后，手动添加，bower介绍看下面\n\n#Bower\n---\nBower包管理工具，部署JS、HTML、css、images等。\n\n```\n# Search for a dependency in the Bower registry.\n# 搜包\nbower search <dep>\n\n# Install one or more dependencies.\n# 安装依赖\nbower install <dep>..<depN>\n\n# List out the dependencies you have installed for a project.\n# 显示已安装的依赖\nbower list\n\n# Update a dependency to the latest version available.\n# 更新依赖到最新版本\nbower update <dep>\n\n```\n\n在yo架设的项目里面使用Bower管理\n\n以下是安装jQuery插件的例子\n\n```\n# Scaffold a new application.\nyo webapp\n\n# Search Bower's registry for the plug-in we want.\nbower search jquery-pjax\n\n# Install it and save it to bower.json\nbower install jquery-pjax --save\n\n# If you're using RequireJS...\n# (be aware that currently the webapp generator does not include RequireJS and the following command only applies to generators that do)\ngrunt bower\n> Injects your Bower dependencies into your RequireJS configuration.\n\n# If you're not using RequireJS...\ngrunt bowerInstall\n> Injects your dependencies into your index.html file.\n```\n\n\n","source":"_posts/0611-yeoman.md","raw":"title: Yeoman 安装\ndate: 2014-06-11 11:06:59\ncategories: Yeoman\ndescription: Yeoman 安装过程介绍\n---\n\n\n官网：http://yeoman.io/learning/index.html\n中文官网：http://yeomanjs.org/index.html\n\n##安装yo\n\n安装yo之前，注意先有node环境和git。\n在windows下，安装完git程序后，还要将他的bin目录添加到PATH中，才能全局调用git命令。\n\n```\nnpm install -g yo\n```\n我的yo版本是1.1.2\n\n一般会自动安装`grunt`和`bower`，如果是老版本，需手动安装他们，类似\n\n```\nnpm install -g grunt-cli bower\n```\n\n##架设生成器\n\n安装`generator-webapp`生成器\n\n```\nnpm install -g generator-webapp\n```\n\n建立目录`mkdir my-yo-project cd my-yo-project`\n\n在工程目录下，命令\n\n```\nyo webapp\n```\n\nEach project created with yo will also pull in relevant Grunt tasks which the community feels is needed or useful for your workflow.\n\n整个工作流程，应该是\n```\nyo webapp\ngrunt server\n```\n和中文官网的例子有些不同，就是中间的`bower install <dep>`那步是可以选择的，即如果webapp安装的时候，没有自动安装的依赖的库可以之后，手动添加，bower介绍看下面\n\n#Bower\n---\nBower包管理工具，部署JS、HTML、css、images等。\n\n```\n# Search for a dependency in the Bower registry.\n# 搜包\nbower search <dep>\n\n# Install one or more dependencies.\n# 安装依赖\nbower install <dep>..<depN>\n\n# List out the dependencies you have installed for a project.\n# 显示已安装的依赖\nbower list\n\n# Update a dependency to the latest version available.\n# 更新依赖到最新版本\nbower update <dep>\n\n```\n\n在yo架设的项目里面使用Bower管理\n\n以下是安装jQuery插件的例子\n\n```\n# Scaffold a new application.\nyo webapp\n\n# Search Bower's registry for the plug-in we want.\nbower search jquery-pjax\n\n# Install it and save it to bower.json\nbower install jquery-pjax --save\n\n# If you're using RequireJS...\n# (be aware that currently the webapp generator does not include RequireJS and the following command only applies to generators that do)\ngrunt bower\n> Injects your Bower dependencies into your RequireJS configuration.\n\n# If you're not using RequireJS...\ngrunt bowerInstall\n> Injects your dependencies into your index.html file.\n```\n\n\n","slug":"0611-yeoman","published":1,"updated":"2015-02-13T06:12:27.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpge0003ok1vk3xuoj4b","content":"<p>官网：<a href=\"http://yeoman.io/learning/index.html\" target=\"_blank\" rel=\"external\">http://yeoman.io/learning/index.html</a><br>中文官网：<a href=\"http://yeomanjs.org/index.html\" target=\"_blank\" rel=\"external\">http://yeomanjs.org/index.html</a></p>\n<p>##安装yo</p>\n<p>安装yo之前，注意先有node环境和git。<br>在windows下，安装完git程序后，还要将他的bin目录添加到PATH中，才能全局调用git命令。</p>\n<pre><code>npm install -g yo\n</code></pre><p>我的yo版本是1.1.2</p>\n<p>一般会自动安装<code>grunt</code>和<code>bower</code>，如果是老版本，需手动安装他们，类似</p>\n<pre><code>npm install -g grunt-cli bower\n</code></pre><p>##架设生成器</p>\n<p>安装<code>generator-webapp</code>生成器</p>\n<pre><code>npm install -g generator-webapp\n</code></pre><p>建立目录<code>mkdir my-yo-project cd my-yo-project</code></p>\n<p>在工程目录下，命令</p>\n<pre><code>yo webapp\n</code></pre><p>Each project created with yo will also pull in relevant Grunt tasks which the community feels is needed or useful for your workflow.</p>\n<p>整个工作流程，应该是</p>\n<pre><code>yo webapp\ngrunt server\n</code></pre><p>和中文官网的例子有些不同，就是中间的<code>bower install &lt;dep&gt;</code>那步是可以选择的，即如果webapp安装的时候，没有自动安装的依赖的库可以之后，手动添加，bower介绍看下面</p>\n<h2 id=\"Bower\"><a href=\"#Bower\" class=\"headerlink\" title=\"#Bower\"></a>#Bower</h2><p>Bower包管理工具，部署JS、HTML、css、images等。</p>\n<pre><code># Search for a dependency in the Bower registry.\n# 搜包\nbower search &lt;dep&gt;\n\n# Install one or more dependencies.\n# 安装依赖\nbower install &lt;dep&gt;..&lt;depN&gt;\n\n# List out the dependencies you have installed for a project.\n# 显示已安装的依赖\nbower list\n\n# Update a dependency to the latest version available.\n# 更新依赖到最新版本\nbower update &lt;dep&gt;\n</code></pre><p>在yo架设的项目里面使用Bower管理</p>\n<p>以下是安装jQuery插件的例子</p>\n<pre><code># Scaffold a new application.\nyo webapp\n\n# Search Bower&#39;s registry for the plug-in we want.\nbower search jquery-pjax\n\n# Install it and save it to bower.json\nbower install jquery-pjax --save\n\n# If you&#39;re using RequireJS...\n# (be aware that currently the webapp generator does not include RequireJS and the following command only applies to generators that do)\ngrunt bower\n&gt; Injects your Bower dependencies into your RequireJS configuration.\n\n# If you&#39;re not using RequireJS...\ngrunt bowerInstall\n&gt; Injects your dependencies into your index.html file.\n</code></pre>","excerpt":"","more":"<p>官网：<a href=\"http://yeoman.io/learning/index.html\">http://yeoman.io/learning/index.html</a><br>中文官网：<a href=\"http://yeomanjs.org/index.html\">http://yeomanjs.org/index.html</a></p>\n<p>##安装yo</p>\n<p>安装yo之前，注意先有node环境和git。<br>在windows下，安装完git程序后，还要将他的bin目录添加到PATH中，才能全局调用git命令。</p>\n<pre><code>npm install -g yo\n</code></pre><p>我的yo版本是1.1.2</p>\n<p>一般会自动安装<code>grunt</code>和<code>bower</code>，如果是老版本，需手动安装他们，类似</p>\n<pre><code>npm install -g grunt-cli bower\n</code></pre><p>##架设生成器</p>\n<p>安装<code>generator-webapp</code>生成器</p>\n<pre><code>npm install -g generator-webapp\n</code></pre><p>建立目录<code>mkdir my-yo-project cd my-yo-project</code></p>\n<p>在工程目录下，命令</p>\n<pre><code>yo webapp\n</code></pre><p>Each project created with yo will also pull in relevant Grunt tasks which the community feels is needed or useful for your workflow.</p>\n<p>整个工作流程，应该是</p>\n<pre><code>yo webapp\ngrunt server\n</code></pre><p>和中文官网的例子有些不同，就是中间的<code>bower install &lt;dep&gt;</code>那步是可以选择的，即如果webapp安装的时候，没有自动安装的依赖的库可以之后，手动添加，bower介绍看下面</p>\n<h2 id=\"Bower\"><a href=\"#Bower\" class=\"headerlink\" title=\"#Bower\"></a>#Bower</h2><p>Bower包管理工具，部署JS、HTML、css、images等。</p>\n<pre><code># Search for a dependency in the Bower registry.\n# 搜包\nbower search &lt;dep&gt;\n\n# Install one or more dependencies.\n# 安装依赖\nbower install &lt;dep&gt;..&lt;depN&gt;\n\n# List out the dependencies you have installed for a project.\n# 显示已安装的依赖\nbower list\n\n# Update a dependency to the latest version available.\n# 更新依赖到最新版本\nbower update &lt;dep&gt;\n</code></pre><p>在yo架设的项目里面使用Bower管理</p>\n<p>以下是安装jQuery插件的例子</p>\n<pre><code># Scaffold a new application.\nyo webapp\n\n# Search Bower&#39;s registry for the plug-in we want.\nbower search jquery-pjax\n\n# Install it and save it to bower.json\nbower install jquery-pjax --save\n\n# If you&#39;re using RequireJS...\n# (be aware that currently the webapp generator does not include RequireJS and the following command only applies to generators that do)\ngrunt bower\n&gt; Injects your Bower dependencies into your RequireJS configuration.\n\n# If you&#39;re not using RequireJS...\ngrunt bowerInstall\n&gt; Injects your dependencies into your index.html file.\n</code></pre>"},{"title":"发现 Inoic","date":"2014-06-11T03:06:59.000Z","description":"接触 Inoic","_content":"\n\n#基于Html5的hybird mobile apps开发——Ionic\n---\n拜读文章：[《为什么选择用AngularJs开发？》](http://www.cnblogs.com/angularjs/p/3759199.html)\n\n#Ionic\n官网[点我](http://ionicframework.com/getting-started/)\n>Build mobile apps faster with the web technologies you know and love.\n\n\n\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/0611-Ionic.md","raw":"title: 发现 Inoic\ndate: 2014-06-11 11:06:59\ncategories: Angular\ndescription: 接触 Inoic \n---\n\n\n#基于Html5的hybird mobile apps开发——Ionic\n---\n拜读文章：[《为什么选择用AngularJs开发？》](http://www.cnblogs.com/angularjs/p/3759199.html)\n\n#Ionic\n官网[点我](http://ionicframework.com/getting-started/)\n>Build mobile apps faster with the web technologies you know and love.\n\n\n\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","slug":"0611-Ionic","published":1,"updated":"2015-02-13T06:11:56.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgl0006ok1vzz6no4df","content":"<h2 id=\"基于Html5的hybird-mobile-apps开发——Ionic\"><a href=\"#基于Html5的hybird-mobile-apps开发——Ionic\" class=\"headerlink\" title=\"#基于Html5的hybird mobile apps开发——Ionic\"></a>#基于Html5的hybird mobile apps开发——Ionic</h2><p>拜读文章：<a href=\"http://www.cnblogs.com/angularjs/p/3759199.html\" target=\"_blank\" rel=\"external\">《为什么选择用AngularJs开发？》</a></p>\n<p>#Ionic<br>官网<a href=\"http://ionicframework.com/getting-started/\" target=\"_blank\" rel=\"external\">点我</a></p>\n<blockquote>\n<p>Build mobile apps faster with the web technologies you know and love.</p>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"基于Html5的hybird-mobile-apps开发——Ionic\"><a href=\"#基于Html5的hybird-mobile-apps开发——Ionic\" class=\"headerlink\" title=\"#基于Html5的hybird mobile apps开发——Ionic\"></a>#基于Html5的hybird mobile apps开发——Ionic</h2><p>拜读文章：<a href=\"http://www.cnblogs.com/angularjs/p/3759199.html\">《为什么选择用AngularJs开发？》</a></p>\n<p>#Ionic<br>官网<a href=\"http://ionicframework.com/getting-started/\">点我</a></p>\n<blockquote>\n<p>Build mobile apps faster with the web technologies you know and love.</p>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"音乐乐理笔记","date":"2015-02-14T09:02:21.000Z","description":"简单的音乐乐理的概念，包括音名和唱名、调和调式的介绍","_content":"\n@(音乐)[guitar,乐理]>\n\n# 我的吉他乐理笔记\n\n之前，有借到同事的一本李重光写的《新编通俗基本乐理》，想要学习下乐理的调式和声这些东西，但是狼吞虎咽的看下来，许多概念有些混淆了。\n\n之后，又在[吉他社](http://www.jitashe.net/thread/21405/)发现了这个帖子，找到大神写的一些给我们菜鸟科普的乐理教程，于是整理整理，写点笔记。\n\n## 音名和唱名\n\n### 音名（字母名）\n\n>  **音名** = 基本音级的名称 + 变化音级的名称\n\n**音名在钢琴上和五线谱上，都是固定不变的。**\n\n**基本音级：**`C D E F G A B`\n  \n**变化音级：** 升音级 + 降音级 + 重升音级 + 重降音级\n- 升音级：`#C #D ...` \n- 降音级：`bC bD ...` \n- 重升音级：`*C *D ...` （升高一个全音）\n- 重降音级：`bbC bbD ...` （降低一个全音）\n\nPS: 变化音级的升号（#）降号（b）等写在音名的左上角。\n\n### 唱名\n\n` do re mi fa sol la si `\n\n**唱名在钢琴键盘和谱子上的叫法，不固定，视唱名法的不同而不同。**\n\n\n### 唱名法\n\n> 唱名法就是唱谱的方法，常用的有：固定唱名法和首调唱名法。\n\n**固定唱名法**\n\n所有的调都按C调的唱名唱，字母名和唱名是统一的。遇到升号唱高半音，遇到降号唱低半音，唱名固定。\n\n\n**首调唱名法**\n\n什么调的谱子就把什么音当做`Do`来唱。正如简谱中的 `1=C, 1=D, 1=bB` 一样。\n\n采用首调唱名法学习乐理，关键是搞清楚每个调的`do re mi fa sol la si` 的字母名是什么。\n\n首调唱名法的优点是：无论什么调，音程、和弦、调式音阶的唱名是一样的。也就是只要把C调的这些东西搞懂后，其他的调同理可得。\n\n## 调\n\n**调和调式是两个完全不同的概念。**\n\n> 对调的定义有个简单的解释：在首调唱名法中，do的音高的位置叫做调。（即 do = C 为C调，do = #F为#F调）\n\n\n## 调式\n\n> 由特定数量的音按照特定的音程关系组成的音的排列就是调式\n\n由C调来举例，C调中得音构成的调式都属于C调，即C调的常用调式有：C大调、a小调、C宫调、D商调、E角调、G徵调、A羽调。\n\n调式中的音的数量不是固定的，下面是一些常用的调式的音和音程关系。（-表示一个半音）\n\n调式中每个音都有自己特有的名称和号数，例如：在C大调和a小调中\n\n|   调式   | 唱名      |  级别     |   名称   |\n|:-------:| :-------: | :-------:| :------: |\n|C大调     | do       |   第 Ⅰ 级   |  主音     |\n|C大调     | re       |   第 Ⅱ 级   |  上主音    |\n|C大调     | mi       |   第 Ⅲ 级   |  中音     |\n|C大调     | fa       |   第 Ⅳ 级   |  下属音    |\n|C大调     | sol      |   第 Ⅴ 级   |  属音     |\n|C大调     | la       |   第 Ⅵ 级   |  下中音    |\n|C大调     | si       |   第 Ⅶ 级   |  导音     |\n\n**a小调：**\n\n|   调式   | 唱名      |  级别     |   名称   |\n|:-------:| :-------: | :-------:| :------: |\n|a小调     | la       |   第 Ⅰ 级   |  主音     |\n|a小调     | si       |   第 Ⅱ 级   |  上主音    |\n|a小调     | do       |   第 Ⅲ 级   |  中音     |\n|a小调     | re       |   第 Ⅳ 级   |  下属音    |\n|a小调     | mi      |   第 Ⅴ 级   |  属音     |\n|a小调     | fa       |   第 Ⅵ 级   |  下中音    |\n|a小调     | sol       |   第 Ⅶ 级   |  导音     |\n\n\n### \n\n\n","source":"_posts/0214-音乐乐理笔记.md","raw":"title: 音乐乐理笔记\ndate: 2015-02-14 17:02:21\ncategories: 音乐\ndescription: 简单的音乐乐理的概念，包括音名和唱名、调和调式的介绍\n---\n\n@(音乐)[guitar,乐理]>\n\n# 我的吉他乐理笔记\n\n之前，有借到同事的一本李重光写的《新编通俗基本乐理》，想要学习下乐理的调式和声这些东西，但是狼吞虎咽的看下来，许多概念有些混淆了。\n\n之后，又在[吉他社](http://www.jitashe.net/thread/21405/)发现了这个帖子，找到大神写的一些给我们菜鸟科普的乐理教程，于是整理整理，写点笔记。\n\n## 音名和唱名\n\n### 音名（字母名）\n\n>  **音名** = 基本音级的名称 + 变化音级的名称\n\n**音名在钢琴上和五线谱上，都是固定不变的。**\n\n**基本音级：**`C D E F G A B`\n  \n**变化音级：** 升音级 + 降音级 + 重升音级 + 重降音级\n- 升音级：`#C #D ...` \n- 降音级：`bC bD ...` \n- 重升音级：`*C *D ...` （升高一个全音）\n- 重降音级：`bbC bbD ...` （降低一个全音）\n\nPS: 变化音级的升号（#）降号（b）等写在音名的左上角。\n\n### 唱名\n\n` do re mi fa sol la si `\n\n**唱名在钢琴键盘和谱子上的叫法，不固定，视唱名法的不同而不同。**\n\n\n### 唱名法\n\n> 唱名法就是唱谱的方法，常用的有：固定唱名法和首调唱名法。\n\n**固定唱名法**\n\n所有的调都按C调的唱名唱，字母名和唱名是统一的。遇到升号唱高半音，遇到降号唱低半音，唱名固定。\n\n\n**首调唱名法**\n\n什么调的谱子就把什么音当做`Do`来唱。正如简谱中的 `1=C, 1=D, 1=bB` 一样。\n\n采用首调唱名法学习乐理，关键是搞清楚每个调的`do re mi fa sol la si` 的字母名是什么。\n\n首调唱名法的优点是：无论什么调，音程、和弦、调式音阶的唱名是一样的。也就是只要把C调的这些东西搞懂后，其他的调同理可得。\n\n## 调\n\n**调和调式是两个完全不同的概念。**\n\n> 对调的定义有个简单的解释：在首调唱名法中，do的音高的位置叫做调。（即 do = C 为C调，do = #F为#F调）\n\n\n## 调式\n\n> 由特定数量的音按照特定的音程关系组成的音的排列就是调式\n\n由C调来举例，C调中得音构成的调式都属于C调，即C调的常用调式有：C大调、a小调、C宫调、D商调、E角调、G徵调、A羽调。\n\n调式中的音的数量不是固定的，下面是一些常用的调式的音和音程关系。（-表示一个半音）\n\n调式中每个音都有自己特有的名称和号数，例如：在C大调和a小调中\n\n|   调式   | 唱名      |  级别     |   名称   |\n|:-------:| :-------: | :-------:| :------: |\n|C大调     | do       |   第 Ⅰ 级   |  主音     |\n|C大调     | re       |   第 Ⅱ 级   |  上主音    |\n|C大调     | mi       |   第 Ⅲ 级   |  中音     |\n|C大调     | fa       |   第 Ⅳ 级   |  下属音    |\n|C大调     | sol      |   第 Ⅴ 级   |  属音     |\n|C大调     | la       |   第 Ⅵ 级   |  下中音    |\n|C大调     | si       |   第 Ⅶ 级   |  导音     |\n\n**a小调：**\n\n|   调式   | 唱名      |  级别     |   名称   |\n|:-------:| :-------: | :-------:| :------: |\n|a小调     | la       |   第 Ⅰ 级   |  主音     |\n|a小调     | si       |   第 Ⅱ 级   |  上主音    |\n|a小调     | do       |   第 Ⅲ 级   |  中音     |\n|a小调     | re       |   第 Ⅳ 级   |  下属音    |\n|a小调     | mi      |   第 Ⅴ 级   |  属音     |\n|a小调     | fa       |   第 Ⅵ 级   |  下中音    |\n|a小调     | sol       |   第 Ⅶ 级   |  导音     |\n\n\n### \n\n\n","slug":"0214-音乐乐理笔记","published":1,"updated":"2015-02-13T09:05:35.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgm0007ok1vw48snxfg","content":"<p>@(音乐)[guitar,乐理]&gt;</p>\n<h1 id=\"我的吉他乐理笔记\"><a href=\"#我的吉他乐理笔记\" class=\"headerlink\" title=\"我的吉他乐理笔记\"></a>我的吉他乐理笔记</h1><p>之前，有借到同事的一本李重光写的《新编通俗基本乐理》，想要学习下乐理的调式和声这些东西，但是狼吞虎咽的看下来，许多概念有些混淆了。</p>\n<p>之后，又在<a href=\"http://www.jitashe.net/thread/21405/\" target=\"_blank\" rel=\"external\">吉他社</a>发现了这个帖子，找到大神写的一些给我们菜鸟科普的乐理教程，于是整理整理，写点笔记。</p>\n<h2 id=\"音名和唱名\"><a href=\"#音名和唱名\" class=\"headerlink\" title=\"音名和唱名\"></a>音名和唱名</h2><h3 id=\"音名（字母名）\"><a href=\"#音名（字母名）\" class=\"headerlink\" title=\"音名（字母名）\"></a>音名（字母名）</h3><blockquote>\n<p> <strong>音名</strong> = 基本音级的名称 + 变化音级的名称</p>\n</blockquote>\n<p><strong>音名在钢琴上和五线谱上，都是固定不变的。</strong></p>\n<p><strong>基本音级：</strong><code>C D E F G A B</code></p>\n<p><strong>变化音级：</strong> 升音级 + 降音级 + 重升音级 + 重降音级</p>\n<ul>\n<li>升音级：<code>#C #D ...</code> </li>\n<li>降音级：<code>bC bD ...</code> </li>\n<li>重升音级：<code>*C *D ...</code> （升高一个全音）</li>\n<li>重降音级：<code>bbC bbD ...</code> （降低一个全音）</li>\n</ul>\n<p>PS: 变化音级的升号（#）降号（b）等写在音名的左上角。</p>\n<h3 id=\"唱名\"><a href=\"#唱名\" class=\"headerlink\" title=\"唱名\"></a>唱名</h3><p><code>do re mi fa sol la si</code></p>\n<p><strong>唱名在钢琴键盘和谱子上的叫法，不固定，视唱名法的不同而不同。</strong></p>\n<h3 id=\"唱名法\"><a href=\"#唱名法\" class=\"headerlink\" title=\"唱名法\"></a>唱名法</h3><blockquote>\n<p>唱名法就是唱谱的方法，常用的有：固定唱名法和首调唱名法。</p>\n</blockquote>\n<p><strong>固定唱名法</strong></p>\n<p>所有的调都按C调的唱名唱，字母名和唱名是统一的。遇到升号唱高半音，遇到降号唱低半音，唱名固定。</p>\n<p><strong>首调唱名法</strong></p>\n<p>什么调的谱子就把什么音当做<code>Do</code>来唱。正如简谱中的 <code>1=C, 1=D, 1=bB</code> 一样。</p>\n<p>采用首调唱名法学习乐理，关键是搞清楚每个调的<code>do re mi fa sol la si</code> 的字母名是什么。</p>\n<p>首调唱名法的优点是：无论什么调，音程、和弦、调式音阶的唱名是一样的。也就是只要把C调的这些东西搞懂后，其他的调同理可得。</p>\n<h2 id=\"调\"><a href=\"#调\" class=\"headerlink\" title=\"调\"></a>调</h2><p><strong>调和调式是两个完全不同的概念。</strong></p>\n<blockquote>\n<p>对调的定义有个简单的解释：在首调唱名法中，do的音高的位置叫做调。（即 do = C 为C调，do = #F为#F调）</p>\n</blockquote>\n<h2 id=\"调式\"><a href=\"#调式\" class=\"headerlink\" title=\"调式\"></a>调式</h2><blockquote>\n<p>由特定数量的音按照特定的音程关系组成的音的排列就是调式</p>\n</blockquote>\n<p>由C调来举例，C调中得音构成的调式都属于C调，即C调的常用调式有：C大调、a小调、C宫调、D商调、E角调、G徵调、A羽调。</p>\n<p>调式中的音的数量不是固定的，下面是一些常用的调式的音和音程关系。（-表示一个半音）</p>\n<p>调式中每个音都有自己特有的名称和号数，例如：在C大调和a小调中</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">调式</th>\n<th style=\"text-align:center\">唱名</th>\n<th style=\"text-align:center\">级别</th>\n<th style=\"text-align:center\">名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">do</td>\n<td style=\"text-align:center\">第 Ⅰ 级</td>\n<td style=\"text-align:center\">主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">re</td>\n<td style=\"text-align:center\">第 Ⅱ 级</td>\n<td style=\"text-align:center\">上主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">mi</td>\n<td style=\"text-align:center\">第 Ⅲ 级</td>\n<td style=\"text-align:center\">中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">fa</td>\n<td style=\"text-align:center\">第 Ⅳ 级</td>\n<td style=\"text-align:center\">下属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">sol</td>\n<td style=\"text-align:center\">第 Ⅴ 级</td>\n<td style=\"text-align:center\">属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">la</td>\n<td style=\"text-align:center\">第 Ⅵ 级</td>\n<td style=\"text-align:center\">下中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">si</td>\n<td style=\"text-align:center\">第 Ⅶ 级</td>\n<td style=\"text-align:center\">导音</td>\n</tr>\n</tbody>\n</table>\n<p><strong>a小调：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">调式</th>\n<th style=\"text-align:center\">唱名</th>\n<th style=\"text-align:center\">级别</th>\n<th style=\"text-align:center\">名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">la</td>\n<td style=\"text-align:center\">第 Ⅰ 级</td>\n<td style=\"text-align:center\">主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">si</td>\n<td style=\"text-align:center\">第 Ⅱ 级</td>\n<td style=\"text-align:center\">上主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">do</td>\n<td style=\"text-align:center\">第 Ⅲ 级</td>\n<td style=\"text-align:center\">中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">re</td>\n<td style=\"text-align:center\">第 Ⅳ 级</td>\n<td style=\"text-align:center\">下属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">mi</td>\n<td style=\"text-align:center\">第 Ⅴ 级</td>\n<td style=\"text-align:center\">属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">fa</td>\n<td style=\"text-align:center\">第 Ⅵ 级</td>\n<td style=\"text-align:center\">下中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">sol</td>\n<td style=\"text-align:center\">第 Ⅶ 级</td>\n<td style=\"text-align:center\">导音</td>\n</tr>\n</tbody>\n</table>\n<p>### </p>\n","excerpt":"","more":"<p>@(音乐)[guitar,乐理]&gt;</p>\n<h1 id=\"我的吉他乐理笔记\"><a href=\"#我的吉他乐理笔记\" class=\"headerlink\" title=\"我的吉他乐理笔记\"></a>我的吉他乐理笔记</h1><p>之前，有借到同事的一本李重光写的《新编通俗基本乐理》，想要学习下乐理的调式和声这些东西，但是狼吞虎咽的看下来，许多概念有些混淆了。</p>\n<p>之后，又在<a href=\"http://www.jitashe.net/thread/21405/\">吉他社</a>发现了这个帖子，找到大神写的一些给我们菜鸟科普的乐理教程，于是整理整理，写点笔记。</p>\n<h2 id=\"音名和唱名\"><a href=\"#音名和唱名\" class=\"headerlink\" title=\"音名和唱名\"></a>音名和唱名</h2><h3 id=\"音名（字母名）\"><a href=\"#音名（字母名）\" class=\"headerlink\" title=\"音名（字母名）\"></a>音名（字母名）</h3><blockquote>\n<p> <strong>音名</strong> = 基本音级的名称 + 变化音级的名称</p>\n</blockquote>\n<p><strong>音名在钢琴上和五线谱上，都是固定不变的。</strong></p>\n<p><strong>基本音级：</strong><code>C D E F G A B</code></p>\n<p><strong>变化音级：</strong> 升音级 + 降音级 + 重升音级 + 重降音级</p>\n<ul>\n<li>升音级：<code>#C #D ...</code> </li>\n<li>降音级：<code>bC bD ...</code> </li>\n<li>重升音级：<code>*C *D ...</code> （升高一个全音）</li>\n<li>重降音级：<code>bbC bbD ...</code> （降低一个全音）</li>\n</ul>\n<p>PS: 变化音级的升号（#）降号（b）等写在音名的左上角。</p>\n<h3 id=\"唱名\"><a href=\"#唱名\" class=\"headerlink\" title=\"唱名\"></a>唱名</h3><p><code>do re mi fa sol la si</code></p>\n<p><strong>唱名在钢琴键盘和谱子上的叫法，不固定，视唱名法的不同而不同。</strong></p>\n<h3 id=\"唱名法\"><a href=\"#唱名法\" class=\"headerlink\" title=\"唱名法\"></a>唱名法</h3><blockquote>\n<p>唱名法就是唱谱的方法，常用的有：固定唱名法和首调唱名法。</p>\n</blockquote>\n<p><strong>固定唱名法</strong></p>\n<p>所有的调都按C调的唱名唱，字母名和唱名是统一的。遇到升号唱高半音，遇到降号唱低半音，唱名固定。</p>\n<p><strong>首调唱名法</strong></p>\n<p>什么调的谱子就把什么音当做<code>Do</code>来唱。正如简谱中的 <code>1=C, 1=D, 1=bB</code> 一样。</p>\n<p>采用首调唱名法学习乐理，关键是搞清楚每个调的<code>do re mi fa sol la si</code> 的字母名是什么。</p>\n<p>首调唱名法的优点是：无论什么调，音程、和弦、调式音阶的唱名是一样的。也就是只要把C调的这些东西搞懂后，其他的调同理可得。</p>\n<h2 id=\"调\"><a href=\"#调\" class=\"headerlink\" title=\"调\"></a>调</h2><p><strong>调和调式是两个完全不同的概念。</strong></p>\n<blockquote>\n<p>对调的定义有个简单的解释：在首调唱名法中，do的音高的位置叫做调。（即 do = C 为C调，do = #F为#F调）</p>\n</blockquote>\n<h2 id=\"调式\"><a href=\"#调式\" class=\"headerlink\" title=\"调式\"></a>调式</h2><blockquote>\n<p>由特定数量的音按照特定的音程关系组成的音的排列就是调式</p>\n</blockquote>\n<p>由C调来举例，C调中得音构成的调式都属于C调，即C调的常用调式有：C大调、a小调、C宫调、D商调、E角调、G徵调、A羽调。</p>\n<p>调式中的音的数量不是固定的，下面是一些常用的调式的音和音程关系。（-表示一个半音）</p>\n<p>调式中每个音都有自己特有的名称和号数，例如：在C大调和a小调中</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">调式</th>\n<th style=\"text-align:center\">唱名</th>\n<th style=\"text-align:center\">级别</th>\n<th style=\"text-align:center\">名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">do</td>\n<td style=\"text-align:center\">第 Ⅰ 级</td>\n<td style=\"text-align:center\">主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">re</td>\n<td style=\"text-align:center\">第 Ⅱ 级</td>\n<td style=\"text-align:center\">上主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">mi</td>\n<td style=\"text-align:center\">第 Ⅲ 级</td>\n<td style=\"text-align:center\">中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">fa</td>\n<td style=\"text-align:center\">第 Ⅳ 级</td>\n<td style=\"text-align:center\">下属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">sol</td>\n<td style=\"text-align:center\">第 Ⅴ 级</td>\n<td style=\"text-align:center\">属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">la</td>\n<td style=\"text-align:center\">第 Ⅵ 级</td>\n<td style=\"text-align:center\">下中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C大调</td>\n<td style=\"text-align:center\">si</td>\n<td style=\"text-align:center\">第 Ⅶ 级</td>\n<td style=\"text-align:center\">导音</td>\n</tr>\n</tbody>\n</table>\n<p><strong>a小调：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">调式</th>\n<th style=\"text-align:center\">唱名</th>\n<th style=\"text-align:center\">级别</th>\n<th style=\"text-align:center\">名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">la</td>\n<td style=\"text-align:center\">第 Ⅰ 级</td>\n<td style=\"text-align:center\">主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">si</td>\n<td style=\"text-align:center\">第 Ⅱ 级</td>\n<td style=\"text-align:center\">上主音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">do</td>\n<td style=\"text-align:center\">第 Ⅲ 级</td>\n<td style=\"text-align:center\">中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">re</td>\n<td style=\"text-align:center\">第 Ⅳ 级</td>\n<td style=\"text-align:center\">下属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">mi</td>\n<td style=\"text-align:center\">第 Ⅴ 级</td>\n<td style=\"text-align:center\">属音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">fa</td>\n<td style=\"text-align:center\">第 Ⅵ 级</td>\n<td style=\"text-align:center\">下中音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a小调</td>\n<td style=\"text-align:center\">sol</td>\n<td style=\"text-align:center\">第 Ⅶ 级</td>\n<td style=\"text-align:center\">导音</td>\n</tr>\n</tbody>\n</table>\n<p>### </p>\n"},{"title":"phonegap 安装","date":"2014-06-18T03:06:59.000Z","description":"尝试安装 phonegap 来开发，结果没有结果。。。","_content":"\n\n#尝试安装下phonegap\n[ant Download]: http://ant.apache.org/bindownload.cgi\n[ant install]: http://blog.sina.com.cn/s/blog_62ef85c201016e2n.html\n\n预先安装Java、Apache ant\n安装下Java环境，成功之后在命令行可以看到java版本信息\n```\n> java -version\n\n```\n安装[Apache ant][ant Download]，下载zip包后解压、安装，之后记得在PATH中加入ant的安装路径，成功的测试命令，安装的[参考教程][ant install]\n```\n> ant -version\n```\n\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/0618-phonegap.md","raw":"title: phonegap 安装\ndate: 2014-06-18 11:06:59\ncategories: phonegap\ndescription: 尝试安装 phonegap 来开发，结果没有结果。。。\n---\n\n\n#尝试安装下phonegap\n[ant Download]: http://ant.apache.org/bindownload.cgi\n[ant install]: http://blog.sina.com.cn/s/blog_62ef85c201016e2n.html\n\n预先安装Java、Apache ant\n安装下Java环境，成功之后在命令行可以看到java版本信息\n```\n> java -version\n\n```\n安装[Apache ant][ant Download]，下载zip包后解压、安装，之后记得在PATH中加入ant的安装路径，成功的测试命令，安装的[参考教程][ant install]\n```\n> ant -version\n```\n\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","slug":"0618-phonegap","published":1,"updated":"2015-02-13T06:13:28.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgo0008ok1vaoum7q9b","content":"<p>#尝试安装下phonegap</p>\n<p>预先安装Java、Apache ant<br>安装下Java环境，成功之后在命令行可以看到java版本信息</p>\n<pre><code>&gt; java -version\n</code></pre><p>安装<a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"external\">Apache ant</a>，下载zip包后解压、安装，之后记得在PATH中加入ant的安装路径，成功的测试命令，安装的<a href=\"http://blog.sina.com.cn/s/blog_62ef85c201016e2n.html\" target=\"_blank\" rel=\"external\">参考教程</a></p>\n<pre><code>&gt; ant -version\n</code></pre><blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<p>#尝试安装下phonegap</p>\n<p>预先安装Java、Apache ant<br>安装下Java环境，成功之后在命令行可以看到java版本信息</p>\n<pre><code>&gt; java -version\n</code></pre><p>安装<a href=\"http://ant.apache.org/bindownload.cgi\">Apache ant</a>，下载zip包后解压、安装，之后记得在PATH中加入ant的安装路径，成功的测试命令，安装的<a href=\"http://blog.sina.com.cn/s/blog_62ef85c201016e2n.html\">参考教程</a></p>\n<pre><code>&gt; ant -version\n</code></pre><blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"Grunt 安装笔记","date":"2014-06-23T03:06:59.000Z","description":"Grunt 初学之 Grunt 项目的基本介绍","_content":"\n\n#grunt\n\n[start-en]:http://gruntjs.com/getting-started\n[start-zn]:http://www.gruntjs.net/docs/getting-started/\n[grunt-cmd-src]:https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt\n[devDepend-src]:https://www.npmjs.org/doc/json.html#devDependencies\n[package-doc]:https://www.npmjs.org/doc/json.html\n[grunt.initConfig]:http://www.gruntjs.net/api/grunt/#grunt.initconfig\n[grunt-contrib-uglify]:http://github.com/gruntjs/grunt-contrib-uglify\n>[官网英文教程:getting-started][start-en]\n[官网中文教程:快速入门][start-en]\n\n###安装 CLI\n---\n```\nnpm install -g grunt-cli\n```\n安装 `grunt-cli` 并不等于安装了Grunt！\n\n>Grunt CLI的任务很简单：调用与 `Gruntfile` 在同一目录中Grunt。这样带来的好处是，允许在同一机器同一系统上安装多个版本的Grunt。\n\n\n###CLI 是如何工作的\n---\n每次运行 `grunt` 时，他就利用node提供的 `require()` 系统查找本地安装的 Grunt。正是由于这一机制，你可以在项目的任意子目录中运行`grunt` 。\n\n如果找到一份本地安装的 Grunt，CLI就将其加载，并传递 `Gruntfile` 中的配置信息，然后执行你所指定的任务。\n\n_为了更好的理解 Grunt CLI的执行原理，请[参考源码][grunt-cmd-src]。其实代码很短！_\n\n###准备一份新的 Grunt 项目\n---\n一般需要在你的项目中添加两份文件：`package.json` 和 `Gruntfile`。\n\n**package.json**: 此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。你可以在此文件中列出项目依赖的grunt和Grunt插件，放置于[devDependencies][devDepend-src]配置段内。\n\n**Gruntfile**: 此文件被命名为 `Gruntfile.js` 或 `Gruntfile.coffee`，用来配置或定义任务（task）并加载Grunt插件的。\n\n###package.json\n---\n `package.json` 应当放置于项目的根目录中，与 `Gruntfile` 在同一目录中，并且应该与项目的源代码一起被提交。在上述目录(package.json所在目录)中运行 `npm install` 将依据 `package.json` 文件中所列出的每个依赖来自动安装适当版本的依赖。\n\n下面列出了几种为你的项目创建 `package.json` 文件的方式：\n\n- 大部分 grunt-init 模版都会自动创建特定于项目的package.json文件。\n\n- npm init命令会创建一个基本的package.json文件。\n\n- 复制下面的案例，并根据需要做扩充，参考此[说明][package-doc].\n\n```\n{\n  \"name\": \"my-project-name\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-jshint\": \"~0.6.0\",\n    \"grunt-contrib-nodeunit\": \"~0.2.0\",\n    \"grunt-contrib-uglify\": \"~0.2.2\"\n  }\n}\n```\n\n###安装Grunt 和 grunt插件\n---\n向已经存在的 `package.json` 文件中添加Grunt和grunt插件的最简单方式是通过`npm install <module> --save-dev` 命令。此命令不光安装了 `<module>` ，还会自动将其添加到devDependencies 配置段中，遵循tilde version range格式。\n\n例如，下面这条命令将安装Grunt最新版本到项目目录中，并将其添加到devDependencies内：\n```\nnpm install grunt --save-dev\n```\n同样，grunt插件和其它node模块都可以按相同的方式安装。安装完成后一定要记得将被修改的 `package.json` 文件提交到源码管理器中。\n\n###Gruntfile\n---\n `Gruntfile.js` 或 `Gruntfile.coffee` 文件是有效的 JavaScript 或 CoffeeScript 文件，应当放在你的项目根目录中，和 `package.json` 文件在同一目录层级，并和项目源码一起加入源码管理器。\n\nGruntfile由以下几部分构成：\n\n- \"wrapper\" 函数\n- 项目与任务配置\n- 加载grunt插件和任务\n- 自定义任务\n\n###Gruntfile文件案例\n---\n在下面列出的这个 `Gruntfile` 中，`package.json`文件中的项目元数据（metadata）被导入到 Grunt 配置中， `grunt-contrib-uglify` 插件中的`uglify` 任务（task）被配置为压缩（minify）源码文件并依据上述元数据动态生成一个文件头注释。当在命令行中执行 `grunt` 命令时，`uglify` 任务将被默认执行。\n```\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      options: {\n        banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\n      },\n      build: {\n        src: 'src/<%= pkg.name %>.js',\n        dest: 'build/<%= pkg.name %>.min.js'\n      }\n    }\n  });\n\n  // 加载包含 \"uglify\" 任务的插件。\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n\n  // 默认被执行的任务列表。\n  grunt.registerTask('default', ['uglify']);\n\n};\n```\n前面已经向你展示了整个 Gruntfile，接下来将详细解释其中的每一部分。\n\n###\"wrapper\" 函数\n---\n每一份 `Gruntfile` （和grunt插件）都遵循同样的格式，你所书写的Grunt代码必须放在此函数内：\n```\nmodule.exports = function(grunt) {\n  // Do grunt-related things in here\n};\n```\n###项目和任务配置\n---\n大部分的Grunt任务都依赖某些配置数据，这些数据被定义在一个object内，并传递给[grunt.initConfig][grunt.initConfig] 方法。\n\n在下面的案例中，`grunt.file.readJSON('package.json')`  将存储在 `package.json` 文件中的JSON元数据引入到grunt config中。 由于 `<% %>` 模板字符串可以引用任意的配置属性，因此可以通过这种方式来指定诸如**文件路径**和**文件列表类型**的配置数据，从而减少一些重复的工作。\n\n你可以在这个配置对象中(传递给initConfig()方法的对象)存储任意的数据，只要它不与你任务配置所需的属性冲突，否则会被忽略。此外，由于这本身就是JavaScript，你不仅限于使用JSON；你可以在这里使用任意的有效的JS代码。如果有必要，你甚至可以以编程的方式生成配置。\n\n与大多数task一样，[grunt-contrib-uglify][grunt-contrib-uglify] 插件中的uglify 任务要求它的配置被指定在一个同名属性中。在这里有一个例子, 我们指定了一个banner选项(用于在文件顶部生成一个注释)，紧接着是一个单一的名为build的uglify目标，用于将一个js文件压缩为一个目标文件。\n```\n// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  uglify: {\n    options: {\n      banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\n    },\n    build: {\n      src: 'src/<%= pkg.name %>.js',\n      dest: 'build/<%= pkg.name %>.min.js'\n    }\n  }\n});\n```\n###加载 Grunt 插件和任务\n---\n[concatenation]:https://github.com/gruntjs/grunt-contrib-concat\n[minification]:http://github.com/gruntjs/grunt-contrib-uglify\n[linting]:https://github.com/gruntjs/grunt-contrib-jshint\n[grunt插件]:https://github.com/gruntjs\n像 [concatenation]、[grunt-contrib-uglify] 和[linting]这些常用的任务（task）都已经以[grunt插件]的形式被开发出来了。只要在 `package.json` 文件中被列为dependency（依赖）的包，并通过 `npm install` 安装之后，都可以在 `Gruntfile` 中以简单命令的形式使用：\n```\n// 加载能够提供\"uglify\"任务的插件。\ngrunt.loadNpmTasks('grunt-contrib-uglify');\n```\n注意： `grunt --help` 命令将列出所有可用的任务。\n\n###自定义任务\n---\n[grunt.loadTasks]:http://www.gruntjs.net/api/grunt/#grunt.loadtasks\n通过定义 `default` 任务，可以让Grunt默认执行一个或多个任务。在下面的这个案例中，执行 `grunt` 命令时如果不指定一个任务的话，将会执行`uglify`任务。这和执行 `grunt uglify` 或者 `grunt default` 的效果一样。`default` 任务列表数组中可以指定任意数目的任务（可以带参数）。\n```\n// Default task(s).\ngrunt.registerTask('default', ['uglify']);\n```\n如果Grunt插件中的任务（task）不能满足你的项目需求，你还可以在Gruntfile中自定义任务（task）。例如，在下面的 Gruntfile 中自定义了一个default 任务，并且他甚至不依赖任务配置：\n```\nmodule.exports = function(grunt) {\n\n  // A very basic default task.\n  grunt.registerTask('default', 'Log some stuff.', function() {\n    grunt.log.write('Logging some stuff...').ok();\n  });\n\n};\n```\n特定于项目的任务不必在 Gruntfile 中定义。他们可以定义在外部.js 文件中，并通过[grunt.loadTasks] 方法加载。\n\n---\n\n以上是grunt中文网上的get-started教程的抄写版，下面是我自己的流程表\n\n1. 全局安装 `grunt-cli` ，即 `npm install -g grunt-cli`\n2. 在项目文档的根目录，写 `pacakage.json` ,里面包括项目名称，版本号，还有`devDependencies` 即一些grunt和grunt插件，还可以定义**文档的目录**等之后可能会用到的属性\n3. 根据package.json中写的的 `Dependencies` ,用 `npm install <grunt-plungin> --save-dev ` 安装 `grunt`及其他需要的插件。插件安装完后，还会根据安装的版本，依照这个tilde version range格式，更改 `package.json`里面的值\n4. 接下来写gruntfile.js文件，放在 `package.json`一起的根目录。里面是grunt插件的配置与使用，还可以自定义任务，具体看上面","source":"_posts/0623-grunt.md","raw":"title: Grunt 安装笔记\ndate: 2014-06-23 11:06:59\ncategories: Grunt\ndescription: Grunt 初学之 Grunt 项目的基本介绍\n---\n\n\n#grunt\n\n[start-en]:http://gruntjs.com/getting-started\n[start-zn]:http://www.gruntjs.net/docs/getting-started/\n[grunt-cmd-src]:https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt\n[devDepend-src]:https://www.npmjs.org/doc/json.html#devDependencies\n[package-doc]:https://www.npmjs.org/doc/json.html\n[grunt.initConfig]:http://www.gruntjs.net/api/grunt/#grunt.initconfig\n[grunt-contrib-uglify]:http://github.com/gruntjs/grunt-contrib-uglify\n>[官网英文教程:getting-started][start-en]\n[官网中文教程:快速入门][start-en]\n\n###安装 CLI\n---\n```\nnpm install -g grunt-cli\n```\n安装 `grunt-cli` 并不等于安装了Grunt！\n\n>Grunt CLI的任务很简单：调用与 `Gruntfile` 在同一目录中Grunt。这样带来的好处是，允许在同一机器同一系统上安装多个版本的Grunt。\n\n\n###CLI 是如何工作的\n---\n每次运行 `grunt` 时，他就利用node提供的 `require()` 系统查找本地安装的 Grunt。正是由于这一机制，你可以在项目的任意子目录中运行`grunt` 。\n\n如果找到一份本地安装的 Grunt，CLI就将其加载，并传递 `Gruntfile` 中的配置信息，然后执行你所指定的任务。\n\n_为了更好的理解 Grunt CLI的执行原理，请[参考源码][grunt-cmd-src]。其实代码很短！_\n\n###准备一份新的 Grunt 项目\n---\n一般需要在你的项目中添加两份文件：`package.json` 和 `Gruntfile`。\n\n**package.json**: 此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。你可以在此文件中列出项目依赖的grunt和Grunt插件，放置于[devDependencies][devDepend-src]配置段内。\n\n**Gruntfile**: 此文件被命名为 `Gruntfile.js` 或 `Gruntfile.coffee`，用来配置或定义任务（task）并加载Grunt插件的。\n\n###package.json\n---\n `package.json` 应当放置于项目的根目录中，与 `Gruntfile` 在同一目录中，并且应该与项目的源代码一起被提交。在上述目录(package.json所在目录)中运行 `npm install` 将依据 `package.json` 文件中所列出的每个依赖来自动安装适当版本的依赖。\n\n下面列出了几种为你的项目创建 `package.json` 文件的方式：\n\n- 大部分 grunt-init 模版都会自动创建特定于项目的package.json文件。\n\n- npm init命令会创建一个基本的package.json文件。\n\n- 复制下面的案例，并根据需要做扩充，参考此[说明][package-doc].\n\n```\n{\n  \"name\": \"my-project-name\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-jshint\": \"~0.6.0\",\n    \"grunt-contrib-nodeunit\": \"~0.2.0\",\n    \"grunt-contrib-uglify\": \"~0.2.2\"\n  }\n}\n```\n\n###安装Grunt 和 grunt插件\n---\n向已经存在的 `package.json` 文件中添加Grunt和grunt插件的最简单方式是通过`npm install <module> --save-dev` 命令。此命令不光安装了 `<module>` ，还会自动将其添加到devDependencies 配置段中，遵循tilde version range格式。\n\n例如，下面这条命令将安装Grunt最新版本到项目目录中，并将其添加到devDependencies内：\n```\nnpm install grunt --save-dev\n```\n同样，grunt插件和其它node模块都可以按相同的方式安装。安装完成后一定要记得将被修改的 `package.json` 文件提交到源码管理器中。\n\n###Gruntfile\n---\n `Gruntfile.js` 或 `Gruntfile.coffee` 文件是有效的 JavaScript 或 CoffeeScript 文件，应当放在你的项目根目录中，和 `package.json` 文件在同一目录层级，并和项目源码一起加入源码管理器。\n\nGruntfile由以下几部分构成：\n\n- \"wrapper\" 函数\n- 项目与任务配置\n- 加载grunt插件和任务\n- 自定义任务\n\n###Gruntfile文件案例\n---\n在下面列出的这个 `Gruntfile` 中，`package.json`文件中的项目元数据（metadata）被导入到 Grunt 配置中， `grunt-contrib-uglify` 插件中的`uglify` 任务（task）被配置为压缩（minify）源码文件并依据上述元数据动态生成一个文件头注释。当在命令行中执行 `grunt` 命令时，`uglify` 任务将被默认执行。\n```\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      options: {\n        banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\n      },\n      build: {\n        src: 'src/<%= pkg.name %>.js',\n        dest: 'build/<%= pkg.name %>.min.js'\n      }\n    }\n  });\n\n  // 加载包含 \"uglify\" 任务的插件。\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n\n  // 默认被执行的任务列表。\n  grunt.registerTask('default', ['uglify']);\n\n};\n```\n前面已经向你展示了整个 Gruntfile，接下来将详细解释其中的每一部分。\n\n###\"wrapper\" 函数\n---\n每一份 `Gruntfile` （和grunt插件）都遵循同样的格式，你所书写的Grunt代码必须放在此函数内：\n```\nmodule.exports = function(grunt) {\n  // Do grunt-related things in here\n};\n```\n###项目和任务配置\n---\n大部分的Grunt任务都依赖某些配置数据，这些数据被定义在一个object内，并传递给[grunt.initConfig][grunt.initConfig] 方法。\n\n在下面的案例中，`grunt.file.readJSON('package.json')`  将存储在 `package.json` 文件中的JSON元数据引入到grunt config中。 由于 `<% %>` 模板字符串可以引用任意的配置属性，因此可以通过这种方式来指定诸如**文件路径**和**文件列表类型**的配置数据，从而减少一些重复的工作。\n\n你可以在这个配置对象中(传递给initConfig()方法的对象)存储任意的数据，只要它不与你任务配置所需的属性冲突，否则会被忽略。此外，由于这本身就是JavaScript，你不仅限于使用JSON；你可以在这里使用任意的有效的JS代码。如果有必要，你甚至可以以编程的方式生成配置。\n\n与大多数task一样，[grunt-contrib-uglify][grunt-contrib-uglify] 插件中的uglify 任务要求它的配置被指定在一个同名属性中。在这里有一个例子, 我们指定了一个banner选项(用于在文件顶部生成一个注释)，紧接着是一个单一的名为build的uglify目标，用于将一个js文件压缩为一个目标文件。\n```\n// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  uglify: {\n    options: {\n      banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\n    },\n    build: {\n      src: 'src/<%= pkg.name %>.js',\n      dest: 'build/<%= pkg.name %>.min.js'\n    }\n  }\n});\n```\n###加载 Grunt 插件和任务\n---\n[concatenation]:https://github.com/gruntjs/grunt-contrib-concat\n[minification]:http://github.com/gruntjs/grunt-contrib-uglify\n[linting]:https://github.com/gruntjs/grunt-contrib-jshint\n[grunt插件]:https://github.com/gruntjs\n像 [concatenation]、[grunt-contrib-uglify] 和[linting]这些常用的任务（task）都已经以[grunt插件]的形式被开发出来了。只要在 `package.json` 文件中被列为dependency（依赖）的包，并通过 `npm install` 安装之后，都可以在 `Gruntfile` 中以简单命令的形式使用：\n```\n// 加载能够提供\"uglify\"任务的插件。\ngrunt.loadNpmTasks('grunt-contrib-uglify');\n```\n注意： `grunt --help` 命令将列出所有可用的任务。\n\n###自定义任务\n---\n[grunt.loadTasks]:http://www.gruntjs.net/api/grunt/#grunt.loadtasks\n通过定义 `default` 任务，可以让Grunt默认执行一个或多个任务。在下面的这个案例中，执行 `grunt` 命令时如果不指定一个任务的话，将会执行`uglify`任务。这和执行 `grunt uglify` 或者 `grunt default` 的效果一样。`default` 任务列表数组中可以指定任意数目的任务（可以带参数）。\n```\n// Default task(s).\ngrunt.registerTask('default', ['uglify']);\n```\n如果Grunt插件中的任务（task）不能满足你的项目需求，你还可以在Gruntfile中自定义任务（task）。例如，在下面的 Gruntfile 中自定义了一个default 任务，并且他甚至不依赖任务配置：\n```\nmodule.exports = function(grunt) {\n\n  // A very basic default task.\n  grunt.registerTask('default', 'Log some stuff.', function() {\n    grunt.log.write('Logging some stuff...').ok();\n  });\n\n};\n```\n特定于项目的任务不必在 Gruntfile 中定义。他们可以定义在外部.js 文件中，并通过[grunt.loadTasks] 方法加载。\n\n---\n\n以上是grunt中文网上的get-started教程的抄写版，下面是我自己的流程表\n\n1. 全局安装 `grunt-cli` ，即 `npm install -g grunt-cli`\n2. 在项目文档的根目录，写 `pacakage.json` ,里面包括项目名称，版本号，还有`devDependencies` 即一些grunt和grunt插件，还可以定义**文档的目录**等之后可能会用到的属性\n3. 根据package.json中写的的 `Dependencies` ,用 `npm install <grunt-plungin> --save-dev ` 安装 `grunt`及其他需要的插件。插件安装完后，还会根据安装的版本，依照这个tilde version range格式，更改 `package.json`里面的值\n4. 接下来写gruntfile.js文件，放在 `package.json`一起的根目录。里面是grunt插件的配置与使用，还可以自定义任务，具体看上面","slug":"0623-grunt","published":1,"updated":"2015-02-13T06:14:28.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgq000aok1v607iwmjp","content":"<p>#grunt</p>\n<blockquote>\n<p><a href=\"http://gruntjs.com/getting-started\" target=\"_blank\" rel=\"external\">官网英文教程:getting-started</a><br><a href=\"http://gruntjs.com/getting-started\" target=\"_blank\" rel=\"external\">官网中文教程:快速入门</a></p>\n</blockquote>\n<h2 id=\"安装-CLI\"><a href=\"#安装-CLI\" class=\"headerlink\" title=\"###安装 CLI\"></a>###安装 CLI</h2><pre><code>npm install -g grunt-cli\n</code></pre><p>安装 <code>grunt-cli</code> 并不等于安装了Grunt！</p>\n<blockquote>\n<p>Grunt CLI的任务很简单：调用与 <code>Gruntfile</code> 在同一目录中Grunt。这样带来的好处是，允许在同一机器同一系统上安装多个版本的Grunt。</p>\n</blockquote>\n<h2 id=\"CLI-是如何工作的\"><a href=\"#CLI-是如何工作的\" class=\"headerlink\" title=\"###CLI 是如何工作的\"></a>###CLI 是如何工作的</h2><p>每次运行 <code>grunt</code> 时，他就利用node提供的 <code>require()</code> 系统查找本地安装的 Grunt。正是由于这一机制，你可以在项目的任意子目录中运行<code>grunt</code> 。</p>\n<p>如果找到一份本地安装的 Grunt，CLI就将其加载，并传递 <code>Gruntfile</code> 中的配置信息，然后执行你所指定的任务。</p>\n<p><em>为了更好的理解 Grunt CLI的执行原理，请<a href=\"https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt\" target=\"_blank\" rel=\"external\">参考源码</a>。其实代码很短！</em></p>\n<h2 id=\"准备一份新的-Grunt-项目\"><a href=\"#准备一份新的-Grunt-项目\" class=\"headerlink\" title=\"###准备一份新的 Grunt 项目\"></a>###准备一份新的 Grunt 项目</h2><p>一般需要在你的项目中添加两份文件：<code>package.json</code> 和 <code>Gruntfile</code>。</p>\n<p><strong>package.json</strong>: 此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。你可以在此文件中列出项目依赖的grunt和Grunt插件，放置于<a href=\"https://www.npmjs.org/doc/json.html#devDependencies\" target=\"_blank\" rel=\"external\">devDependencies</a>配置段内。</p>\n<p><strong>Gruntfile</strong>: 此文件被命名为 <code>Gruntfile.js</code> 或 <code>Gruntfile.coffee</code>，用来配置或定义任务（task）并加载Grunt插件的。</p>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"###package.json\"></a>###package.json</h2><p> <code>package.json</code> 应当放置于项目的根目录中，与 <code>Gruntfile</code> 在同一目录中，并且应该与项目的源代码一起被提交。在上述目录(package.json所在目录)中运行 <code>npm install</code> 将依据 <code>package.json</code> 文件中所列出的每个依赖来自动安装适当版本的依赖。</p>\n<p>下面列出了几种为你的项目创建 <code>package.json</code> 文件的方式：</p>\n<ul>\n<li><p>大部分 grunt-init 模版都会自动创建特定于项目的package.json文件。</p>\n</li>\n<li><p>npm init命令会创建一个基本的package.json文件。</p>\n</li>\n<li><p>复制下面的案例，并根据需要做扩充，参考此<a href=\"https://www.npmjs.org/doc/json.html\" target=\"_blank\" rel=\"external\">说明</a>.</p>\n</li>\n</ul>\n<pre><code>{\n  &quot;name&quot;: &quot;my-project-name&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;grunt&quot;: &quot;~0.4.1&quot;,\n    &quot;grunt-contrib-jshint&quot;: &quot;~0.6.0&quot;,\n    &quot;grunt-contrib-nodeunit&quot;: &quot;~0.2.0&quot;,\n    &quot;grunt-contrib-uglify&quot;: &quot;~0.2.2&quot;\n  }\n}\n</code></pre><h2 id=\"安装Grunt-和-grunt插件\"><a href=\"#安装Grunt-和-grunt插件\" class=\"headerlink\" title=\"###安装Grunt 和 grunt插件\"></a>###安装Grunt 和 grunt插件</h2><p>向已经存在的 <code>package.json</code> 文件中添加Grunt和grunt插件的最简单方式是通过<code>npm install &lt;module&gt; --save-dev</code> 命令。此命令不光安装了 <code>&lt;module&gt;</code> ，还会自动将其添加到devDependencies 配置段中，遵循tilde version range格式。</p>\n<p>例如，下面这条命令将安装Grunt最新版本到项目目录中，并将其添加到devDependencies内：</p>\n<pre><code>npm install grunt --save-dev\n</code></pre><p>同样，grunt插件和其它node模块都可以按相同的方式安装。安装完成后一定要记得将被修改的 <code>package.json</code> 文件提交到源码管理器中。</p>\n<h2 id=\"Gruntfile\"><a href=\"#Gruntfile\" class=\"headerlink\" title=\"###Gruntfile\"></a>###Gruntfile</h2><p> <code>Gruntfile.js</code> 或 <code>Gruntfile.coffee</code> 文件是有效的 JavaScript 或 CoffeeScript 文件，应当放在你的项目根目录中，和 <code>package.json</code> 文件在同一目录层级，并和项目源码一起加入源码管理器。</p>\n<p>Gruntfile由以下几部分构成：</p>\n<ul>\n<li>“wrapper” 函数</li>\n<li>项目与任务配置</li>\n<li>加载grunt插件和任务</li>\n<li>自定义任务</li>\n</ul>\n<h2 id=\"Gruntfile文件案例\"><a href=\"#Gruntfile文件案例\" class=\"headerlink\" title=\"###Gruntfile文件案例\"></a>###Gruntfile文件案例</h2><p>在下面列出的这个 <code>Gruntfile</code> 中，<code>package.json</code>文件中的项目元数据（metadata）被导入到 Grunt 配置中， <code>grunt-contrib-uglify</code> 插件中的<code>uglify</code> 任务（task）被配置为压缩（minify）源码文件并依据上述元数据动态生成一个文件头注释。当在命令行中执行 <code>grunt</code> 命令时，<code>uglify</code> 任务将被默认执行。</p>\n<pre><code>module.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON(&#39;package.json&#39;),\n    uglify: {\n      options: {\n        banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&#39;\n      },\n      build: {\n        src: &#39;src/&lt;%= pkg.name %&gt;.js&#39;,\n        dest: &#39;build/&lt;%= pkg.name %&gt;.min.js&#39;\n      }\n    }\n  });\n\n  // 加载包含 &quot;uglify&quot; 任务的插件。\n  grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\n\n  // 默认被执行的任务列表。\n  grunt.registerTask(&#39;default&#39;, [&#39;uglify&#39;]);\n\n};\n</code></pre><p>前面已经向你展示了整个 Gruntfile，接下来将详细解释其中的每一部分。</p>\n<h2 id=\"”wrapper”-函数\"><a href=\"#”wrapper”-函数\" class=\"headerlink\" title=\"###”wrapper” 函数\"></a>###”wrapper” 函数</h2><p>每一份 <code>Gruntfile</code> （和grunt插件）都遵循同样的格式，你所书写的Grunt代码必须放在此函数内：</p>\n<pre><code>module.exports = function(grunt) {\n  // Do grunt-related things in here\n};\n</code></pre><h2 id=\"项目和任务配置\"><a href=\"#项目和任务配置\" class=\"headerlink\" title=\"###项目和任务配置\"></a>###项目和任务配置</h2><p>大部分的Grunt任务都依赖某些配置数据，这些数据被定义在一个object内，并传递给<a href=\"http://www.gruntjs.net/api/grunt/#grunt.initconfig\" target=\"_blank\" rel=\"external\">grunt.initConfig</a> 方法。</p>\n<p>在下面的案例中，<code>grunt.file.readJSON(&#39;package.json&#39;)</code>  将存储在 <code>package.json</code> 文件中的JSON元数据引入到grunt config中。 由于 <code>&lt;% %&gt;</code> 模板字符串可以引用任意的配置属性，因此可以通过这种方式来指定诸如<strong>文件路径</strong>和<strong>文件列表类型</strong>的配置数据，从而减少一些重复的工作。</p>\n<p>你可以在这个配置对象中(传递给initConfig()方法的对象)存储任意的数据，只要它不与你任务配置所需的属性冲突，否则会被忽略。此外，由于这本身就是JavaScript，你不仅限于使用JSON；你可以在这里使用任意的有效的JS代码。如果有必要，你甚至可以以编程的方式生成配置。</p>\n<p>与大多数task一样，<a href=\"http://github.com/gruntjs/grunt-contrib-uglify\" target=\"_blank\" rel=\"external\">grunt-contrib-uglify</a> 插件中的uglify 任务要求它的配置被指定在一个同名属性中。在这里有一个例子, 我们指定了一个banner选项(用于在文件顶部生成一个注释)，紧接着是一个单一的名为build的uglify目标，用于将一个js文件压缩为一个目标文件。</p>\n<pre><code>// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON(&#39;package.json&#39;),\n  uglify: {\n    options: {\n      banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&#39;\n    },\n    build: {\n      src: &#39;src/&lt;%= pkg.name %&gt;.js&#39;,\n      dest: &#39;build/&lt;%= pkg.name %&gt;.min.js&#39;\n    }\n  }\n});\n</code></pre><h2 id=\"加载-Grunt-插件和任务\"><a href=\"#加载-Grunt-插件和任务\" class=\"headerlink\" title=\"###加载 Grunt 插件和任务\"></a>###加载 Grunt 插件和任务</h2><p>像 <a href=\"https://github.com/gruntjs/grunt-contrib-concat\" target=\"_blank\" rel=\"external\">concatenation</a>、<a href=\"http://github.com/gruntjs/grunt-contrib-uglify\" target=\"_blank\" rel=\"external\">grunt-contrib-uglify</a> 和<a href=\"https://github.com/gruntjs/grunt-contrib-jshint\" target=\"_blank\" rel=\"external\">linting</a>这些常用的任务（task）都已经以<a href=\"https://github.com/gruntjs\" target=\"_blank\" rel=\"external\">grunt插件</a>的形式被开发出来了。只要在 <code>package.json</code> 文件中被列为dependency（依赖）的包，并通过 <code>npm install</code> 安装之后，都可以在 <code>Gruntfile</code> 中以简单命令的形式使用：</p>\n<pre><code>// 加载能够提供&quot;uglify&quot;任务的插件。\ngrunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\n</code></pre><p>注意： <code>grunt --help</code> 命令将列出所有可用的任务。</p>\n<h2 id=\"自定义任务\"><a href=\"#自定义任务\" class=\"headerlink\" title=\"###自定义任务\"></a>###自定义任务</h2><p>通过定义 <code>default</code> 任务，可以让Grunt默认执行一个或多个任务。在下面的这个案例中，执行 <code>grunt</code> 命令时如果不指定一个任务的话，将会执行<code>uglify</code>任务。这和执行 <code>grunt uglify</code> 或者 <code>grunt default</code> 的效果一样。<code>default</code> 任务列表数组中可以指定任意数目的任务（可以带参数）。</p>\n<pre><code>// Default task(s).\ngrunt.registerTask(&#39;default&#39;, [&#39;uglify&#39;]);\n</code></pre><p>如果Grunt插件中的任务（task）不能满足你的项目需求，你还可以在Gruntfile中自定义任务（task）。例如，在下面的 Gruntfile 中自定义了一个default 任务，并且他甚至不依赖任务配置：</p>\n<pre><code>module.exports = function(grunt) {\n\n  // A very basic default task.\n  grunt.registerTask(&#39;default&#39;, &#39;Log some stuff.&#39;, function() {\n    grunt.log.write(&#39;Logging some stuff...&#39;).ok();\n  });\n\n};\n</code></pre><p>特定于项目的任务不必在 Gruntfile 中定义。他们可以定义在外部.js 文件中，并通过<a href=\"http://www.gruntjs.net/api/grunt/#grunt.loadtasks\" target=\"_blank\" rel=\"external\">grunt.loadTasks</a> 方法加载。</p>\n<hr>\n<p>以上是grunt中文网上的get-started教程的抄写版，下面是我自己的流程表</p>\n<ol>\n<li>全局安装 <code>grunt-cli</code> ，即 <code>npm install -g grunt-cli</code></li>\n<li>在项目文档的根目录，写 <code>pacakage.json</code> ,里面包括项目名称，版本号，还有<code>devDependencies</code> 即一些grunt和grunt插件，还可以定义<strong>文档的目录</strong>等之后可能会用到的属性</li>\n<li>根据package.json中写的的 <code>Dependencies</code> ,用 <code>npm install &lt;grunt-plungin&gt; --save-dev</code> 安装 <code>grunt</code>及其他需要的插件。插件安装完后，还会根据安装的版本，依照这个tilde version range格式，更改 <code>package.json</code>里面的值</li>\n<li>接下来写gruntfile.js文件，放在 <code>package.json</code>一起的根目录。里面是grunt插件的配置与使用，还可以自定义任务，具体看上面</li>\n</ol>\n","excerpt":"","more":"<p>#grunt</p>\n<blockquote>\n<p><a href=\"http://gruntjs.com/getting-started\">官网英文教程:getting-started</a><br><a href=\"http://gruntjs.com/getting-started\">官网中文教程:快速入门</a></p>\n</blockquote>\n<h2 id=\"安装-CLI\"><a href=\"#安装-CLI\" class=\"headerlink\" title=\"###安装 CLI\"></a>###安装 CLI</h2><pre><code>npm install -g grunt-cli\n</code></pre><p>安装 <code>grunt-cli</code> 并不等于安装了Grunt！</p>\n<blockquote>\n<p>Grunt CLI的任务很简单：调用与 <code>Gruntfile</code> 在同一目录中Grunt。这样带来的好处是，允许在同一机器同一系统上安装多个版本的Grunt。</p>\n</blockquote>\n<h2 id=\"CLI-是如何工作的\"><a href=\"#CLI-是如何工作的\" class=\"headerlink\" title=\"###CLI 是如何工作的\"></a>###CLI 是如何工作的</h2><p>每次运行 <code>grunt</code> 时，他就利用node提供的 <code>require()</code> 系统查找本地安装的 Grunt。正是由于这一机制，你可以在项目的任意子目录中运行<code>grunt</code> 。</p>\n<p>如果找到一份本地安装的 Grunt，CLI就将其加载，并传递 <code>Gruntfile</code> 中的配置信息，然后执行你所指定的任务。</p>\n<p><em>为了更好的理解 Grunt CLI的执行原理，请<a href=\"https://github.com/gruntjs/grunt-cli/blob/master/bin/grunt\">参考源码</a>。其实代码很短！</em></p>\n<h2 id=\"准备一份新的-Grunt-项目\"><a href=\"#准备一份新的-Grunt-项目\" class=\"headerlink\" title=\"###准备一份新的 Grunt 项目\"></a>###准备一份新的 Grunt 项目</h2><p>一般需要在你的项目中添加两份文件：<code>package.json</code> 和 <code>Gruntfile</code>。</p>\n<p><strong>package.json</strong>: 此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。你可以在此文件中列出项目依赖的grunt和Grunt插件，放置于<a href=\"https://www.npmjs.org/doc/json.html#devDependencies\">devDependencies</a>配置段内。</p>\n<p><strong>Gruntfile</strong>: 此文件被命名为 <code>Gruntfile.js</code> 或 <code>Gruntfile.coffee</code>，用来配置或定义任务（task）并加载Grunt插件的。</p>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"###package.json\"></a>###package.json</h2><p> <code>package.json</code> 应当放置于项目的根目录中，与 <code>Gruntfile</code> 在同一目录中，并且应该与项目的源代码一起被提交。在上述目录(package.json所在目录)中运行 <code>npm install</code> 将依据 <code>package.json</code> 文件中所列出的每个依赖来自动安装适当版本的依赖。</p>\n<p>下面列出了几种为你的项目创建 <code>package.json</code> 文件的方式：</p>\n<ul>\n<li><p>大部分 grunt-init 模版都会自动创建特定于项目的package.json文件。</p>\n</li>\n<li><p>npm init命令会创建一个基本的package.json文件。</p>\n</li>\n<li><p>复制下面的案例，并根据需要做扩充，参考此<a href=\"https://www.npmjs.org/doc/json.html\">说明</a>.</p>\n</li>\n</ul>\n<pre><code>{\n  &quot;name&quot;: &quot;my-project-name&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;grunt&quot;: &quot;~0.4.1&quot;,\n    &quot;grunt-contrib-jshint&quot;: &quot;~0.6.0&quot;,\n    &quot;grunt-contrib-nodeunit&quot;: &quot;~0.2.0&quot;,\n    &quot;grunt-contrib-uglify&quot;: &quot;~0.2.2&quot;\n  }\n}\n</code></pre><h2 id=\"安装Grunt-和-grunt插件\"><a href=\"#安装Grunt-和-grunt插件\" class=\"headerlink\" title=\"###安装Grunt 和 grunt插件\"></a>###安装Grunt 和 grunt插件</h2><p>向已经存在的 <code>package.json</code> 文件中添加Grunt和grunt插件的最简单方式是通过<code>npm install &lt;module&gt; --save-dev</code> 命令。此命令不光安装了 <code>&lt;module&gt;</code> ，还会自动将其添加到devDependencies 配置段中，遵循tilde version range格式。</p>\n<p>例如，下面这条命令将安装Grunt最新版本到项目目录中，并将其添加到devDependencies内：</p>\n<pre><code>npm install grunt --save-dev\n</code></pre><p>同样，grunt插件和其它node模块都可以按相同的方式安装。安装完成后一定要记得将被修改的 <code>package.json</code> 文件提交到源码管理器中。</p>\n<h2 id=\"Gruntfile\"><a href=\"#Gruntfile\" class=\"headerlink\" title=\"###Gruntfile\"></a>###Gruntfile</h2><p> <code>Gruntfile.js</code> 或 <code>Gruntfile.coffee</code> 文件是有效的 JavaScript 或 CoffeeScript 文件，应当放在你的项目根目录中，和 <code>package.json</code> 文件在同一目录层级，并和项目源码一起加入源码管理器。</p>\n<p>Gruntfile由以下几部分构成：</p>\n<ul>\n<li>“wrapper” 函数</li>\n<li>项目与任务配置</li>\n<li>加载grunt插件和任务</li>\n<li>自定义任务</li>\n</ul>\n<h2 id=\"Gruntfile文件案例\"><a href=\"#Gruntfile文件案例\" class=\"headerlink\" title=\"###Gruntfile文件案例\"></a>###Gruntfile文件案例</h2><p>在下面列出的这个 <code>Gruntfile</code> 中，<code>package.json</code>文件中的项目元数据（metadata）被导入到 Grunt 配置中， <code>grunt-contrib-uglify</code> 插件中的<code>uglify</code> 任务（task）被配置为压缩（minify）源码文件并依据上述元数据动态生成一个文件头注释。当在命令行中执行 <code>grunt</code> 命令时，<code>uglify</code> 任务将被默认执行。</p>\n<pre><code>module.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON(&#39;package.json&#39;),\n    uglify: {\n      options: {\n        banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&#39;\n      },\n      build: {\n        src: &#39;src/&lt;%= pkg.name %&gt;.js&#39;,\n        dest: &#39;build/&lt;%= pkg.name %&gt;.min.js&#39;\n      }\n    }\n  });\n\n  // 加载包含 &quot;uglify&quot; 任务的插件。\n  grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\n\n  // 默认被执行的任务列表。\n  grunt.registerTask(&#39;default&#39;, [&#39;uglify&#39;]);\n\n};\n</code></pre><p>前面已经向你展示了整个 Gruntfile，接下来将详细解释其中的每一部分。</p>\n<h2 id=\"”wrapper”-函数\"><a href=\"#”wrapper”-函数\" class=\"headerlink\" title=\"###”wrapper” 函数\"></a>###”wrapper” 函数</h2><p>每一份 <code>Gruntfile</code> （和grunt插件）都遵循同样的格式，你所书写的Grunt代码必须放在此函数内：</p>\n<pre><code>module.exports = function(grunt) {\n  // Do grunt-related things in here\n};\n</code></pre><h2 id=\"项目和任务配置\"><a href=\"#项目和任务配置\" class=\"headerlink\" title=\"###项目和任务配置\"></a>###项目和任务配置</h2><p>大部分的Grunt任务都依赖某些配置数据，这些数据被定义在一个object内，并传递给<a href=\"http://www.gruntjs.net/api/grunt/#grunt.initconfig\">grunt.initConfig</a> 方法。</p>\n<p>在下面的案例中，<code>grunt.file.readJSON(&#39;package.json&#39;)</code>  将存储在 <code>package.json</code> 文件中的JSON元数据引入到grunt config中。 由于 <code>&lt;% %&gt;</code> 模板字符串可以引用任意的配置属性，因此可以通过这种方式来指定诸如<strong>文件路径</strong>和<strong>文件列表类型</strong>的配置数据，从而减少一些重复的工作。</p>\n<p>你可以在这个配置对象中(传递给initConfig()方法的对象)存储任意的数据，只要它不与你任务配置所需的属性冲突，否则会被忽略。此外，由于这本身就是JavaScript，你不仅限于使用JSON；你可以在这里使用任意的有效的JS代码。如果有必要，你甚至可以以编程的方式生成配置。</p>\n<p>与大多数task一样，<a href=\"http://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a> 插件中的uglify 任务要求它的配置被指定在一个同名属性中。在这里有一个例子, 我们指定了一个banner选项(用于在文件顶部生成一个注释)，紧接着是一个单一的名为build的uglify目标，用于将一个js文件压缩为一个目标文件。</p>\n<pre><code>// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON(&#39;package.json&#39;),\n  uglify: {\n    options: {\n      banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&#39;\n    },\n    build: {\n      src: &#39;src/&lt;%= pkg.name %&gt;.js&#39;,\n      dest: &#39;build/&lt;%= pkg.name %&gt;.min.js&#39;\n    }\n  }\n});\n</code></pre><h2 id=\"加载-Grunt-插件和任务\"><a href=\"#加载-Grunt-插件和任务\" class=\"headerlink\" title=\"###加载 Grunt 插件和任务\"></a>###加载 Grunt 插件和任务</h2><p>像 <a href=\"https://github.com/gruntjs/grunt-contrib-concat\">concatenation</a>、<a href=\"http://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a> 和<a href=\"https://github.com/gruntjs/grunt-contrib-jshint\">linting</a>这些常用的任务（task）都已经以<a href=\"https://github.com/gruntjs\">grunt插件</a>的形式被开发出来了。只要在 <code>package.json</code> 文件中被列为dependency（依赖）的包，并通过 <code>npm install</code> 安装之后，都可以在 <code>Gruntfile</code> 中以简单命令的形式使用：</p>\n<pre><code>// 加载能够提供&quot;uglify&quot;任务的插件。\ngrunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);\n</code></pre><p>注意： <code>grunt --help</code> 命令将列出所有可用的任务。</p>\n<h2 id=\"自定义任务\"><a href=\"#自定义任务\" class=\"headerlink\" title=\"###自定义任务\"></a>###自定义任务</h2><p>通过定义 <code>default</code> 任务，可以让Grunt默认执行一个或多个任务。在下面的这个案例中，执行 <code>grunt</code> 命令时如果不指定一个任务的话，将会执行<code>uglify</code>任务。这和执行 <code>grunt uglify</code> 或者 <code>grunt default</code> 的效果一样。<code>default</code> 任务列表数组中可以指定任意数目的任务（可以带参数）。</p>\n<pre><code>// Default task(s).\ngrunt.registerTask(&#39;default&#39;, [&#39;uglify&#39;]);\n</code></pre><p>如果Grunt插件中的任务（task）不能满足你的项目需求，你还可以在Gruntfile中自定义任务（task）。例如，在下面的 Gruntfile 中自定义了一个default 任务，并且他甚至不依赖任务配置：</p>\n<pre><code>module.exports = function(grunt) {\n\n  // A very basic default task.\n  grunt.registerTask(&#39;default&#39;, &#39;Log some stuff.&#39;, function() {\n    grunt.log.write(&#39;Logging some stuff...&#39;).ok();\n  });\n\n};\n</code></pre><p>特定于项目的任务不必在 Gruntfile 中定义。他们可以定义在外部.js 文件中，并通过<a href=\"http://www.gruntjs.net/api/grunt/#grunt.loadtasks\">grunt.loadTasks</a> 方法加载。</p>\n<hr>\n<p>以上是grunt中文网上的get-started教程的抄写版，下面是我自己的流程表</p>\n<ol>\n<li>全局安装 <code>grunt-cli</code> ，即 <code>npm install -g grunt-cli</code></li>\n<li>在项目文档的根目录，写 <code>pacakage.json</code> ,里面包括项目名称，版本号，还有<code>devDependencies</code> 即一些grunt和grunt插件，还可以定义<strong>文档的目录</strong>等之后可能会用到的属性</li>\n<li>根据package.json中写的的 <code>Dependencies</code> ,用 <code>npm install &lt;grunt-plungin&gt; --save-dev</code> 安装 <code>grunt</code>及其他需要的插件。插件安装完后，还会根据安装的版本，依照这个tilde version range格式，更改 <code>package.json</code>里面的值</li>\n<li>接下来写gruntfile.js文件，放在 <code>package.json</code>一起的根目录。里面是grunt插件的配置与使用，还可以自定义任务，具体看上面</li>\n</ol>\n"},{"title":"Grunt 配置文件","date":"2014-06-23T03:06:59.000Z","description":"如何使用 Grunt 的配置文件 gruntfile 来管理前端项目开发","_content":"\n##Grunt配置\nGrunt的task配置都是在 `gruntfile` 中的 `grunt.initConfig` 方法中指定的。此配置主要是以任务名称命名的属性，也可以包含其他任意数据。一旦这些代表任意数据的属性与任务所需要的属性相冲突，就将被忽略。\n\n此外，由于这本身就是JavaScript，因此你不仅限于使用JSON；你可以在这里使用任何有效的JavaScript。必要的情况下，你甚至可以以编程的方式生成配置。\n\n```\ngrunt.initConfig({\n  concat: {\n    // 这里是concat任务的配置信息。\n  },\n  uglify: {\n    // 这里是uglify任务的配置信息\n  },\n  // 任意数据。\n  my_property: 'whatever',\n  my_src_files: ['foo/*.js', 'bar/*.js'],\n});\n```\n\n##文件\n[fs.Stats方法名]:http://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats\n[node-glob]:https://github.com/isaacs/node-glob\n[minimatch]:https://github.com/isaacs/minimatch\n由于大多的任务都是执行文件操作，Grunt有一个强大的抽象层用于声明任务应该操作哪些文件。这里有好几种定义**src-dest**(源文件-目标文件)文件映射的方式，均提供了不同程度的描述和控制操作方式。任何一种多任务（multi-task）都能理解下面的格式，所以你只需要选择满足你需求的格式就行。\n\n所有的文件格式都支持 `src` 和 `dest` 属性，此外\"Compact\"[简洁]和\"Files Array\"[文件数组]格式还支持以下一些额外的属性：\n\n* `filter` 它通过接受任意一个有效的[fs.Stats方法名]或者一个函数来匹配 `src` 文件路径并根据匹配结果返回true或者false。\n* `nonull` 如果被设置为 true，未匹配的模式也将执行。结合Grunt的`--verbore`标志, 这个选项可以帮助用来调试文件路径的问题。\n* `dot` 它允许模式模式匹配句点开头的文件名，即使模式并不明确文件名开头部分是否有句点。\n* `matchBase` 如果设置这个属性，缺少斜线的模式(意味着模式中不能使用斜线进行文件路径的匹配)将不会匹配包含在斜线中的文件名。 例如，a?b将匹配`/xyz/123/acb`但不匹配 `/xyz/acb/123` 。\n* `expand` 处理动态的`src-dest`文件映射，更多的信息请查看**动态构建文件对象**。\n其他的属性将作为匹配项传递给底层的库。 请查看[node-glob] 和[minimatch] 文档以获取更多信息。\n\n## 文件配置\n\n###**Files - 通配符**\n\n- `*` 匹配任何字符，除了 `/`\n- `?` 匹配任何字符，除了 `/`\n- `**` 匹配任何字符，包括 `/`，所以用在目录的路径里面\n- `{}` 逗号分割的“或”操作（逗号后面不要有空格）\n- `!` 排除某个匹配\n```\n//所有th开头的js文件\n{ src: 'foo/th*.js', dest: ... }\n\n//所有a或b开头的js文件\n{ src: 'foo/{a,b}*.js', dest: ... }\n//也可以分开写成这样\n{ src: ['foo/a*.js', 'foo/b*.js'], dest: ... }\n\n//所有的js文件\n{ src: 'foo/*.js', dest: ... }\n\n//所有的js文件,除了bar.js\n{ src: ['foo/*.js','!foo/bar.js'], dest: ... }\n\n```\n###Files - 简洁格式 - Compact Format\n每个target只能指定一对 `src-dest`\n```\ngrunt.initConfig({\n  jshint: {\n    foo: {\n      src: ['src/aa.js', 'src/aaa.js']\n    },\n  },\n  concat: {\n    bar: {\n      src: ['src/bb.js', 'src/bbb.js'],\n      dest: 'dest/b.js',\n    },\n  },\n});\n```\n\n###Files - 文件对象格式 - Files Object Format\n每个目标对应多个`src-dest`形式的文件映射，属性名就是目标文件，源文件就是它的值(源文件列表则使用数组格式声明)\n```\ngrunt.initConfig({\n  concat: {\n    foo: {\n      files: {\n        'dest/a.js': ['src/aa.js', 'src/aaa.js'],\n        'dest/a1.js': ['src/aa1.js', 'src/aaa1.js'],\n      },\n    },\n    bar: {\n      files: {\n        'dest/b.js': ['src/bb.js', 'src/bbb.js'],\n        'dest/b1.js': ['src/bb1.js', 'src/bbb1.js'],\n      },\n    },\n  },\n});\n```\n\n###Files - 文件数组格式 - Files Array Format\n支持每个目标对应多个`src-dest`文件映射，同时也允许每个映射拥有**额外**属性\n\n```\ngrunt.initConfig({\n   concat: {\n    foo: {\n      files: [\n        {src: ['src/aa.js', 'src/aaa.js'], dest: 'dest/a.js'},\n        {src: ['src/aa1.js', 'src/aaa1.js'], dest: 'dest/a1.js'},\n      ],\n    },\n    bar: {\n      files: [\n        {src: ['src/bb.js', 'src/bbb.js'], dest: 'dest/b/', nonull: true},\n        {src: ['src/bb1.js', 'src/bbb1.js'], dest: 'dest/b1/', filter: 'isFile'},\n      ],\n    },\n  },\n});\n```\n\n\n[gruntfileConfig]:http://www.gruntjs.net/docs/configuring-tasks/\n##下面还有好多栗子在[这里][gruntfileConfig]，不写了","source":"_posts/0623-gruntfile 配置.md","raw":"title: Grunt 配置文件\ndate: 2014-06-23 11:06:59\ncategories: Grunt\ndescription: 如何使用 Grunt 的配置文件 gruntfile 来管理前端项目开发\n---\n\n##Grunt配置\nGrunt的task配置都是在 `gruntfile` 中的 `grunt.initConfig` 方法中指定的。此配置主要是以任务名称命名的属性，也可以包含其他任意数据。一旦这些代表任意数据的属性与任务所需要的属性相冲突，就将被忽略。\n\n此外，由于这本身就是JavaScript，因此你不仅限于使用JSON；你可以在这里使用任何有效的JavaScript。必要的情况下，你甚至可以以编程的方式生成配置。\n\n```\ngrunt.initConfig({\n  concat: {\n    // 这里是concat任务的配置信息。\n  },\n  uglify: {\n    // 这里是uglify任务的配置信息\n  },\n  // 任意数据。\n  my_property: 'whatever',\n  my_src_files: ['foo/*.js', 'bar/*.js'],\n});\n```\n\n##文件\n[fs.Stats方法名]:http://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats\n[node-glob]:https://github.com/isaacs/node-glob\n[minimatch]:https://github.com/isaacs/minimatch\n由于大多的任务都是执行文件操作，Grunt有一个强大的抽象层用于声明任务应该操作哪些文件。这里有好几种定义**src-dest**(源文件-目标文件)文件映射的方式，均提供了不同程度的描述和控制操作方式。任何一种多任务（multi-task）都能理解下面的格式，所以你只需要选择满足你需求的格式就行。\n\n所有的文件格式都支持 `src` 和 `dest` 属性，此外\"Compact\"[简洁]和\"Files Array\"[文件数组]格式还支持以下一些额外的属性：\n\n* `filter` 它通过接受任意一个有效的[fs.Stats方法名]或者一个函数来匹配 `src` 文件路径并根据匹配结果返回true或者false。\n* `nonull` 如果被设置为 true，未匹配的模式也将执行。结合Grunt的`--verbore`标志, 这个选项可以帮助用来调试文件路径的问题。\n* `dot` 它允许模式模式匹配句点开头的文件名，即使模式并不明确文件名开头部分是否有句点。\n* `matchBase` 如果设置这个属性，缺少斜线的模式(意味着模式中不能使用斜线进行文件路径的匹配)将不会匹配包含在斜线中的文件名。 例如，a?b将匹配`/xyz/123/acb`但不匹配 `/xyz/acb/123` 。\n* `expand` 处理动态的`src-dest`文件映射，更多的信息请查看**动态构建文件对象**。\n其他的属性将作为匹配项传递给底层的库。 请查看[node-glob] 和[minimatch] 文档以获取更多信息。\n\n## 文件配置\n\n###**Files - 通配符**\n\n- `*` 匹配任何字符，除了 `/`\n- `?` 匹配任何字符，除了 `/`\n- `**` 匹配任何字符，包括 `/`，所以用在目录的路径里面\n- `{}` 逗号分割的“或”操作（逗号后面不要有空格）\n- `!` 排除某个匹配\n```\n//所有th开头的js文件\n{ src: 'foo/th*.js', dest: ... }\n\n//所有a或b开头的js文件\n{ src: 'foo/{a,b}*.js', dest: ... }\n//也可以分开写成这样\n{ src: ['foo/a*.js', 'foo/b*.js'], dest: ... }\n\n//所有的js文件\n{ src: 'foo/*.js', dest: ... }\n\n//所有的js文件,除了bar.js\n{ src: ['foo/*.js','!foo/bar.js'], dest: ... }\n\n```\n###Files - 简洁格式 - Compact Format\n每个target只能指定一对 `src-dest`\n```\ngrunt.initConfig({\n  jshint: {\n    foo: {\n      src: ['src/aa.js', 'src/aaa.js']\n    },\n  },\n  concat: {\n    bar: {\n      src: ['src/bb.js', 'src/bbb.js'],\n      dest: 'dest/b.js',\n    },\n  },\n});\n```\n\n###Files - 文件对象格式 - Files Object Format\n每个目标对应多个`src-dest`形式的文件映射，属性名就是目标文件，源文件就是它的值(源文件列表则使用数组格式声明)\n```\ngrunt.initConfig({\n  concat: {\n    foo: {\n      files: {\n        'dest/a.js': ['src/aa.js', 'src/aaa.js'],\n        'dest/a1.js': ['src/aa1.js', 'src/aaa1.js'],\n      },\n    },\n    bar: {\n      files: {\n        'dest/b.js': ['src/bb.js', 'src/bbb.js'],\n        'dest/b1.js': ['src/bb1.js', 'src/bbb1.js'],\n      },\n    },\n  },\n});\n```\n\n###Files - 文件数组格式 - Files Array Format\n支持每个目标对应多个`src-dest`文件映射，同时也允许每个映射拥有**额外**属性\n\n```\ngrunt.initConfig({\n   concat: {\n    foo: {\n      files: [\n        {src: ['src/aa.js', 'src/aaa.js'], dest: 'dest/a.js'},\n        {src: ['src/aa1.js', 'src/aaa1.js'], dest: 'dest/a1.js'},\n      ],\n    },\n    bar: {\n      files: [\n        {src: ['src/bb.js', 'src/bbb.js'], dest: 'dest/b/', nonull: true},\n        {src: ['src/bb1.js', 'src/bbb1.js'], dest: 'dest/b1/', filter: 'isFile'},\n      ],\n    },\n  },\n});\n```\n\n\n[gruntfileConfig]:http://www.gruntjs.net/docs/configuring-tasks/\n##下面还有好多栗子在[这里][gruntfileConfig]，不写了","slug":"0623-gruntfile 配置","published":1,"updated":"2015-02-13T06:16:10.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgs000cok1vfn5ppeki","content":"<p>##Grunt配置<br>Grunt的task配置都是在 <code>gruntfile</code> 中的 <code>grunt.initConfig</code> 方法中指定的。此配置主要是以任务名称命名的属性，也可以包含其他任意数据。一旦这些代表任意数据的属性与任务所需要的属性相冲突，就将被忽略。</p>\n<p>此外，由于这本身就是JavaScript，因此你不仅限于使用JSON；你可以在这里使用任何有效的JavaScript。必要的情况下，你甚至可以以编程的方式生成配置。</p>\n<pre><code>grunt.initConfig({\n  concat: {\n    // 这里是concat任务的配置信息。\n  },\n  uglify: {\n    // 这里是uglify任务的配置信息\n  },\n  // 任意数据。\n  my_property: &#39;whatever&#39;,\n  my_src_files: [&#39;foo/*.js&#39;, &#39;bar/*.js&#39;],\n});\n</code></pre><p>##文件</p>\n<p>由于大多的任务都是执行文件操作，Grunt有一个强大的抽象层用于声明任务应该操作哪些文件。这里有好几种定义<strong>src-dest</strong>(源文件-目标文件)文件映射的方式，均提供了不同程度的描述和控制操作方式。任何一种多任务（multi-task）都能理解下面的格式，所以你只需要选择满足你需求的格式就行。</p>\n<p>所有的文件格式都支持 <code>src</code> 和 <code>dest</code> 属性，此外”Compact”[简洁]和”Files Array”[文件数组]格式还支持以下一些额外的属性：</p>\n<ul>\n<li><code>filter</code> 它通过接受任意一个有效的<a href=\"http://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats\" target=\"_blank\" rel=\"external\">fs.Stats方法名</a>或者一个函数来匹配 <code>src</code> 文件路径并根据匹配结果返回true或者false。</li>\n<li><code>nonull</code> 如果被设置为 true，未匹配的模式也将执行。结合Grunt的<code>--verbore</code>标志, 这个选项可以帮助用来调试文件路径的问题。</li>\n<li><code>dot</code> 它允许模式模式匹配句点开头的文件名，即使模式并不明确文件名开头部分是否有句点。</li>\n<li><code>matchBase</code> 如果设置这个属性，缺少斜线的模式(意味着模式中不能使用斜线进行文件路径的匹配)将不会匹配包含在斜线中的文件名。 例如，a?b将匹配<code>/xyz/123/acb</code>但不匹配 <code>/xyz/acb/123</code> 。</li>\n<li><code>expand</code> 处理动态的<code>src-dest</code>文件映射，更多的信息请查看<strong>动态构建文件对象</strong>。<br>其他的属性将作为匹配项传递给底层的库。 请查看<a href=\"https://github.com/isaacs/node-glob\" target=\"_blank\" rel=\"external\">node-glob</a> 和<a href=\"https://github.com/isaacs/minimatch\" target=\"_blank\" rel=\"external\">minimatch</a> 文档以获取更多信息。</li>\n</ul>\n<h2 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h2><p>###<strong>Files - 通配符</strong></p>\n<ul>\n<li><code>*</code> 匹配任何字符，除了 <code>/</code></li>\n<li><code>?</code> 匹配任何字符，除了 <code>/</code></li>\n<li><code>**</code> 匹配任何字符，包括 <code>/</code>，所以用在目录的路径里面</li>\n<li><code>{}</code> 逗号分割的“或”操作（逗号后面不要有空格）</li>\n<li><code>!</code> 排除某个匹配<br>```<br>//所有th开头的js文件<br>{ src: ‘foo/th*.js’, dest: … }</li>\n</ul>\n<p>//所有a或b开头的js文件<br>{ src: ‘foo/{a,b}<em>.js’, dest: … }<br>//也可以分开写成这样<br>{ src: [‘foo/a</em>.js’, ‘foo/b*.js’], dest: … }</p>\n<p>//所有的js文件<br>{ src: ‘foo/*.js’, dest: … }</p>\n<p>//所有的js文件,除了bar.js<br>{ src: [‘foo/*.js’,’!foo/bar.js’], dest: … }</p>\n<pre><code>###Files - 简洁格式 - Compact Format\n每个target只能指定一对 `src-dest`\n</code></pre><p>grunt.initConfig({<br>  jshint: {<br>    foo: {<br>      src: [‘src/aa.js’, ‘src/aaa.js’]<br>    },<br>  },<br>  concat: {<br>    bar: {<br>      src: [‘src/bb.js’, ‘src/bbb.js’],<br>      dest: ‘dest/b.js’,<br>    },<br>  },<br>});</p>\n<pre><code>\n###Files - 文件对象格式 - Files Object Format\n每个目标对应多个`src-dest`形式的文件映射，属性名就是目标文件，源文件就是它的值(源文件列表则使用数组格式声明)\n</code></pre><p>grunt.initConfig({<br>  concat: {<br>    foo: {<br>      files: {<br>        ‘dest/a.js’: [‘src/aa.js’, ‘src/aaa.js’],<br>        ‘dest/a1.js’: [‘src/aa1.js’, ‘src/aaa1.js’],<br>      },<br>    },<br>    bar: {<br>      files: {<br>        ‘dest/b.js’: [‘src/bb.js’, ‘src/bbb.js’],<br>        ‘dest/b1.js’: [‘src/bb1.js’, ‘src/bbb1.js’],<br>      },<br>    },<br>  },<br>});</p>\n<pre><code>\n###Files - 文件数组格式 - Files Array Format\n支持每个目标对应多个`src-dest`文件映射，同时也允许每个映射拥有**额外**属性\n</code></pre><p>grunt.initConfig({<br>   concat: {<br>    foo: {<br>      files: [<br>        {src: [‘src/aa.js’, ‘src/aaa.js’], dest: ‘dest/a.js’},<br>        {src: [‘src/aa1.js’, ‘src/aaa1.js’], dest: ‘dest/a1.js’},<br>      ],<br>    },<br>    bar: {<br>      files: [<br>        {src: [‘src/bb.js’, ‘src/bbb.js’], dest: ‘dest/b/‘, nonull: true},<br>        {src: [‘src/bb1.js’, ‘src/bbb1.js’], dest: ‘dest/b1/‘, filter: ‘isFile’},<br>      ],<br>    },<br>  },<br>});<br>```</p>\n<p>##下面还有好多栗子在<a href=\"http://www.gruntjs.net/docs/configuring-tasks/\" target=\"_blank\" rel=\"external\">这里</a>，不写了</p>\n","excerpt":"","more":"<p>##Grunt配置<br>Grunt的task配置都是在 <code>gruntfile</code> 中的 <code>grunt.initConfig</code> 方法中指定的。此配置主要是以任务名称命名的属性，也可以包含其他任意数据。一旦这些代表任意数据的属性与任务所需要的属性相冲突，就将被忽略。</p>\n<p>此外，由于这本身就是JavaScript，因此你不仅限于使用JSON；你可以在这里使用任何有效的JavaScript。必要的情况下，你甚至可以以编程的方式生成配置。</p>\n<pre><code>grunt.initConfig({\n  concat: {\n    // 这里是concat任务的配置信息。\n  },\n  uglify: {\n    // 这里是uglify任务的配置信息\n  },\n  // 任意数据。\n  my_property: &#39;whatever&#39;,\n  my_src_files: [&#39;foo/*.js&#39;, &#39;bar/*.js&#39;],\n});\n</code></pre><p>##文件</p>\n<p>由于大多的任务都是执行文件操作，Grunt有一个强大的抽象层用于声明任务应该操作哪些文件。这里有好几种定义<strong>src-dest</strong>(源文件-目标文件)文件映射的方式，均提供了不同程度的描述和控制操作方式。任何一种多任务（multi-task）都能理解下面的格式，所以你只需要选择满足你需求的格式就行。</p>\n<p>所有的文件格式都支持 <code>src</code> 和 <code>dest</code> 属性，此外”Compact”[简洁]和”Files Array”[文件数组]格式还支持以下一些额外的属性：</p>\n<ul>\n<li><code>filter</code> 它通过接受任意一个有效的<a href=\"http://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats\">fs.Stats方法名</a>或者一个函数来匹配 <code>src</code> 文件路径并根据匹配结果返回true或者false。</li>\n<li><code>nonull</code> 如果被设置为 true，未匹配的模式也将执行。结合Grunt的<code>--verbore</code>标志, 这个选项可以帮助用来调试文件路径的问题。</li>\n<li><code>dot</code> 它允许模式模式匹配句点开头的文件名，即使模式并不明确文件名开头部分是否有句点。</li>\n<li><code>matchBase</code> 如果设置这个属性，缺少斜线的模式(意味着模式中不能使用斜线进行文件路径的匹配)将不会匹配包含在斜线中的文件名。 例如，a?b将匹配<code>/xyz/123/acb</code>但不匹配 <code>/xyz/acb/123</code> 。</li>\n<li><code>expand</code> 处理动态的<code>src-dest</code>文件映射，更多的信息请查看<strong>动态构建文件对象</strong>。<br>其他的属性将作为匹配项传递给底层的库。 请查看<a href=\"https://github.com/isaacs/node-glob\">node-glob</a> 和<a href=\"https://github.com/isaacs/minimatch\">minimatch</a> 文档以获取更多信息。</li>\n</ul>\n<h2 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h2><p>###<strong>Files - 通配符</strong></p>\n<ul>\n<li><code>*</code> 匹配任何字符，除了 <code>/</code></li>\n<li><code>?</code> 匹配任何字符，除了 <code>/</code></li>\n<li><code>**</code> 匹配任何字符，包括 <code>/</code>，所以用在目录的路径里面</li>\n<li><code>{}</code> 逗号分割的“或”操作（逗号后面不要有空格）</li>\n<li><code>!</code> 排除某个匹配<br>```<br>//所有th开头的js文件<br>{ src: ‘foo/th*.js’, dest: … }</li>\n</ul>\n<p>//所有a或b开头的js文件<br>{ src: ‘foo/{a,b}<em>.js’, dest: … }<br>//也可以分开写成这样<br>{ src: [‘foo/a</em>.js’, ‘foo/b*.js’], dest: … }</p>\n<p>//所有的js文件<br>{ src: ‘foo/*.js’, dest: … }</p>\n<p>//所有的js文件,除了bar.js<br>{ src: [‘foo/*.js’,’!foo/bar.js’], dest: … }</p>\n<pre><code>###Files - 简洁格式 - Compact Format\n每个target只能指定一对 `src-dest`\n</code></pre><p>grunt.initConfig({<br>  jshint: {<br>    foo: {<br>      src: [‘src/aa.js’, ‘src/aaa.js’]<br>    },<br>  },<br>  concat: {<br>    bar: {<br>      src: [‘src/bb.js’, ‘src/bbb.js’],<br>      dest: ‘dest/b.js’,<br>    },<br>  },<br>});</p>\n<pre><code>\n###Files - 文件对象格式 - Files Object Format\n每个目标对应多个`src-dest`形式的文件映射，属性名就是目标文件，源文件就是它的值(源文件列表则使用数组格式声明)\n</code></pre><p>grunt.initConfig({<br>  concat: {<br>    foo: {<br>      files: {<br>        ‘dest/a.js’: [‘src/aa.js’, ‘src/aaa.js’],<br>        ‘dest/a1.js’: [‘src/aa1.js’, ‘src/aaa1.js’],<br>      },<br>    },<br>    bar: {<br>      files: {<br>        ‘dest/b.js’: [‘src/bb.js’, ‘src/bbb.js’],<br>        ‘dest/b1.js’: [‘src/bb1.js’, ‘src/bbb1.js’],<br>      },<br>    },<br>  },<br>});</p>\n<pre><code>\n###Files - 文件数组格式 - Files Array Format\n支持每个目标对应多个`src-dest`文件映射，同时也允许每个映射拥有**额外**属性\n</code></pre><p>grunt.initConfig({<br>   concat: {<br>    foo: {<br>      files: [<br>        {src: [‘src/aa.js’, ‘src/aaa.js’], dest: ‘dest/a.js’},<br>        {src: [‘src/aa1.js’, ‘src/aaa1.js’], dest: ‘dest/a1.js’},<br>      ],<br>    },<br>    bar: {<br>      files: [<br>        {src: [‘src/bb.js’, ‘src/bbb.js’], dest: ‘dest/b/‘, nonull: true},<br>        {src: [‘src/bb1.js’, ‘src/bbb1.js’], dest: ‘dest/b1/‘, filter: ‘isFile’},<br>      ],<br>    },<br>  },<br>});<br>```</p>\n<p>##下面还有好多栗子在<a href=\"http://www.gruntjs.net/docs/configuring-tasks/\">这里</a>，不写了</p>\n"},{"title":"Qunit 单元测试学习笔记","date":"2014-06-24T03:06:59.000Z","description":"介绍用 QUnit 做简单的单元测试","_content":"\n>参考文章\n1. [如何用Qunit测试你的JavaScript代码][1]\n推荐网站\n1. http://testswarm.com/\n##简介\n\n>在计算机编程中，单元测试（又称为模块测试）是针对程序模块(软件设计的最小单位)来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。\n\n来自wiki，大概。。。简单地说，你为你的代码的每个功能写测试，如果所有这些测试都通过了，那么你可以肯定的是，代码没有缺陷（通常，还是由你的测试有多彻底而定）。\n\n##为什么你要测试你的代码\n\n1. 首先，点击测试法很烦。点击事实上并不是一件轻松的工作，因为你不得不确保每样东西都被点到而且很有可能你错过了一个或两个。\n\n2. 其次，你为测试做的每件事情是不能复用的，这意味着它很难回归。原来的代码测试并发布之后，修改了新的需求，接下来发现旧的问题又出现了，叫做“回归”。\n\n3. 它使跨浏览器兼容性测试很容易。仅仅在不同浏览器中运行你的测试案例就行，如果一个浏览器出现问题，你修复它并重新运行这些测试案例，确保不会在别的浏览器引起回归，一旦全部通过测试，你可以肯定的说，所有的目标浏览器都支持。\n\n##如何用QUnit写单元测试\n\n在要测试的项目里面添加一个测试的test.js和Qunit.js和Qunit.css。\n嗯，我来试一试！！我的测试代码如下\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>test html</title>\n\t<link rel=\"stylesheet\" href=\"http://code.jquery.com/qunit/qunit-1.14.0.css\">\n\t<script type=\"text/javascript\" src=\"http://code.jquery.com/qunit/qunit-1.14.0.js\"></script>\n\t<script >\n\t\t// Let's test this function\n\t\tfunction isEven(val) {\n\t\t\treturn val % 2 === 0;\n\t\t}\n\t\tfunction test(){\n\t\t\tconsole.log(\"test rewrite\");\n\t\t}\n\t\tQUnit.test('isEven', function(assert) {\n\t\t\tassert.equal(isEven(0), true,'Zero is an even number');\n\t\t\tassert.equal(isEven(2), true, 'So is two');\n\t\t\tassert.equal(isEven(-4), true, 'So is negative four');\n\t\t\tassert.equal(!isEven(1), true, 'One is not an even number');\n\t\t\tassert.equal(!isEven(-7), true, 'Neither is negative seven');\n\t\t});\n\t\tQUnit.test( \"equal test\", function( assert ) {\n\t\t    assert.equal( 0, 0, \"Zero, Zero; equal succeeds\" );\n\t\t    assert.equal( \"\", 0, \"Empty, Zero; equal succeeds\" );\n\t\t    assert.equal( \"\", \"\", \"Empty, Empty; equal succeeds\" );\n\t\t \n\t\t    assert.equal( \"three\", 3, \"Three, 3; equal fails\" );\n\t\t    assert.equal( null, false, \"null, false; equal fails\" );\n\t\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"qunit\"></div>\n</body>\n</html>\n```\n这是些基本的用法，就是对某个要测试的方法，输入测试值、预测结果，然后跑测试\n一些高级用法待续。。。\n\n  [1]: http://www.woiweb.net/how-to-test-your-javascript-code-with-qunit.html","source":"_posts/0624-JS Unit Testing.md","raw":"title: Qunit 单元测试学习笔记\ndate: 2014-06-24 11:06:59\ncategories: test\ndescription: 介绍用 QUnit 做简单的单元测试\n---\n\n>参考文章\n1. [如何用Qunit测试你的JavaScript代码][1]\n推荐网站\n1. http://testswarm.com/\n##简介\n\n>在计算机编程中，单元测试（又称为模块测试）是针对程序模块(软件设计的最小单位)来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。\n\n来自wiki，大概。。。简单地说，你为你的代码的每个功能写测试，如果所有这些测试都通过了，那么你可以肯定的是，代码没有缺陷（通常，还是由你的测试有多彻底而定）。\n\n##为什么你要测试你的代码\n\n1. 首先，点击测试法很烦。点击事实上并不是一件轻松的工作，因为你不得不确保每样东西都被点到而且很有可能你错过了一个或两个。\n\n2. 其次，你为测试做的每件事情是不能复用的，这意味着它很难回归。原来的代码测试并发布之后，修改了新的需求，接下来发现旧的问题又出现了，叫做“回归”。\n\n3. 它使跨浏览器兼容性测试很容易。仅仅在不同浏览器中运行你的测试案例就行，如果一个浏览器出现问题，你修复它并重新运行这些测试案例，确保不会在别的浏览器引起回归，一旦全部通过测试，你可以肯定的说，所有的目标浏览器都支持。\n\n##如何用QUnit写单元测试\n\n在要测试的项目里面添加一个测试的test.js和Qunit.js和Qunit.css。\n嗯，我来试一试！！我的测试代码如下\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>test html</title>\n\t<link rel=\"stylesheet\" href=\"http://code.jquery.com/qunit/qunit-1.14.0.css\">\n\t<script type=\"text/javascript\" src=\"http://code.jquery.com/qunit/qunit-1.14.0.js\"></script>\n\t<script >\n\t\t// Let's test this function\n\t\tfunction isEven(val) {\n\t\t\treturn val % 2 === 0;\n\t\t}\n\t\tfunction test(){\n\t\t\tconsole.log(\"test rewrite\");\n\t\t}\n\t\tQUnit.test('isEven', function(assert) {\n\t\t\tassert.equal(isEven(0), true,'Zero is an even number');\n\t\t\tassert.equal(isEven(2), true, 'So is two');\n\t\t\tassert.equal(isEven(-4), true, 'So is negative four');\n\t\t\tassert.equal(!isEven(1), true, 'One is not an even number');\n\t\t\tassert.equal(!isEven(-7), true, 'Neither is negative seven');\n\t\t});\n\t\tQUnit.test( \"equal test\", function( assert ) {\n\t\t    assert.equal( 0, 0, \"Zero, Zero; equal succeeds\" );\n\t\t    assert.equal( \"\", 0, \"Empty, Zero; equal succeeds\" );\n\t\t    assert.equal( \"\", \"\", \"Empty, Empty; equal succeeds\" );\n\t\t \n\t\t    assert.equal( \"three\", 3, \"Three, 3; equal fails\" );\n\t\t    assert.equal( null, false, \"null, false; equal fails\" );\n\t\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"qunit\"></div>\n</body>\n</html>\n```\n这是些基本的用法，就是对某个要测试的方法，输入测试值、预测结果，然后跑测试\n一些高级用法待续。。。\n\n  [1]: http://www.woiweb.net/how-to-test-your-javascript-code-with-qunit.html","slug":"0624-JS Unit Testing","published":1,"updated":"2015-04-30T02:30:19.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgu000eok1vecp7a6mi","content":"<blockquote>\n<p>参考文章</p>\n<ol>\n<li><a href=\"http://www.woiweb.net/how-to-test-your-javascript-code-with-qunit.html\" target=\"_blank\" rel=\"external\">如何用Qunit测试你的JavaScript代码</a><br>推荐网站</li>\n<li><a href=\"http://testswarm.com/\" target=\"_blank\" rel=\"external\">http://testswarm.com/</a><br>##简介</li>\n</ol>\n<p>在计算机编程中，单元测试（又称为模块测试）是针对程序模块(软件设计的最小单位)来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。</p>\n</blockquote>\n<p>来自wiki，大概。。。简单地说，你为你的代码的每个功能写测试，如果所有这些测试都通过了，那么你可以肯定的是，代码没有缺陷（通常，还是由你的测试有多彻底而定）。</p>\n<p>##为什么你要测试你的代码</p>\n<ol>\n<li><p>首先，点击测试法很烦。点击事实上并不是一件轻松的工作，因为你不得不确保每样东西都被点到而且很有可能你错过了一个或两个。</p>\n</li>\n<li><p>其次，你为测试做的每件事情是不能复用的，这意味着它很难回归。原来的代码测试并发布之后，修改了新的需求，接下来发现旧的问题又出现了，叫做“回归”。</p>\n</li>\n<li><p>它使跨浏览器兼容性测试很容易。仅仅在不同浏览器中运行你的测试案例就行，如果一个浏览器出现问题，你修复它并重新运行这些测试案例，确保不会在别的浏览器引起回归，一旦全部通过测试，你可以肯定的说，所有的目标浏览器都支持。</p>\n</li>\n</ol>\n<p>##如何用QUnit写单元测试</p>\n<p>在要测试的项目里面添加一个测试的test.js和Qunit.js和Qunit.css。<br>嗯，我来试一试！！我的测试代码如下</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;test html&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://code.jquery.com/qunit/qunit-1.14.0.css&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/qunit/qunit-1.14.0.js&quot;&gt;&lt;/script&gt;\n    &lt;script &gt;\n        // Let&#39;s test this function\n        function isEven(val) {\n            return val % 2 === 0;\n        }\n        function test(){\n            console.log(&quot;test rewrite&quot;);\n        }\n        QUnit.test(&#39;isEven&#39;, function(assert) {\n            assert.equal(isEven(0), true,&#39;Zero is an even number&#39;);\n            assert.equal(isEven(2), true, &#39;So is two&#39;);\n            assert.equal(isEven(-4), true, &#39;So is negative four&#39;);\n            assert.equal(!isEven(1), true, &#39;One is not an even number&#39;);\n            assert.equal(!isEven(-7), true, &#39;Neither is negative seven&#39;);\n        });\n        QUnit.test( &quot;equal test&quot;, function( assert ) {\n            assert.equal( 0, 0, &quot;Zero, Zero; equal succeeds&quot; );\n            assert.equal( &quot;&quot;, 0, &quot;Empty, Zero; equal succeeds&quot; );\n            assert.equal( &quot;&quot;, &quot;&quot;, &quot;Empty, Empty; equal succeeds&quot; );\n\n            assert.equal( &quot;three&quot;, 3, &quot;Three, 3; equal fails&quot; );\n            assert.equal( null, false, &quot;null, false; equal fails&quot; );\n        });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;qunit&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这是些基本的用法，就是对某个要测试的方法，输入测试值、预测结果，然后跑测试<br>一些高级用法待续。。。</p>\n","excerpt":"","more":"<blockquote>\n<p>参考文章</p>\n<ol>\n<li><a href=\"http://www.woiweb.net/how-to-test-your-javascript-code-with-qunit.html\">如何用Qunit测试你的JavaScript代码</a><br>推荐网站</li>\n<li><a href=\"http://testswarm.com/\">http://testswarm.com/</a><br>##简介</li>\n</ol>\n<p>在计算机编程中，单元测试（又称为模块测试）是针对程序模块(软件设计的最小单位)来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。</p>\n</blockquote>\n<p>来自wiki，大概。。。简单地说，你为你的代码的每个功能写测试，如果所有这些测试都通过了，那么你可以肯定的是，代码没有缺陷（通常，还是由你的测试有多彻底而定）。</p>\n<p>##为什么你要测试你的代码</p>\n<ol>\n<li><p>首先，点击测试法很烦。点击事实上并不是一件轻松的工作，因为你不得不确保每样东西都被点到而且很有可能你错过了一个或两个。</p>\n</li>\n<li><p>其次，你为测试做的每件事情是不能复用的，这意味着它很难回归。原来的代码测试并发布之后，修改了新的需求，接下来发现旧的问题又出现了，叫做“回归”。</p>\n</li>\n<li><p>它使跨浏览器兼容性测试很容易。仅仅在不同浏览器中运行你的测试案例就行，如果一个浏览器出现问题，你修复它并重新运行这些测试案例，确保不会在别的浏览器引起回归，一旦全部通过测试，你可以肯定的说，所有的目标浏览器都支持。</p>\n</li>\n</ol>\n<p>##如何用QUnit写单元测试</p>\n<p>在要测试的项目里面添加一个测试的test.js和Qunit.js和Qunit.css。<br>嗯，我来试一试！！我的测试代码如下</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;test html&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://code.jquery.com/qunit/qunit-1.14.0.css&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/qunit/qunit-1.14.0.js&quot;&gt;&lt;/script&gt;\n    &lt;script &gt;\n        // Let&#39;s test this function\n        function isEven(val) {\n            return val % 2 === 0;\n        }\n        function test(){\n            console.log(&quot;test rewrite&quot;);\n        }\n        QUnit.test(&#39;isEven&#39;, function(assert) {\n            assert.equal(isEven(0), true,&#39;Zero is an even number&#39;);\n            assert.equal(isEven(2), true, &#39;So is two&#39;);\n            assert.equal(isEven(-4), true, &#39;So is negative four&#39;);\n            assert.equal(!isEven(1), true, &#39;One is not an even number&#39;);\n            assert.equal(!isEven(-7), true, &#39;Neither is negative seven&#39;);\n        });\n        QUnit.test( &quot;equal test&quot;, function( assert ) {\n            assert.equal( 0, 0, &quot;Zero, Zero; equal succeeds&quot; );\n            assert.equal( &quot;&quot;, 0, &quot;Empty, Zero; equal succeeds&quot; );\n            assert.equal( &quot;&quot;, &quot;&quot;, &quot;Empty, Empty; equal succeeds&quot; );\n\n            assert.equal( &quot;three&quot;, 3, &quot;Three, 3; equal fails&quot; );\n            assert.equal( null, false, &quot;null, false; equal fails&quot; );\n        });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;qunit&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这是些基本的用法，就是对某个要测试的方法，输入测试值、预测结果，然后跑测试<br>一些高级用法待续。。。</p>\n"},{"title":"Grunt 常用插件","date":"2014-06-24T03:06:59.000Z","description":"使用 Grunt 时常用的几个插件的配置方法","_content":"\n[grunt中文网]:http://www.gruntjs.net/docs/sample-gruntfile/\n[《Grunt.js 在前端项目中的实战》][1]文章的实战部分也有介绍一些常用的插件\n[grunt插件in Github][2]\n##前期准备\n通过[grunt中文网]上的案例，memo一下常用的grunt插件的使用\n首先从`package.json`文件读入配置信息，并存入`pkg`属性内。这样就可以让我们访问到 `package.json` 文件中列出的属性了，如下：\n```\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json')\n  });\n};\n```\n\n##grunt-contrib-concat【合并文件】\n###代码\n```\nconcat: {\n  options: {\n    // 定义一个用于插入合并输出文件之间的字符\n    separator: ';'\n  },\n  dist: {\n    // 将要被合并的文件\n    src: ['src/**/*.js'],\n    // 合并后的JS文件的存放位置\n    dest: 'dist/<%= pkg.name %>.js'\n  }\n}\n```\n\n###说明\nGrunt自带的有一个简单的模板引擎用于输出配置对象的属性值(这里是指 `package.json` 中的配置对象)。这里是让`concat`任务将所有存在于`src/`目录下以`.js`结尾的文件合并起来，然后存储在`dist`目录中，并以项目名 `package.json` 来命名。\n\n##grunt-contrib-uglify【压缩JS】\n###代码\n```\nuglify: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n  },\n  dist: {\n    files: {\n      'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']\n    }\n  }\n}\n```\n###说明\n上面是配置uglify插件的代码，它的作用是压缩（minify）JavaScript文件。\n\n这里我们让`uglify`在`dist/`目录中创建了一个包含压缩结果的JavaScript文件。注意这里我使用了 `<%= concat.dist.dest %>`，因此 `uglify` 会自动压缩 `concat` 任务中生成的文件。\n\n###扩展\n* 这里可以用 `concat.attr` 这种写法取到 `contact `配置的值，是不是说明在`grunt.initConfig({})`声明的属性,可以使用比自己先声明的配置的属性呢？\n或是后声明的也能取到值呢？\n* 这里可以交换顺序试一试\n\n\n##grunt-contrib-cssmin【压缩JS】\n###代码\n```\n//压缩成为一个css\ncssmin: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n  },\n  dist: {\n    files: {\n      'dist/<%= pkg.name %>.min.css': ['<%= path/to/**/*.css  %>']\n    }\n  }\n}\n\n//每个分别压\ncssmin: {\n  minify: {\n    expand: true,\n    cwd: 'release/css/',\n    src: ['*.css', '!*.min.css'],\n    dest: 'release/css/',\n    ext: '.min.css'\n  }\n}\n\n```\n###说明\n压缩CSS文件\n\n##grunt-contrib-imagemin【压缩图片】\n###代码\n```\n  imagemin: {                          // Task\n    static: {                          // Target\n      options: {                       // Target options\n        optimizationLevel: 3,\n        use: [mozjpeg()]\n      },\n      files: {                         // Dictionary of files\n        'dist/img.png': 'src/img.png', // 'destination': 'source'\n        'dist/img.jpg': 'src/img.jpg',\n        'dist/img.gif': 'src/img.gif'\n      }\n    },\n    dynamic: {                         // Another target\n      files: [{\n        expand: true,                  // Enable dynamic expansion\n        cwd: 'src/',                   // Src matches are relative to this path\n        src: ['**/*.{png,jpg,gif}'],   // Actual patterns to match\n        dest: 'dist/'                  // Destination path prefix\n      }]\n    }\n  }\n```\n\n###说明\n压缩图片，对图片进行优化处理，根据以下几个优化器\n\n- [gifsicle][3] — Compress GIF images\n- [jpegtran][4] — Compress JPEG images\n- [optipng][5] — Compress PNG images\n- [svgo][6] — Compress SVG images\n\n\n\n\n##grunt-contrib-qunit【测试任务】\n###代码\n```\nqunit: {\n  files: ['test/**/*.html']\n},\n```\n###说明\nQUnit插件的设置非常简单。 你只需要给它提供用于测试运行的文件的位置，注意这里的QUnit是运行在HTML文件上的\n\n###扩展\n他是`jQuery`家族的一员\n>QUnit is a powerful, easy-to-use JavaScript unit testing framework. It's used by the jQuery, jQuery UI and jQuery Mobile projects and is capable of testing any generic JavaScript code, including itself!\n\n测试框架也没有常用过，详细的另外写个memo，叫做《JA Unit Testing学习笔记》吧！\n\n##grunt-contrib-jshint\n###代码\n```\njshint: {\n  // define the files to lint\n  files: ['gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n  // configure JSHint (documented at http://www.jshint.com/docs/)\n  options: {\n      // more options here if you want to override JSHint defaults\n    globals: {\n      jQuery: true,\n      console: true,\n      module: true\n    }\n  }\n}\n```\n###说明\n[Jshint][7]是一个JS代码书写风格检测器，具体的在线[demo][8],使用一些参数可以让Jhint用某种规则来检测你的代码。\n\n###扩展\n[《一些达成共识的JavaScript编码风格约定》][9]\n[《JSHint 使用说明》][10]\n\n##grunt-contrib-watch\n###代码\n```\nwatch: {\n  files: ['<%= jshint.files %>'],\n  tasks: ['jshint', 'qunit']\n}\n```\n###说明\n`grunt-contrib-watch` 是开发必备插件，用来监控文件的修改，然后自动运行`grunt`任务，省去一遍遍手动执行Grunt命令，\n###扩展\n[《Grunt.js 在前端项目中的实战》][11]文章的实战部分也有介绍一些常用的插件\n\n##结语\n整个实例请看[grunt中文网]这个网页\n\n\n  [1]: http://www.tuicool.com/articles/zQ7jmm\n  [2]: https://github.com/gruntjs\n  [3]: https://github.com/kevva/imagemin-gifsicle\n  [4]: https://github.com/kevva/imagemin-jpegtran\n  [5]: https://github.com/kevva/imagemin-optipng\n  [6]: https://github.com/kevva/imagemin-svgo\n  [7]: http://www.jshint.com/docs/\n  [8]: http://www.jshint.com/\n  [9]: http://www.iteye.com/news/28028-JavaScript-code-style-guide\n  [10]: http://zhang.zipeng.info/vimwiki/Entries/Reference/Tools/jshint.html\n  [11]: http://www.tuicool.com/articles/zQ7jmm","source":"_posts/0624-grunt common plugin.md","raw":"title: Grunt 常用插件\ndate: 2014-06-24 11:06:59\ncategories: Grunt\ndescription: 使用 Grunt 时常用的几个插件的配置方法\n---\n\n[grunt中文网]:http://www.gruntjs.net/docs/sample-gruntfile/\n[《Grunt.js 在前端项目中的实战》][1]文章的实战部分也有介绍一些常用的插件\n[grunt插件in Github][2]\n##前期准备\n通过[grunt中文网]上的案例，memo一下常用的grunt插件的使用\n首先从`package.json`文件读入配置信息，并存入`pkg`属性内。这样就可以让我们访问到 `package.json` 文件中列出的属性了，如下：\n```\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json')\n  });\n};\n```\n\n##grunt-contrib-concat【合并文件】\n###代码\n```\nconcat: {\n  options: {\n    // 定义一个用于插入合并输出文件之间的字符\n    separator: ';'\n  },\n  dist: {\n    // 将要被合并的文件\n    src: ['src/**/*.js'],\n    // 合并后的JS文件的存放位置\n    dest: 'dist/<%= pkg.name %>.js'\n  }\n}\n```\n\n###说明\nGrunt自带的有一个简单的模板引擎用于输出配置对象的属性值(这里是指 `package.json` 中的配置对象)。这里是让`concat`任务将所有存在于`src/`目录下以`.js`结尾的文件合并起来，然后存储在`dist`目录中，并以项目名 `package.json` 来命名。\n\n##grunt-contrib-uglify【压缩JS】\n###代码\n```\nuglify: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n  },\n  dist: {\n    files: {\n      'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']\n    }\n  }\n}\n```\n###说明\n上面是配置uglify插件的代码，它的作用是压缩（minify）JavaScript文件。\n\n这里我们让`uglify`在`dist/`目录中创建了一个包含压缩结果的JavaScript文件。注意这里我使用了 `<%= concat.dist.dest %>`，因此 `uglify` 会自动压缩 `concat` 任务中生成的文件。\n\n###扩展\n* 这里可以用 `concat.attr` 这种写法取到 `contact `配置的值，是不是说明在`grunt.initConfig({})`声明的属性,可以使用比自己先声明的配置的属性呢？\n或是后声明的也能取到值呢？\n* 这里可以交换顺序试一试\n\n\n##grunt-contrib-cssmin【压缩JS】\n###代码\n```\n//压缩成为一个css\ncssmin: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n  },\n  dist: {\n    files: {\n      'dist/<%= pkg.name %>.min.css': ['<%= path/to/**/*.css  %>']\n    }\n  }\n}\n\n//每个分别压\ncssmin: {\n  minify: {\n    expand: true,\n    cwd: 'release/css/',\n    src: ['*.css', '!*.min.css'],\n    dest: 'release/css/',\n    ext: '.min.css'\n  }\n}\n\n```\n###说明\n压缩CSS文件\n\n##grunt-contrib-imagemin【压缩图片】\n###代码\n```\n  imagemin: {                          // Task\n    static: {                          // Target\n      options: {                       // Target options\n        optimizationLevel: 3,\n        use: [mozjpeg()]\n      },\n      files: {                         // Dictionary of files\n        'dist/img.png': 'src/img.png', // 'destination': 'source'\n        'dist/img.jpg': 'src/img.jpg',\n        'dist/img.gif': 'src/img.gif'\n      }\n    },\n    dynamic: {                         // Another target\n      files: [{\n        expand: true,                  // Enable dynamic expansion\n        cwd: 'src/',                   // Src matches are relative to this path\n        src: ['**/*.{png,jpg,gif}'],   // Actual patterns to match\n        dest: 'dist/'                  // Destination path prefix\n      }]\n    }\n  }\n```\n\n###说明\n压缩图片，对图片进行优化处理，根据以下几个优化器\n\n- [gifsicle][3] — Compress GIF images\n- [jpegtran][4] — Compress JPEG images\n- [optipng][5] — Compress PNG images\n- [svgo][6] — Compress SVG images\n\n\n\n\n##grunt-contrib-qunit【测试任务】\n###代码\n```\nqunit: {\n  files: ['test/**/*.html']\n},\n```\n###说明\nQUnit插件的设置非常简单。 你只需要给它提供用于测试运行的文件的位置，注意这里的QUnit是运行在HTML文件上的\n\n###扩展\n他是`jQuery`家族的一员\n>QUnit is a powerful, easy-to-use JavaScript unit testing framework. It's used by the jQuery, jQuery UI and jQuery Mobile projects and is capable of testing any generic JavaScript code, including itself!\n\n测试框架也没有常用过，详细的另外写个memo，叫做《JA Unit Testing学习笔记》吧！\n\n##grunt-contrib-jshint\n###代码\n```\njshint: {\n  // define the files to lint\n  files: ['gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n  // configure JSHint (documented at http://www.jshint.com/docs/)\n  options: {\n      // more options here if you want to override JSHint defaults\n    globals: {\n      jQuery: true,\n      console: true,\n      module: true\n    }\n  }\n}\n```\n###说明\n[Jshint][7]是一个JS代码书写风格检测器，具体的在线[demo][8],使用一些参数可以让Jhint用某种规则来检测你的代码。\n\n###扩展\n[《一些达成共识的JavaScript编码风格约定》][9]\n[《JSHint 使用说明》][10]\n\n##grunt-contrib-watch\n###代码\n```\nwatch: {\n  files: ['<%= jshint.files %>'],\n  tasks: ['jshint', 'qunit']\n}\n```\n###说明\n`grunt-contrib-watch` 是开发必备插件，用来监控文件的修改，然后自动运行`grunt`任务，省去一遍遍手动执行Grunt命令，\n###扩展\n[《Grunt.js 在前端项目中的实战》][11]文章的实战部分也有介绍一些常用的插件\n\n##结语\n整个实例请看[grunt中文网]这个网页\n\n\n  [1]: http://www.tuicool.com/articles/zQ7jmm\n  [2]: https://github.com/gruntjs\n  [3]: https://github.com/kevva/imagemin-gifsicle\n  [4]: https://github.com/kevva/imagemin-jpegtran\n  [5]: https://github.com/kevva/imagemin-optipng\n  [6]: https://github.com/kevva/imagemin-svgo\n  [7]: http://www.jshint.com/docs/\n  [8]: http://www.jshint.com/\n  [9]: http://www.iteye.com/news/28028-JavaScript-code-style-guide\n  [10]: http://zhang.zipeng.info/vimwiki/Entries/Reference/Tools/jshint.html\n  [11]: http://www.tuicool.com/articles/zQ7jmm","slug":"0624-grunt common plugin","published":1,"updated":"2015-02-13T06:16:48.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgw000fok1vhg1j7l2a","content":"<p><a href=\"http://www.tuicool.com/articles/zQ7jmm\" target=\"_blank\" rel=\"external\">《Grunt.js 在前端项目中的实战》</a>文章的实战部分也有介绍一些常用的插件<br><a href=\"https://github.com/gruntjs\" target=\"_blank\" rel=\"external\">grunt插件in Github</a></p>\n<p>##前期准备<br>通过<a href=\"http://www.gruntjs.net/docs/sample-gruntfile/\" target=\"_blank\" rel=\"external\">grunt中文网</a>上的案例，memo一下常用的grunt插件的使用<br>首先从<code>package.json</code>文件读入配置信息，并存入<code>pkg</code>属性内。这样就可以让我们访问到 <code>package.json</code> 文件中列出的属性了，如下：</p>\n<pre><code>module.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON(&#39;package.json&#39;)\n  });\n};\n</code></pre><p>##grunt-contrib-concat【合并文件】</p>\n<p>###代码</p>\n<pre><code>concat: {\n  options: {\n    // 定义一个用于插入合并输出文件之间的字符\n    separator: &#39;;&#39;\n  },\n  dist: {\n    // 将要被合并的文件\n    src: [&#39;src/**/*.js&#39;],\n    // 合并后的JS文件的存放位置\n    dest: &#39;dist/&lt;%= pkg.name %&gt;.js&#39;\n  }\n}\n</code></pre><p>###说明<br>Grunt自带的有一个简单的模板引擎用于输出配置对象的属性值(这里是指 <code>package.json</code> 中的配置对象)。这里是让<code>concat</code>任务将所有存在于<code>src/</code>目录下以<code>.js</code>结尾的文件合并起来，然后存储在<code>dist</code>目录中，并以项目名 <code>package.json</code> 来命名。</p>\n<p>##grunt-contrib-uglify【压缩JS】</p>\n<p>###代码</p>\n<pre><code>uglify: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;dd-mm-yyyy&quot;) %&gt; */\\n&#39;\n  },\n  dist: {\n    files: {\n      &#39;dist/&lt;%= pkg.name %&gt;.min.js&#39;: [&#39;&lt;%= concat.dist.dest %&gt;&#39;]\n    }\n  }\n}\n</code></pre><p>###说明<br>上面是配置uglify插件的代码，它的作用是压缩（minify）JavaScript文件。</p>\n<p>这里我们让<code>uglify</code>在<code>dist/</code>目录中创建了一个包含压缩结果的JavaScript文件。注意这里我使用了 <code>&lt;%= concat.dist.dest %&gt;</code>，因此 <code>uglify</code> 会自动压缩 <code>concat</code> 任务中生成的文件。</p>\n<p>###扩展</p>\n<ul>\n<li>这里可以用 <code>concat.attr</code> 这种写法取到 <code>contact</code>配置的值，是不是说明在<code>grunt.initConfig({})</code>声明的属性,可以使用比自己先声明的配置的属性呢？<br>或是后声明的也能取到值呢？</li>\n<li>这里可以交换顺序试一试</li>\n</ul>\n<p>##grunt-contrib-cssmin【压缩JS】</p>\n<p>###代码</p>\n<pre><code>//压缩成为一个css\ncssmin: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;dd-mm-yyyy&quot;) %&gt; */\\n&#39;\n  },\n  dist: {\n    files: {\n      &#39;dist/&lt;%= pkg.name %&gt;.min.css&#39;: [&#39;&lt;%= path/to/**/*.css  %&gt;&#39;]\n    }\n  }\n}\n\n//每个分别压\ncssmin: {\n  minify: {\n    expand: true,\n    cwd: &#39;release/css/&#39;,\n    src: [&#39;*.css&#39;, &#39;!*.min.css&#39;],\n    dest: &#39;release/css/&#39;,\n    ext: &#39;.min.css&#39;\n  }\n}\n</code></pre><p>###说明<br>压缩CSS文件</p>\n<p>##grunt-contrib-imagemin【压缩图片】</p>\n<p>###代码</p>\n<pre><code>  imagemin: {                          // Task\n    static: {                          // Target\n      options: {                       // Target options\n        optimizationLevel: 3,\n        use: [mozjpeg()]\n      },\n      files: {                         // Dictionary of files\n        &#39;dist/img.png&#39;: &#39;src/img.png&#39;, // &#39;destination&#39;: &#39;source&#39;\n        &#39;dist/img.jpg&#39;: &#39;src/img.jpg&#39;,\n        &#39;dist/img.gif&#39;: &#39;src/img.gif&#39;\n      }\n    },\n    dynamic: {                         // Another target\n      files: [{\n        expand: true,                  // Enable dynamic expansion\n        cwd: &#39;src/&#39;,                   // Src matches are relative to this path\n        src: [&#39;**/*.{png,jpg,gif}&#39;],   // Actual patterns to match\n        dest: &#39;dist/&#39;                  // Destination path prefix\n      }]\n    }\n  }\n</code></pre><p>###说明<br>压缩图片，对图片进行优化处理，根据以下几个优化器</p>\n<ul>\n<li><a href=\"https://github.com/kevva/imagemin-gifsicle\" target=\"_blank\" rel=\"external\">gifsicle</a> — Compress GIF images</li>\n<li><a href=\"https://github.com/kevva/imagemin-jpegtran\" target=\"_blank\" rel=\"external\">jpegtran</a> — Compress JPEG images</li>\n<li><a href=\"https://github.com/kevva/imagemin-optipng\" target=\"_blank\" rel=\"external\">optipng</a> — Compress PNG images</li>\n<li><a href=\"https://github.com/kevva/imagemin-svgo\" target=\"_blank\" rel=\"external\">svgo</a> — Compress SVG images</li>\n</ul>\n<p>##grunt-contrib-qunit【测试任务】</p>\n<p>###代码</p>\n<pre><code>qunit: {\n  files: [&#39;test/**/*.html&#39;]\n},\n</code></pre><p>###说明<br>QUnit插件的设置非常简单。 你只需要给它提供用于测试运行的文件的位置，注意这里的QUnit是运行在HTML文件上的</p>\n<p>###扩展<br>他是<code>jQuery</code>家族的一员</p>\n<blockquote>\n<p>QUnit is a powerful, easy-to-use JavaScript unit testing framework. It’s used by the jQuery, jQuery UI and jQuery Mobile projects and is capable of testing any generic JavaScript code, including itself!</p>\n</blockquote>\n<p>测试框架也没有常用过，详细的另外写个memo，叫做《JA Unit Testing学习笔记》吧！</p>\n<p>##grunt-contrib-jshint</p>\n<p>###代码</p>\n<pre><code>jshint: {\n  // define the files to lint\n  files: [&#39;gruntfile.js&#39;, &#39;src/**/*.js&#39;, &#39;test/**/*.js&#39;],\n  // configure JSHint (documented at http://www.jshint.com/docs/)\n  options: {\n      // more options here if you want to override JSHint defaults\n    globals: {\n      jQuery: true,\n      console: true,\n      module: true\n    }\n  }\n}\n</code></pre><p>###说明<br><a href=\"http://www.jshint.com/docs/\" target=\"_blank\" rel=\"external\">Jshint</a>是一个JS代码书写风格检测器，具体的在线<a href=\"http://www.jshint.com/\" target=\"_blank\" rel=\"external\">demo</a>,使用一些参数可以让Jhint用某种规则来检测你的代码。</p>\n<p>###扩展<br><a href=\"http://www.iteye.com/news/28028-JavaScript-code-style-guide\" target=\"_blank\" rel=\"external\">《一些达成共识的JavaScript编码风格约定》</a><br><a href=\"http://zhang.zipeng.info/vimwiki/Entries/Reference/Tools/jshint.html\" target=\"_blank\" rel=\"external\">《JSHint 使用说明》</a></p>\n<p>##grunt-contrib-watch</p>\n<p>###代码</p>\n<pre><code>watch: {\n  files: [&#39;&lt;%= jshint.files %&gt;&#39;],\n  tasks: [&#39;jshint&#39;, &#39;qunit&#39;]\n}\n</code></pre><p>###说明<br><code>grunt-contrib-watch</code> 是开发必备插件，用来监控文件的修改，然后自动运行<code>grunt</code>任务，省去一遍遍手动执行Grunt命令，</p>\n<p>###扩展<br><a href=\"http://www.tuicool.com/articles/zQ7jmm\" target=\"_blank\" rel=\"external\">《Grunt.js 在前端项目中的实战》</a>文章的实战部分也有介绍一些常用的插件</p>\n<p>##结语<br>整个实例请看<a href=\"http://www.gruntjs.net/docs/sample-gruntfile/\" target=\"_blank\" rel=\"external\">grunt中文网</a>这个网页</p>\n","excerpt":"","more":"<p><a href=\"http://www.tuicool.com/articles/zQ7jmm\">《Grunt.js 在前端项目中的实战》</a>文章的实战部分也有介绍一些常用的插件<br><a href=\"https://github.com/gruntjs\">grunt插件in Github</a></p>\n<p>##前期准备<br>通过<a href=\"http://www.gruntjs.net/docs/sample-gruntfile/\">grunt中文网</a>上的案例，memo一下常用的grunt插件的使用<br>首先从<code>package.json</code>文件读入配置信息，并存入<code>pkg</code>属性内。这样就可以让我们访问到 <code>package.json</code> 文件中列出的属性了，如下：</p>\n<pre><code>module.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON(&#39;package.json&#39;)\n  });\n};\n</code></pre><p>##grunt-contrib-concat【合并文件】</p>\n<p>###代码</p>\n<pre><code>concat: {\n  options: {\n    // 定义一个用于插入合并输出文件之间的字符\n    separator: &#39;;&#39;\n  },\n  dist: {\n    // 将要被合并的文件\n    src: [&#39;src/**/*.js&#39;],\n    // 合并后的JS文件的存放位置\n    dest: &#39;dist/&lt;%= pkg.name %&gt;.js&#39;\n  }\n}\n</code></pre><p>###说明<br>Grunt自带的有一个简单的模板引擎用于输出配置对象的属性值(这里是指 <code>package.json</code> 中的配置对象)。这里是让<code>concat</code>任务将所有存在于<code>src/</code>目录下以<code>.js</code>结尾的文件合并起来，然后存储在<code>dist</code>目录中，并以项目名 <code>package.json</code> 来命名。</p>\n<p>##grunt-contrib-uglify【压缩JS】</p>\n<p>###代码</p>\n<pre><code>uglify: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;dd-mm-yyyy&quot;) %&gt; */\\n&#39;\n  },\n  dist: {\n    files: {\n      &#39;dist/&lt;%= pkg.name %&gt;.min.js&#39;: [&#39;&lt;%= concat.dist.dest %&gt;&#39;]\n    }\n  }\n}\n</code></pre><p>###说明<br>上面是配置uglify插件的代码，它的作用是压缩（minify）JavaScript文件。</p>\n<p>这里我们让<code>uglify</code>在<code>dist/</code>目录中创建了一个包含压缩结果的JavaScript文件。注意这里我使用了 <code>&lt;%= concat.dist.dest %&gt;</code>，因此 <code>uglify</code> 会自动压缩 <code>concat</code> 任务中生成的文件。</p>\n<p>###扩展</p>\n<ul>\n<li>这里可以用 <code>concat.attr</code> 这种写法取到 <code>contact</code>配置的值，是不是说明在<code>grunt.initConfig({})</code>声明的属性,可以使用比自己先声明的配置的属性呢？<br>或是后声明的也能取到值呢？</li>\n<li>这里可以交换顺序试一试</li>\n</ul>\n<p>##grunt-contrib-cssmin【压缩JS】</p>\n<p>###代码</p>\n<pre><code>//压缩成为一个css\ncssmin: {\n  options: {\n    // 此处定义的banner注释将插入到输出文件的顶部\n    banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;dd-mm-yyyy&quot;) %&gt; */\\n&#39;\n  },\n  dist: {\n    files: {\n      &#39;dist/&lt;%= pkg.name %&gt;.min.css&#39;: [&#39;&lt;%= path/to/**/*.css  %&gt;&#39;]\n    }\n  }\n}\n\n//每个分别压\ncssmin: {\n  minify: {\n    expand: true,\n    cwd: &#39;release/css/&#39;,\n    src: [&#39;*.css&#39;, &#39;!*.min.css&#39;],\n    dest: &#39;release/css/&#39;,\n    ext: &#39;.min.css&#39;\n  }\n}\n</code></pre><p>###说明<br>压缩CSS文件</p>\n<p>##grunt-contrib-imagemin【压缩图片】</p>\n<p>###代码</p>\n<pre><code>  imagemin: {                          // Task\n    static: {                          // Target\n      options: {                       // Target options\n        optimizationLevel: 3,\n        use: [mozjpeg()]\n      },\n      files: {                         // Dictionary of files\n        &#39;dist/img.png&#39;: &#39;src/img.png&#39;, // &#39;destination&#39;: &#39;source&#39;\n        &#39;dist/img.jpg&#39;: &#39;src/img.jpg&#39;,\n        &#39;dist/img.gif&#39;: &#39;src/img.gif&#39;\n      }\n    },\n    dynamic: {                         // Another target\n      files: [{\n        expand: true,                  // Enable dynamic expansion\n        cwd: &#39;src/&#39;,                   // Src matches are relative to this path\n        src: [&#39;**/*.{png,jpg,gif}&#39;],   // Actual patterns to match\n        dest: &#39;dist/&#39;                  // Destination path prefix\n      }]\n    }\n  }\n</code></pre><p>###说明<br>压缩图片，对图片进行优化处理，根据以下几个优化器</p>\n<ul>\n<li><a href=\"https://github.com/kevva/imagemin-gifsicle\">gifsicle</a> — Compress GIF images</li>\n<li><a href=\"https://github.com/kevva/imagemin-jpegtran\">jpegtran</a> — Compress JPEG images</li>\n<li><a href=\"https://github.com/kevva/imagemin-optipng\">optipng</a> — Compress PNG images</li>\n<li><a href=\"https://github.com/kevva/imagemin-svgo\">svgo</a> — Compress SVG images</li>\n</ul>\n<p>##grunt-contrib-qunit【测试任务】</p>\n<p>###代码</p>\n<pre><code>qunit: {\n  files: [&#39;test/**/*.html&#39;]\n},\n</code></pre><p>###说明<br>QUnit插件的设置非常简单。 你只需要给它提供用于测试运行的文件的位置，注意这里的QUnit是运行在HTML文件上的</p>\n<p>###扩展<br>他是<code>jQuery</code>家族的一员</p>\n<blockquote>\n<p>QUnit is a powerful, easy-to-use JavaScript unit testing framework. It’s used by the jQuery, jQuery UI and jQuery Mobile projects and is capable of testing any generic JavaScript code, including itself!</p>\n</blockquote>\n<p>测试框架也没有常用过，详细的另外写个memo，叫做《JA Unit Testing学习笔记》吧！</p>\n<p>##grunt-contrib-jshint</p>\n<p>###代码</p>\n<pre><code>jshint: {\n  // define the files to lint\n  files: [&#39;gruntfile.js&#39;, &#39;src/**/*.js&#39;, &#39;test/**/*.js&#39;],\n  // configure JSHint (documented at http://www.jshint.com/docs/)\n  options: {\n      // more options here if you want to override JSHint defaults\n    globals: {\n      jQuery: true,\n      console: true,\n      module: true\n    }\n  }\n}\n</code></pre><p>###说明<br><a href=\"http://www.jshint.com/docs/\">Jshint</a>是一个JS代码书写风格检测器，具体的在线<a href=\"http://www.jshint.com/\">demo</a>,使用一些参数可以让Jhint用某种规则来检测你的代码。</p>\n<p>###扩展<br><a href=\"http://www.iteye.com/news/28028-JavaScript-code-style-guide\">《一些达成共识的JavaScript编码风格约定》</a><br><a href=\"http://zhang.zipeng.info/vimwiki/Entries/Reference/Tools/jshint.html\">《JSHint 使用说明》</a></p>\n<p>##grunt-contrib-watch</p>\n<p>###代码</p>\n<pre><code>watch: {\n  files: [&#39;&lt;%= jshint.files %&gt;&#39;],\n  tasks: [&#39;jshint&#39;, &#39;qunit&#39;]\n}\n</code></pre><p>###说明<br><code>grunt-contrib-watch</code> 是开发必备插件，用来监控文件的修改，然后自动运行<code>grunt</code>任务，省去一遍遍手动执行Grunt命令，</p>\n<p>###扩展<br><a href=\"http://www.tuicool.com/articles/zQ7jmm\">《Grunt.js 在前端项目中的实战》</a>文章的实战部分也有介绍一些常用的插件</p>\n<p>##结语<br>整个实例请看<a href=\"http://www.gruntjs.net/docs/sample-gruntfile/\">grunt中文网</a>这个网页</p>\n"},{"title":"grunt 项目架设","date":"2014-06-25T03:06:59.000Z","description":"Grunt 搭建项目的时候的基本流程，只是自己经验的记录","_content":"\n>参考文章\n[《前端工作流，Grunt上手指南》][1]\n[《Grunt+Livereload 搭建本地前端开发环境》][2]\n\n废话就不多说了，直接开始架设一个grunt控制的项目吧！O(∩_∩)O\n\n##1. 假设你已经安装了nodeJS和用npm全局安装了grunt-cli。\n\n##2. 新建package.json和Gruntfile.js\n先进入项目文件夹的根目录下\n```\n$ mkdir pj\n$ cd pj\n```\n\n###package.json\n\n根据上面的参考文章，直接执行`npm install`会生成一个空的package.js，但是我尝试之后失败了，是版本的问题吗？\n顺便一说，我的版本是\n```\n$ grunt -V \ngrunt-cli v0.1.13\ngrunt v0.4.5\n\n$ npm -v\n1.4.9\n```\n于是从前几篇的grunt笔记里面copy一个现有的`package.json` ，里面写好了要安装的一些常用的grunt项目插件包括grunt本身，大概酱紫。\n```\n{\n  \"name\": \"pj3\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"grunt\": \"^0.4.5\",\n    \"grunt-contrib-concat\": \"^0.4.0\",\n    \"grunt-contrib-jshint\": \"^0.10.0\",\n    \"grunt-contrib-nodeunit\": \"^0.4.1\",\n    \"grunt-contrib-qunit\": \"^0.5.1\",\n    \"grunt-contrib-uglify\": \"^0.5.0\",\n    \"grunt-contrib-watch\": \"^0.6.1\"\n  }\n}\n\n```\n好了，现在执行一下 `npm install`就会自动帮你安装以上列出来的依赖。而且安装好之后根据安装的版本，会更改到你的package.json的文件中。所以我上面的package.json其实是已经安装，并被更改过的了。现在文件结构是\n```\npj/\n|-- node_modules\n`-- package.json\n```\n\n###Gruntfile.js\n\n可以从之前的笔记上或者官网上手动创建，下面介绍用 `grunt-init`安装一些架构的方法。\n1. 全局安装`npm install -g grunt-init`\n2. 克隆要使用的模板,下面是clone到一个创建一个包含QUnit单元测试的jQuery插件的模板，模板更多介绍[在这里][3]\n```\ngit clone https://github.com/gruntjs/grunt-init-jquery.git ~/.grunt-init/jquery\n```\n3. 我用上面的方法clone了一个 `grunt-init-gruntfile` ，然后再执行 \n```    \ngrunt-init  gruntfile\n```\n好了，现在grunt-init已经根据你的package.json的配置，帮你写好一个Gruntfile.js，可以在此模板上根据需要修改下\n\n然后我手贱安装了下 `grunt-init jquery`，假装我要写一个叫jquery.barAnime的插件，于是在执行安装之前，grunt-init细心的询问了我各种问题，然后生成一个 `jquery.barAnime.jquery.json`来记录。=>（可能是我起的名字问题，json名字略奇葩\n\n目录变成酱紫了，欧也\\(^o^)/\n```\npj/\n|-- node_modules/\n|-- libs/\n|-- src/\n|-- test/\n|-- .gitignore\n|-- .jshintrc\n|-- CONTRIBUTING.md\n|-- jquery.barAnime.jquery.json\n|-- LICENSE-MIT\n|-- README.md\n|-- Gruntfile.js\n`-- package.json\n```\n\n生成了一些奇怪的文件，发现里面还有一个`LICENSE-MIT`，小白的我瞬间觉得UP了(⊙o⊙)哦\n\n##3. 执行grunt命令\n根据Gruntfile.js里面的配置，执行 `grunt`命令时，会执行 `default`任务\n```\n grunt.registerTask('default', ['jshint', 'qunit', 'clean', 'concat', 'uglify']);\n```\n我用 `grunt-init jquery` 自动生成的Gruntfile里面主要执行的就是以上几个命令，根目录会多出一个dist文件夹，里面是`concat`合并的 `jquery.barAnime.js` 和 `uglify`压缩的 `jquery.barAnime.min.js`。\n\n##4. 手动建立一个项目，并创建livereload\n\n利用 `grunt watch` 和 `grunt connect` 和 `connect-livereload`的配合就能省去F5与浏览器的livereload插件了，啊哈哈，快点开始吧\n\n参照这个大大的[文章][2]。我重新新建了一个项目，叫做pj4的\n按照上面的步骤，我安装了与上面一样的grunt和grunt插件，为了livereload的实现，还得再安装一些东西\n```\nnpm install --save-dev grunt-contrib-connect connect-livereload grunt-open\n```\n现在的文档目录如下。\n\n```\n    pj4/\n    |-- node_modules/\n    |-- src/\n    |    |-- js/\n    |    |-- css/\n    |    |-- img/\n    |    `-- index.html\n    |-- Gruntfile.js\n    `-- package.json\n```\n下面是特别重要的Gruntfile.js的内容。\n\n```\n/**\n * 自动化脚本定义\n */\nmodule.exports = function (grunt) {\n  'use strict';\n\n  //load all grunt tasks\n  require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n\n  //define tasks\n  grunt.registerTask('server', ['connect:server', 'open:server', 'watch:server']);\n\n  //env cfg\n  var pkg = grunt.file.readJSON('package.json');\n  var cfg = {\n    src: 'src',\n    // Change 'localhost' to '0.0.0.0' to access the server from outside.\n    serverHost: 'localhost',\n    serverPort: 9000,\n    livereload: 35729\n  };  \n\n  //grunt config\n  grunt.initConfig({\n    //======== 配置相关 ========\n    pkg: pkg,\n    cfg: cfg,\n\n    //======== 开发相关 ========\n   //开启服务\n    connect: {\n      options: {\n        port: cfg.serverPort,\n        hostname: cfg.serverHost,\n        middleware: function(connect, options) {\n          return [\n            require('connect-livereload')({\n              port: cfg.livereload\n            }),\n            // Serve static files. \n            //In my environment options.base is a type of Object\n            connect.static(options.base.toString()),\n            // Make empty directories browsable.\n             connect.directory(options.base),\n          ];\n        }\n      },\n      server: {\n        options: {\n          // keepalive: true,\n          base: cfg.src,\n        }\n      }\n    },\n\n    //打开浏览器\n    open: {\n      server: {\n        url: 'http://localhost:' + cfg.serverPort\n      }\n    },\n\n    //监控文件变化\n    watch: {\n      options: {\n        livereload: cfg.livereload,\n      },\n      server: {\n        files: [\n        '<%= cfg.src %>/{,*/}*.html',\n        \"<%= cfg.src %>/css/*.css\",\n        \"<%= cfg.src %>/js/*.js\",\n        \"<%= cfg.src %>/img/*\"\n        ],\n        // tasks: [''],       \n      },\n    }\n  });\n};\n```\n然后执行 `grunt server`，就会在你的浏览器打开这个地址 `http://localhost:9000`。\n\n\n\n~~的撒大声地~~\n  [1]: http://www.hulufei.com/post/grunt-introduction\n  [2]: http://my.oschina.net/liuyong25/blog/140110#OSC_h4_6\n  [3]: http://www.gruntjs.org/article/project_scaffolding.html","source":"_posts/0625-grunt 项目架设.md","raw":"title: grunt 项目架设\ndate: 2014-06-25 11:06:59\ncategories: Grunt\ndescription: Grunt 搭建项目的时候的基本流程，只是自己经验的记录\n---\n\n>参考文章\n[《前端工作流，Grunt上手指南》][1]\n[《Grunt+Livereload 搭建本地前端开发环境》][2]\n\n废话就不多说了，直接开始架设一个grunt控制的项目吧！O(∩_∩)O\n\n##1. 假设你已经安装了nodeJS和用npm全局安装了grunt-cli。\n\n##2. 新建package.json和Gruntfile.js\n先进入项目文件夹的根目录下\n```\n$ mkdir pj\n$ cd pj\n```\n\n###package.json\n\n根据上面的参考文章，直接执行`npm install`会生成一个空的package.js，但是我尝试之后失败了，是版本的问题吗？\n顺便一说，我的版本是\n```\n$ grunt -V \ngrunt-cli v0.1.13\ngrunt v0.4.5\n\n$ npm -v\n1.4.9\n```\n于是从前几篇的grunt笔记里面copy一个现有的`package.json` ，里面写好了要安装的一些常用的grunt项目插件包括grunt本身，大概酱紫。\n```\n{\n  \"name\": \"pj3\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"grunt\": \"^0.4.5\",\n    \"grunt-contrib-concat\": \"^0.4.0\",\n    \"grunt-contrib-jshint\": \"^0.10.0\",\n    \"grunt-contrib-nodeunit\": \"^0.4.1\",\n    \"grunt-contrib-qunit\": \"^0.5.1\",\n    \"grunt-contrib-uglify\": \"^0.5.0\",\n    \"grunt-contrib-watch\": \"^0.6.1\"\n  }\n}\n\n```\n好了，现在执行一下 `npm install`就会自动帮你安装以上列出来的依赖。而且安装好之后根据安装的版本，会更改到你的package.json的文件中。所以我上面的package.json其实是已经安装，并被更改过的了。现在文件结构是\n```\npj/\n|-- node_modules\n`-- package.json\n```\n\n###Gruntfile.js\n\n可以从之前的笔记上或者官网上手动创建，下面介绍用 `grunt-init`安装一些架构的方法。\n1. 全局安装`npm install -g grunt-init`\n2. 克隆要使用的模板,下面是clone到一个创建一个包含QUnit单元测试的jQuery插件的模板，模板更多介绍[在这里][3]\n```\ngit clone https://github.com/gruntjs/grunt-init-jquery.git ~/.grunt-init/jquery\n```\n3. 我用上面的方法clone了一个 `grunt-init-gruntfile` ，然后再执行 \n```    \ngrunt-init  gruntfile\n```\n好了，现在grunt-init已经根据你的package.json的配置，帮你写好一个Gruntfile.js，可以在此模板上根据需要修改下\n\n然后我手贱安装了下 `grunt-init jquery`，假装我要写一个叫jquery.barAnime的插件，于是在执行安装之前，grunt-init细心的询问了我各种问题，然后生成一个 `jquery.barAnime.jquery.json`来记录。=>（可能是我起的名字问题，json名字略奇葩\n\n目录变成酱紫了，欧也\\(^o^)/\n```\npj/\n|-- node_modules/\n|-- libs/\n|-- src/\n|-- test/\n|-- .gitignore\n|-- .jshintrc\n|-- CONTRIBUTING.md\n|-- jquery.barAnime.jquery.json\n|-- LICENSE-MIT\n|-- README.md\n|-- Gruntfile.js\n`-- package.json\n```\n\n生成了一些奇怪的文件，发现里面还有一个`LICENSE-MIT`，小白的我瞬间觉得UP了(⊙o⊙)哦\n\n##3. 执行grunt命令\n根据Gruntfile.js里面的配置，执行 `grunt`命令时，会执行 `default`任务\n```\n grunt.registerTask('default', ['jshint', 'qunit', 'clean', 'concat', 'uglify']);\n```\n我用 `grunt-init jquery` 自动生成的Gruntfile里面主要执行的就是以上几个命令，根目录会多出一个dist文件夹，里面是`concat`合并的 `jquery.barAnime.js` 和 `uglify`压缩的 `jquery.barAnime.min.js`。\n\n##4. 手动建立一个项目，并创建livereload\n\n利用 `grunt watch` 和 `grunt connect` 和 `connect-livereload`的配合就能省去F5与浏览器的livereload插件了，啊哈哈，快点开始吧\n\n参照这个大大的[文章][2]。我重新新建了一个项目，叫做pj4的\n按照上面的步骤，我安装了与上面一样的grunt和grunt插件，为了livereload的实现，还得再安装一些东西\n```\nnpm install --save-dev grunt-contrib-connect connect-livereload grunt-open\n```\n现在的文档目录如下。\n\n```\n    pj4/\n    |-- node_modules/\n    |-- src/\n    |    |-- js/\n    |    |-- css/\n    |    |-- img/\n    |    `-- index.html\n    |-- Gruntfile.js\n    `-- package.json\n```\n下面是特别重要的Gruntfile.js的内容。\n\n```\n/**\n * 自动化脚本定义\n */\nmodule.exports = function (grunt) {\n  'use strict';\n\n  //load all grunt tasks\n  require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n\n  //define tasks\n  grunt.registerTask('server', ['connect:server', 'open:server', 'watch:server']);\n\n  //env cfg\n  var pkg = grunt.file.readJSON('package.json');\n  var cfg = {\n    src: 'src',\n    // Change 'localhost' to '0.0.0.0' to access the server from outside.\n    serverHost: 'localhost',\n    serverPort: 9000,\n    livereload: 35729\n  };  \n\n  //grunt config\n  grunt.initConfig({\n    //======== 配置相关 ========\n    pkg: pkg,\n    cfg: cfg,\n\n    //======== 开发相关 ========\n   //开启服务\n    connect: {\n      options: {\n        port: cfg.serverPort,\n        hostname: cfg.serverHost,\n        middleware: function(connect, options) {\n          return [\n            require('connect-livereload')({\n              port: cfg.livereload\n            }),\n            // Serve static files. \n            //In my environment options.base is a type of Object\n            connect.static(options.base.toString()),\n            // Make empty directories browsable.\n             connect.directory(options.base),\n          ];\n        }\n      },\n      server: {\n        options: {\n          // keepalive: true,\n          base: cfg.src,\n        }\n      }\n    },\n\n    //打开浏览器\n    open: {\n      server: {\n        url: 'http://localhost:' + cfg.serverPort\n      }\n    },\n\n    //监控文件变化\n    watch: {\n      options: {\n        livereload: cfg.livereload,\n      },\n      server: {\n        files: [\n        '<%= cfg.src %>/{,*/}*.html',\n        \"<%= cfg.src %>/css/*.css\",\n        \"<%= cfg.src %>/js/*.js\",\n        \"<%= cfg.src %>/img/*\"\n        ],\n        // tasks: [''],       \n      },\n    }\n  });\n};\n```\n然后执行 `grunt server`，就会在你的浏览器打开这个地址 `http://localhost:9000`。\n\n\n\n~~的撒大声地~~\n  [1]: http://www.hulufei.com/post/grunt-introduction\n  [2]: http://my.oschina.net/liuyong25/blog/140110#OSC_h4_6\n  [3]: http://www.gruntjs.org/article/project_scaffolding.html","slug":"0625-grunt 项目架设","published":1,"updated":"2015-02-13T06:19:23.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpgz000iok1vxpq2fvzy","content":"<blockquote>\n<p>参考文章<br><a href=\"http://www.hulufei.com/post/grunt-introduction\" target=\"_blank\" rel=\"external\">《前端工作流，Grunt上手指南》</a><br><a href=\"http://my.oschina.net/liuyong25/blog/140110#OSC_h4_6\" target=\"_blank\" rel=\"external\">《Grunt+Livereload 搭建本地前端开发环境》</a></p>\n</blockquote>\n<p>废话就不多说了，直接开始架设一个grunt控制的项目吧！O(∩_∩)O</p>\n<p>##1. 假设你已经安装了nodeJS和用npm全局安装了grunt-cli。</p>\n<p>##2. 新建package.json和Gruntfile.js<br>先进入项目文件夹的根目录下</p>\n<pre><code>$ mkdir pj\n$ cd pj\n</code></pre><p>###package.json</p>\n<p>根据上面的参考文章，直接执行<code>npm install</code>会生成一个空的package.js，但是我尝试之后失败了，是版本的问题吗？<br>顺便一说，我的版本是</p>\n<pre><code>$ grunt -V \ngrunt-cli v0.1.13\ngrunt v0.4.5\n\n$ npm -v\n1.4.9\n</code></pre><p>于是从前几篇的grunt笔记里面copy一个现有的<code>package.json</code> ，里面写好了要安装的一些常用的grunt项目插件包括grunt本身，大概酱紫。</p>\n<pre><code>{\n  &quot;name&quot;: &quot;pj3&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;grunt&quot;: &quot;^0.4.5&quot;,\n    &quot;grunt-contrib-concat&quot;: &quot;^0.4.0&quot;,\n    &quot;grunt-contrib-jshint&quot;: &quot;^0.10.0&quot;,\n    &quot;grunt-contrib-nodeunit&quot;: &quot;^0.4.1&quot;,\n    &quot;grunt-contrib-qunit&quot;: &quot;^0.5.1&quot;,\n    &quot;grunt-contrib-uglify&quot;: &quot;^0.5.0&quot;,\n    &quot;grunt-contrib-watch&quot;: &quot;^0.6.1&quot;\n  }\n}\n</code></pre><p>好了，现在执行一下 <code>npm install</code>就会自动帮你安装以上列出来的依赖。而且安装好之后根据安装的版本，会更改到你的package.json的文件中。所以我上面的package.json其实是已经安装，并被更改过的了。现在文件结构是</p>\n<pre><code>pj/\n|-- node_modules\n`-- package.json\n</code></pre><p>###Gruntfile.js</p>\n<p>可以从之前的笔记上或者官网上手动创建，下面介绍用 <code>grunt-init</code>安装一些架构的方法。</p>\n<ol>\n<li>全局安装<code>npm install -g grunt-init</code></li>\n<li>克隆要使用的模板,下面是clone到一个创建一个包含QUnit单元测试的jQuery插件的模板，模板更多介绍<a href=\"http://www.gruntjs.org/article/project_scaffolding.html\" target=\"_blank\" rel=\"external\">在这里</a><pre><code>git clone https://github.com/gruntjs/grunt-init-jquery.git ~/.grunt-init/jquery\n</code></pre></li>\n<li>我用上面的方法clone了一个 <code>grunt-init-gruntfile</code> ，然后再执行 <pre><code>grunt-init  gruntfile\n</code></pre>好了，现在grunt-init已经根据你的package.json的配置，帮你写好一个Gruntfile.js，可以在此模板上根据需要修改下</li>\n</ol>\n<p>然后我手贱安装了下 <code>grunt-init jquery</code>，假装我要写一个叫jquery.barAnime的插件，于是在执行安装之前，grunt-init细心的询问了我各种问题，然后生成一个 <code>jquery.barAnime.jquery.json</code>来记录。=&gt;（可能是我起的名字问题，json名字略奇葩</p>\n<p>目录变成酱紫了，欧也(^o^)/</p>\n<pre><code>pj/\n|-- node_modules/\n|-- libs/\n|-- src/\n|-- test/\n|-- .gitignore\n|-- .jshintrc\n|-- CONTRIBUTING.md\n|-- jquery.barAnime.jquery.json\n|-- LICENSE-MIT\n|-- README.md\n|-- Gruntfile.js\n`-- package.json\n</code></pre><p>生成了一些奇怪的文件，发现里面还有一个<code>LICENSE-MIT</code>，小白的我瞬间觉得UP了(⊙o⊙)哦</p>\n<p>##3. 执行grunt命令<br>根据Gruntfile.js里面的配置，执行 <code>grunt</code>命令时，会执行 <code>default</code>任务</p>\n<pre><code> grunt.registerTask(&#39;default&#39;, [&#39;jshint&#39;, &#39;qunit&#39;, &#39;clean&#39;, &#39;concat&#39;, &#39;uglify&#39;]);\n</code></pre><p>我用 <code>grunt-init jquery</code> 自动生成的Gruntfile里面主要执行的就是以上几个命令，根目录会多出一个dist文件夹，里面是<code>concat</code>合并的 <code>jquery.barAnime.js</code> 和 <code>uglify</code>压缩的 <code>jquery.barAnime.min.js</code>。</p>\n<p>##4. 手动建立一个项目，并创建livereload</p>\n<p>利用 <code>grunt watch</code> 和 <code>grunt connect</code> 和 <code>connect-livereload</code>的配合就能省去F5与浏览器的livereload插件了，啊哈哈，快点开始吧</p>\n<p>参照这个大大的<a href=\"http://my.oschina.net/liuyong25/blog/140110#OSC_h4_6\" target=\"_blank\" rel=\"external\">文章</a>。我重新新建了一个项目，叫做pj4的<br>按照上面的步骤，我安装了与上面一样的grunt和grunt插件，为了livereload的实现，还得再安装一些东西</p>\n<pre><code>npm install --save-dev grunt-contrib-connect connect-livereload grunt-open\n</code></pre><p>现在的文档目录如下。</p>\n<pre><code>    pj4/\n    |-- node_modules/\n    |-- src/\n    |    |-- js/\n    |    |-- css/\n    |    |-- img/\n    |    `-- index.html\n    |-- Gruntfile.js\n    `-- package.json\n</code></pre><p>下面是特别重要的Gruntfile.js的内容。</p>\n<pre><code>/**\n * 自动化脚本定义\n */\nmodule.exports = function (grunt) {\n  &#39;use strict&#39;;\n\n  //load all grunt tasks\n  require(&#39;matchdep&#39;).filterDev(&#39;grunt-*&#39;).forEach(grunt.loadNpmTasks);\n\n  //define tasks\n  grunt.registerTask(&#39;server&#39;, [&#39;connect:server&#39;, &#39;open:server&#39;, &#39;watch:server&#39;]);\n\n  //env cfg\n  var pkg = grunt.file.readJSON(&#39;package.json&#39;);\n  var cfg = {\n    src: &#39;src&#39;,\n    // Change &#39;localhost&#39; to &#39;0.0.0.0&#39; to access the server from outside.\n    serverHost: &#39;localhost&#39;,\n    serverPort: 9000,\n    livereload: 35729\n  };  \n\n  //grunt config\n  grunt.initConfig({\n    //======== 配置相关 ========\n    pkg: pkg,\n    cfg: cfg,\n\n    //======== 开发相关 ========\n   //开启服务\n    connect: {\n      options: {\n        port: cfg.serverPort,\n        hostname: cfg.serverHost,\n        middleware: function(connect, options) {\n          return [\n            require(&#39;connect-livereload&#39;)({\n              port: cfg.livereload\n            }),\n            // Serve static files. \n            //In my environment options.base is a type of Object\n            connect.static(options.base.toString()),\n            // Make empty directories browsable.\n             connect.directory(options.base),\n          ];\n        }\n      },\n      server: {\n        options: {\n          // keepalive: true,\n          base: cfg.src,\n        }\n      }\n    },\n\n    //打开浏览器\n    open: {\n      server: {\n        url: &#39;http://localhost:&#39; + cfg.serverPort\n      }\n    },\n\n    //监控文件变化\n    watch: {\n      options: {\n        livereload: cfg.livereload,\n      },\n      server: {\n        files: [\n        &#39;&lt;%= cfg.src %&gt;/{,*/}*.html&#39;,\n        &quot;&lt;%= cfg.src %&gt;/css/*.css&quot;,\n        &quot;&lt;%= cfg.src %&gt;/js/*.js&quot;,\n        &quot;&lt;%= cfg.src %&gt;/img/*&quot;\n        ],\n        // tasks: [&#39;&#39;],       \n      },\n    }\n  });\n};\n</code></pre><p>然后执行 <code>grunt server</code>，就会在你的浏览器打开这个地址 <code>http://localhost:9000</code>。</p>\n<p><del>的撒大声地</del></p>\n","excerpt":"","more":"<blockquote>\n<p>参考文章<br><a href=\"http://www.hulufei.com/post/grunt-introduction\">《前端工作流，Grunt上手指南》</a><br><a href=\"http://my.oschina.net/liuyong25/blog/140110#OSC_h4_6\">《Grunt+Livereload 搭建本地前端开发环境》</a></p>\n</blockquote>\n<p>废话就不多说了，直接开始架设一个grunt控制的项目吧！O(∩_∩)O</p>\n<p>##1. 假设你已经安装了nodeJS和用npm全局安装了grunt-cli。</p>\n<p>##2. 新建package.json和Gruntfile.js<br>先进入项目文件夹的根目录下</p>\n<pre><code>$ mkdir pj\n$ cd pj\n</code></pre><p>###package.json</p>\n<p>根据上面的参考文章，直接执行<code>npm install</code>会生成一个空的package.js，但是我尝试之后失败了，是版本的问题吗？<br>顺便一说，我的版本是</p>\n<pre><code>$ grunt -V \ngrunt-cli v0.1.13\ngrunt v0.4.5\n\n$ npm -v\n1.4.9\n</code></pre><p>于是从前几篇的grunt笔记里面copy一个现有的<code>package.json</code> ，里面写好了要安装的一些常用的grunt项目插件包括grunt本身，大概酱紫。</p>\n<pre><code>{\n  &quot;name&quot;: &quot;pj3&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;grunt&quot;: &quot;^0.4.5&quot;,\n    &quot;grunt-contrib-concat&quot;: &quot;^0.4.0&quot;,\n    &quot;grunt-contrib-jshint&quot;: &quot;^0.10.0&quot;,\n    &quot;grunt-contrib-nodeunit&quot;: &quot;^0.4.1&quot;,\n    &quot;grunt-contrib-qunit&quot;: &quot;^0.5.1&quot;,\n    &quot;grunt-contrib-uglify&quot;: &quot;^0.5.0&quot;,\n    &quot;grunt-contrib-watch&quot;: &quot;^0.6.1&quot;\n  }\n}\n</code></pre><p>好了，现在执行一下 <code>npm install</code>就会自动帮你安装以上列出来的依赖。而且安装好之后根据安装的版本，会更改到你的package.json的文件中。所以我上面的package.json其实是已经安装，并被更改过的了。现在文件结构是</p>\n<pre><code>pj/\n|-- node_modules\n`-- package.json\n</code></pre><p>###Gruntfile.js</p>\n<p>可以从之前的笔记上或者官网上手动创建，下面介绍用 <code>grunt-init</code>安装一些架构的方法。</p>\n<ol>\n<li>全局安装<code>npm install -g grunt-init</code></li>\n<li>克隆要使用的模板,下面是clone到一个创建一个包含QUnit单元测试的jQuery插件的模板，模板更多介绍<a href=\"http://www.gruntjs.org/article/project_scaffolding.html\">在这里</a><pre><code>git clone https://github.com/gruntjs/grunt-init-jquery.git ~/.grunt-init/jquery\n</code></pre></li>\n<li>我用上面的方法clone了一个 <code>grunt-init-gruntfile</code> ，然后再执行 <pre><code>grunt-init  gruntfile\n</code></pre>好了，现在grunt-init已经根据你的package.json的配置，帮你写好一个Gruntfile.js，可以在此模板上根据需要修改下</li>\n</ol>\n<p>然后我手贱安装了下 <code>grunt-init jquery</code>，假装我要写一个叫jquery.barAnime的插件，于是在执行安装之前，grunt-init细心的询问了我各种问题，然后生成一个 <code>jquery.barAnime.jquery.json</code>来记录。=&gt;（可能是我起的名字问题，json名字略奇葩</p>\n<p>目录变成酱紫了，欧也(^o^)/</p>\n<pre><code>pj/\n|-- node_modules/\n|-- libs/\n|-- src/\n|-- test/\n|-- .gitignore\n|-- .jshintrc\n|-- CONTRIBUTING.md\n|-- jquery.barAnime.jquery.json\n|-- LICENSE-MIT\n|-- README.md\n|-- Gruntfile.js\n`-- package.json\n</code></pre><p>生成了一些奇怪的文件，发现里面还有一个<code>LICENSE-MIT</code>，小白的我瞬间觉得UP了(⊙o⊙)哦</p>\n<p>##3. 执行grunt命令<br>根据Gruntfile.js里面的配置，执行 <code>grunt</code>命令时，会执行 <code>default</code>任务</p>\n<pre><code> grunt.registerTask(&#39;default&#39;, [&#39;jshint&#39;, &#39;qunit&#39;, &#39;clean&#39;, &#39;concat&#39;, &#39;uglify&#39;]);\n</code></pre><p>我用 <code>grunt-init jquery</code> 自动生成的Gruntfile里面主要执行的就是以上几个命令，根目录会多出一个dist文件夹，里面是<code>concat</code>合并的 <code>jquery.barAnime.js</code> 和 <code>uglify</code>压缩的 <code>jquery.barAnime.min.js</code>。</p>\n<p>##4. 手动建立一个项目，并创建livereload</p>\n<p>利用 <code>grunt watch</code> 和 <code>grunt connect</code> 和 <code>connect-livereload</code>的配合就能省去F5与浏览器的livereload插件了，啊哈哈，快点开始吧</p>\n<p>参照这个大大的<a href=\"http://my.oschina.net/liuyong25/blog/140110#OSC_h4_6\">文章</a>。我重新新建了一个项目，叫做pj4的<br>按照上面的步骤，我安装了与上面一样的grunt和grunt插件，为了livereload的实现，还得再安装一些东西</p>\n<pre><code>npm install --save-dev grunt-contrib-connect connect-livereload grunt-open\n</code></pre><p>现在的文档目录如下。</p>\n<pre><code>    pj4/\n    |-- node_modules/\n    |-- src/\n    |    |-- js/\n    |    |-- css/\n    |    |-- img/\n    |    `-- index.html\n    |-- Gruntfile.js\n    `-- package.json\n</code></pre><p>下面是特别重要的Gruntfile.js的内容。</p>\n<pre><code>/**\n * 自动化脚本定义\n */\nmodule.exports = function (grunt) {\n  &#39;use strict&#39;;\n\n  //load all grunt tasks\n  require(&#39;matchdep&#39;).filterDev(&#39;grunt-*&#39;).forEach(grunt.loadNpmTasks);\n\n  //define tasks\n  grunt.registerTask(&#39;server&#39;, [&#39;connect:server&#39;, &#39;open:server&#39;, &#39;watch:server&#39;]);\n\n  //env cfg\n  var pkg = grunt.file.readJSON(&#39;package.json&#39;);\n  var cfg = {\n    src: &#39;src&#39;,\n    // Change &#39;localhost&#39; to &#39;0.0.0.0&#39; to access the server from outside.\n    serverHost: &#39;localhost&#39;,\n    serverPort: 9000,\n    livereload: 35729\n  };  \n\n  //grunt config\n  grunt.initConfig({\n    //======== 配置相关 ========\n    pkg: pkg,\n    cfg: cfg,\n\n    //======== 开发相关 ========\n   //开启服务\n    connect: {\n      options: {\n        port: cfg.serverPort,\n        hostname: cfg.serverHost,\n        middleware: function(connect, options) {\n          return [\n            require(&#39;connect-livereload&#39;)({\n              port: cfg.livereload\n            }),\n            // Serve static files. \n            //In my environment options.base is a type of Object\n            connect.static(options.base.toString()),\n            // Make empty directories browsable.\n             connect.directory(options.base),\n          ];\n        }\n      },\n      server: {\n        options: {\n          // keepalive: true,\n          base: cfg.src,\n        }\n      }\n    },\n\n    //打开浏览器\n    open: {\n      server: {\n        url: &#39;http://localhost:&#39; + cfg.serverPort\n      }\n    },\n\n    //监控文件变化\n    watch: {\n      options: {\n        livereload: cfg.livereload,\n      },\n      server: {\n        files: [\n        &#39;&lt;%= cfg.src %&gt;/{,*/}*.html&#39;,\n        &quot;&lt;%= cfg.src %&gt;/css/*.css&quot;,\n        &quot;&lt;%= cfg.src %&gt;/js/*.js&quot;,\n        &quot;&lt;%= cfg.src %&gt;/img/*&quot;\n        ],\n        // tasks: [&#39;&#39;],       \n      },\n    }\n  });\n};\n</code></pre><p>然后执行 <code>grunt server</code>，就会在你的浏览器打开这个地址 <code>http://localhost:9000</code>。</p>\n<p><del>的撒大声地</del></p>\n"},{"title":"前端规范与思维导图","date":"2014-06-27T03:06:59.000Z","description":"自己琢磨的前端规范的思维导图","_content":"\n##开始写文档\n今天开始写公司项目前端规范文档，因为之前的项目里面前端文件的管理不是很规范，所以现在整理起来几乎是要重写的节奏啊！~~~\n\n本来准备用DOC写的，一不小心度娘了一下，发现一个写得极其优美的思维导图，顺便挖到了这个网站[mindmeister][1]。这个网站做出来的图很不错，可以导出各种格式，只不过免费的用户就只能导出图片和pdf了。\n\n我飞快的用了一个度娘来的测试VISA号码注册了一个免费的用户（真惭愧）。然后上手写规范。\n\n##思维导图\n\n写出来的内容一经更改，目前的版本是[这样的][2]。\n\n![前端规范][3]\n\n之后还会继续思考更好更详细的代码组织方法。\n\n\n  [1]: http://www.mindmeister.com/?r=140271\n  [2]: http://www.mindmeister.com/428049060/_\n  [3]: http://iamtutu.qiniudn.com/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83.png","source":"_posts/0627-前端规范--思维导图.md","raw":"title: 前端规范与思维导图\ndate: 2014-06-27 11:06:59\ncategories: 规范\ndescription: 自己琢磨的前端规范的思维导图\n---\n\n##开始写文档\n今天开始写公司项目前端规范文档，因为之前的项目里面前端文件的管理不是很规范，所以现在整理起来几乎是要重写的节奏啊！~~~\n\n本来准备用DOC写的，一不小心度娘了一下，发现一个写得极其优美的思维导图，顺便挖到了这个网站[mindmeister][1]。这个网站做出来的图很不错，可以导出各种格式，只不过免费的用户就只能导出图片和pdf了。\n\n我飞快的用了一个度娘来的测试VISA号码注册了一个免费的用户（真惭愧）。然后上手写规范。\n\n##思维导图\n\n写出来的内容一经更改，目前的版本是[这样的][2]。\n\n![前端规范][3]\n\n之后还会继续思考更好更详细的代码组织方法。\n\n\n  [1]: http://www.mindmeister.com/?r=140271\n  [2]: http://www.mindmeister.com/428049060/_\n  [3]: http://iamtutu.qiniudn.com/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83.png","slug":"0627-前端规范--思维导图","published":1,"updated":"2015-02-13T06:19:57.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugph0000jok1vpml33u6c","content":"<p>##开始写文档<br>今天开始写公司项目前端规范文档，因为之前的项目里面前端文件的管理不是很规范，所以现在整理起来几乎是要重写的节奏啊！~~~</p>\n<p>本来准备用DOC写的，一不小心度娘了一下，发现一个写得极其优美的思维导图，顺便挖到了这个网站<a href=\"http://www.mindmeister.com/?r=140271\" target=\"_blank\" rel=\"external\">mindmeister</a>。这个网站做出来的图很不错，可以导出各种格式，只不过免费的用户就只能导出图片和pdf了。</p>\n<p>我飞快的用了一个度娘来的测试VISA号码注册了一个免费的用户（真惭愧）。然后上手写规范。</p>\n<p>##思维导图</p>\n<p>写出来的内容一经更改，目前的版本是<a href=\"http://www.mindmeister.com/428049060/_\" target=\"_blank\" rel=\"external\">这样的</a>。</p>\n<p><img src=\"http://iamtutu.qiniudn.com/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83.png\" alt=\"前端规范\"></p>\n<p>之后还会继续思考更好更详细的代码组织方法。</p>\n","excerpt":"","more":"<p>##开始写文档<br>今天开始写公司项目前端规范文档，因为之前的项目里面前端文件的管理不是很规范，所以现在整理起来几乎是要重写的节奏啊！~~~</p>\n<p>本来准备用DOC写的，一不小心度娘了一下，发现一个写得极其优美的思维导图，顺便挖到了这个网站<a href=\"http://www.mindmeister.com/?r=140271\">mindmeister</a>。这个网站做出来的图很不错，可以导出各种格式，只不过免费的用户就只能导出图片和pdf了。</p>\n<p>我飞快的用了一个度娘来的测试VISA号码注册了一个免费的用户（真惭愧）。然后上手写规范。</p>\n<p>##思维导图</p>\n<p>写出来的内容一经更改，目前的版本是<a href=\"http://www.mindmeister.com/428049060/_\">这样的</a>。</p>\n<p><img src=\"http://iamtutu.qiniudn.com/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83.png\" alt=\"前端规范\"></p>\n<p>之后还会继续思考更好更详细的代码组织方法。</p>\n"},{"title":"SVG 图表","date":"2014-08-12T03:06:59.000Z","description":"SVG 信息化图表什么的。。。。","_content":"\n\n参考文章：[SVG Infographic][1]\n\n## SVG 信息化图表\n\n最喜欢扁平的动画了，不多说了，直接开始做吧O(∩_∩)O~~\n\n### 1、\n\n\n\n\n  [1]: http://designmodo.com/svg-infographic/","source":"_posts/0812-SVG 信息图表——实例流程介绍.md","raw":"title: SVG 图表\ndate: 2014-08-12 11:06:59\ncategories: svg\ndescription: SVG 信息化图表什么的。。。。\n---\n\n\n参考文章：[SVG Infographic][1]\n\n## SVG 信息化图表\n\n最喜欢扁平的动画了，不多说了，直接开始做吧O(∩_∩)O~~\n\n### 1、\n\n\n\n\n  [1]: http://designmodo.com/svg-infographic/","slug":"0812-SVG 信息图表——实例流程介绍","published":1,"updated":"2015-02-13T06:20:18.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugph2000mok1v801ydckf","content":"<p>参考文章：<a href=\"http://designmodo.com/svg-infographic/\" target=\"_blank\" rel=\"external\">SVG Infographic</a></p>\n<h2 id=\"SVG-信息化图表\"><a href=\"#SVG-信息化图表\" class=\"headerlink\" title=\"SVG 信息化图表\"></a>SVG 信息化图表</h2><p>最喜欢扁平的动画了，不多说了，直接开始做吧O(∩_∩)O~~</p>\n<h3 id=\"1、\"><a href=\"#1、\" class=\"headerlink\" title=\"1、\"></a>1、</h3>","excerpt":"","more":"<p>参考文章：<a href=\"http://designmodo.com/svg-infographic/\">SVG Infographic</a></p>\n<h2 id=\"SVG-信息化图表\"><a href=\"#SVG-信息化图表\" class=\"headerlink\" title=\"SVG 信息化图表\"></a>SVG 信息化图表</h2><p>最喜欢扁平的动画了，不多说了，直接开始做吧O(∩_∩)O~~</p>\n<h3 id=\"1、\"><a href=\"#1、\" class=\"headerlink\" title=\"1、\"></a>1、</h3>"},{"title":"SVG Patterns","date":"2014-08-25T03:38:38.000Z","description":"svg pattern 的用法","_content":"\n参考文章：[《How to Use SVG Patterns》][1]\nSVG的基础语法和属性选项：[Tips for Creating Accessible SVG][3]\n\nSVG Patterns是用图案填充SVG图形的一种方式，一些简单的组合就可以做出非常炫的效果。\n\n\n## SVG基础\n\n本文集中讨论的浏览器和设备对象为：nternet Explorer 11, Firefox 28 and Chrome 30 on Windows, with Jaws 15 and NVDA 2014.1. Safari 6 on iOS/OSX with VoiceOver, and Chrome 30 on Android with TalkBack。\n\n在HTML5 doctype声明下，SVG标签使用时不用包括命名空间的声明。像下面这样\n```\n<svg version=\"1.1\" width=\"300\" height=\"200\">\n    <title>Green rectangle</title>\n    <rect width=\"75\" height=\"50\" rx=\"20\" ry=\"20\" fill=\"#90ee90\" stroke=\"#228b22\" stroke-fill=\"1\" />\n</svg>\n```\n\n### ARIA 属性\n\n讲ARIA的属性加入到HTML元素中，可以让浏览器更新信息。他对各种浏览器和屏幕阅读器都有很好的支持，所以他可以帮助有阅读障碍的人士更好的浏览网页。\n\n在SVG里加上aria-labelledby属性的话，可以加强`<SVG>`和他的子元素的联系。\n\n```\n<svg version=\"1.1\" width=\"300\" height=\"200\" aria-labelledby=\"title\">\n    <title id=\"title\">Green rectangle</title>\n    <rect width=\"75\" height=\"50\" rx=\"20\" ry=\"20\" fill=\"#90ee90\" stroke=\"#228b22\" stroke-fill=\"1\" />\n</svg>\n```\n其他的还有一些属性集合起来，可以写成下面这样\n```\n<svg version=\"1.1\" width=\"300\" height=\"200\" aria-labelledby=\"title desc\">\n    <title id=\"title\">Green rectangle</title>\n    <desc id=\"desc\">A light green rectangle with rounded corners and a dark green border.</desc>\n    <a xlink:href=\"http://example.com\">\n    <rect width=\"75\" height=\"50\" rx=\"20\" ry=\"20\" fill=\"#90ee90\" stroke=\"#228b22\" stroke-fill=\"1\" />\n    <text x=\"35\" y=\"30\" font-size=\"1em\" text-anchor=\"middle\" fill=\"#000000\">Website</text>\n    </a>\n</svg>\n```\n\n### Make it focusable\n\n如果你的SVG是可交互的，必须确保他有一个元素可以让键盘focus。所以这里在SVG里面加上了`<a>`元素，用户可以使用Tab键通过link来focus到SVG上。\n\n##Fill Patterns\n\n先看看简单的SVG patterns的语法。\n\n<p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"bBxLe\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/bBxLe/'>SVG pattern -- 1 </a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n`<svg>` 元素可以包含一个 `<defs>` 元素，`<defs>` 定义的图案不会立即显示，直到当我们用他的ID引用到 `stroke` 或 `fill` 属性时，才会显示。\n\n###patterns attributes\n\n下面是使用patterns时的一些重要的属性介绍。\n\n####ID\n\n `<pattern>` 中有唯一的 `id` 属性。可以让svg的shapes或text引用到他们的fill或stroke属性中。\n\n####x,y, width, height\n\n`<pattern>` 中的 x 和 y 属性定义了 pattern 图案在 svg 中开始填充的坐标距离。width 和 height 则是填充图案的外框的大小。\n\n这里坐标系的选择取决于 `patternUnit` 和 `patternContentUnits` 两个属性的值。\n\n#### patternUnits\n\n`patternUnits = \"userSpaceOnUse | objectBoundingBox\"`。\n\n他们是应用于x, y, width和 height 的两种坐标系。默认采用objectBoundingBox。引用W3C的原话。\n\n> If patternUnits=\"userSpaceOnUse\", ‘x’, ‘y’, ‘width’ and ‘height’ represent values in the coordinate system that results from taking the current user coordinate system in place at the time when the ‘pattern’ element is referenced (i.e., the user coordinate system for the element referencing the ‘pattern’ element via a ‘fill’ or ‘stroke’ property) and then applying the transform specified by attribute ‘patternTransform’.\n\n > If patternUnits=\"objectBoundingBox\", the user coordinate system for attributes ‘x’, ‘y’, ‘width’ and ‘height’ is established using the bounding box of the element to which the pattern is applied (see Object bounding box units) and then applying the transform specified by attribute ‘patternTransform’.\nIf attribute ‘patternUnits’ is not specified, then the effect is as if a value of 'objectBoundingBox' were specified.\n\n从现象看，`userSpaceOnUse` 使用的width和height是按绝对坐标系计算的像素值，他参考的坐标系和svg图形使用的是同一个，即他的坐标原点在svg父元素的左上角。\n\n而 `objectBoundingBox` 的width和height是百分比值，填充图案的大小会随着svg的伸缩而伸缩。\n\n上面还提到一个`patternTransform` 的属性，可以做坐标变换用的？？\n\n<p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"wpekH\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/wpekH/'>wpekH</a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n#### patternContentUnits\n\n和 `patternUnits` 一样可以选两个值，但是默认值为 `userSpaceOnUse` 。\n\n###Nested Patterns\n\n可以用一个填充填充另一个填充。来看看这个填充填充的填充的栗子。\n\n###Paths as Patterns\n\n<p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"uvBaA\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/uvBaA/'>SVG patterns</a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n  [1]: http://designmodo.com/svg-patterns/\n  [2]: http://designmodo.com/svg-infographic/\n  [3]: http://www.sitepoint.com/tips-accessible-svg/","source":"_posts/0812-svg pattern.md","raw":"title: SVG Patterns\ndate: 2014-08-25 11:38:38\ncategories: svg\ndescription: svg pattern 的用法\n---\n\n参考文章：[《How to Use SVG Patterns》][1]\nSVG的基础语法和属性选项：[Tips for Creating Accessible SVG][3]\n\nSVG Patterns是用图案填充SVG图形的一种方式，一些简单的组合就可以做出非常炫的效果。\n\n\n## SVG基础\n\n本文集中讨论的浏览器和设备对象为：nternet Explorer 11, Firefox 28 and Chrome 30 on Windows, with Jaws 15 and NVDA 2014.1. Safari 6 on iOS/OSX with VoiceOver, and Chrome 30 on Android with TalkBack。\n\n在HTML5 doctype声明下，SVG标签使用时不用包括命名空间的声明。像下面这样\n```\n<svg version=\"1.1\" width=\"300\" height=\"200\">\n    <title>Green rectangle</title>\n    <rect width=\"75\" height=\"50\" rx=\"20\" ry=\"20\" fill=\"#90ee90\" stroke=\"#228b22\" stroke-fill=\"1\" />\n</svg>\n```\n\n### ARIA 属性\n\n讲ARIA的属性加入到HTML元素中，可以让浏览器更新信息。他对各种浏览器和屏幕阅读器都有很好的支持，所以他可以帮助有阅读障碍的人士更好的浏览网页。\n\n在SVG里加上aria-labelledby属性的话，可以加强`<SVG>`和他的子元素的联系。\n\n```\n<svg version=\"1.1\" width=\"300\" height=\"200\" aria-labelledby=\"title\">\n    <title id=\"title\">Green rectangle</title>\n    <rect width=\"75\" height=\"50\" rx=\"20\" ry=\"20\" fill=\"#90ee90\" stroke=\"#228b22\" stroke-fill=\"1\" />\n</svg>\n```\n其他的还有一些属性集合起来，可以写成下面这样\n```\n<svg version=\"1.1\" width=\"300\" height=\"200\" aria-labelledby=\"title desc\">\n    <title id=\"title\">Green rectangle</title>\n    <desc id=\"desc\">A light green rectangle with rounded corners and a dark green border.</desc>\n    <a xlink:href=\"http://example.com\">\n    <rect width=\"75\" height=\"50\" rx=\"20\" ry=\"20\" fill=\"#90ee90\" stroke=\"#228b22\" stroke-fill=\"1\" />\n    <text x=\"35\" y=\"30\" font-size=\"1em\" text-anchor=\"middle\" fill=\"#000000\">Website</text>\n    </a>\n</svg>\n```\n\n### Make it focusable\n\n如果你的SVG是可交互的，必须确保他有一个元素可以让键盘focus。所以这里在SVG里面加上了`<a>`元素，用户可以使用Tab键通过link来focus到SVG上。\n\n##Fill Patterns\n\n先看看简单的SVG patterns的语法。\n\n<p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"bBxLe\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/bBxLe/'>SVG pattern -- 1 </a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n`<svg>` 元素可以包含一个 `<defs>` 元素，`<defs>` 定义的图案不会立即显示，直到当我们用他的ID引用到 `stroke` 或 `fill` 属性时，才会显示。\n\n###patterns attributes\n\n下面是使用patterns时的一些重要的属性介绍。\n\n####ID\n\n `<pattern>` 中有唯一的 `id` 属性。可以让svg的shapes或text引用到他们的fill或stroke属性中。\n\n####x,y, width, height\n\n`<pattern>` 中的 x 和 y 属性定义了 pattern 图案在 svg 中开始填充的坐标距离。width 和 height 则是填充图案的外框的大小。\n\n这里坐标系的选择取决于 `patternUnit` 和 `patternContentUnits` 两个属性的值。\n\n#### patternUnits\n\n`patternUnits = \"userSpaceOnUse | objectBoundingBox\"`。\n\n他们是应用于x, y, width和 height 的两种坐标系。默认采用objectBoundingBox。引用W3C的原话。\n\n> If patternUnits=\"userSpaceOnUse\", ‘x’, ‘y’, ‘width’ and ‘height’ represent values in the coordinate system that results from taking the current user coordinate system in place at the time when the ‘pattern’ element is referenced (i.e., the user coordinate system for the element referencing the ‘pattern’ element via a ‘fill’ or ‘stroke’ property) and then applying the transform specified by attribute ‘patternTransform’.\n\n > If patternUnits=\"objectBoundingBox\", the user coordinate system for attributes ‘x’, ‘y’, ‘width’ and ‘height’ is established using the bounding box of the element to which the pattern is applied (see Object bounding box units) and then applying the transform specified by attribute ‘patternTransform’.\nIf attribute ‘patternUnits’ is not specified, then the effect is as if a value of 'objectBoundingBox' were specified.\n\n从现象看，`userSpaceOnUse` 使用的width和height是按绝对坐标系计算的像素值，他参考的坐标系和svg图形使用的是同一个，即他的坐标原点在svg父元素的左上角。\n\n而 `objectBoundingBox` 的width和height是百分比值，填充图案的大小会随着svg的伸缩而伸缩。\n\n上面还提到一个`patternTransform` 的属性，可以做坐标变换用的？？\n\n<p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"wpekH\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/wpekH/'>wpekH</a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n#### patternContentUnits\n\n和 `patternUnits` 一样可以选两个值，但是默认值为 `userSpaceOnUse` 。\n\n###Nested Patterns\n\n可以用一个填充填充另一个填充。来看看这个填充填充的填充的栗子。\n\n###Paths as Patterns\n\n<p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"uvBaA\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/uvBaA/'>SVG patterns</a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n  [1]: http://designmodo.com/svg-patterns/\n  [2]: http://designmodo.com/svg-infographic/\n  [3]: http://www.sitepoint.com/tips-accessible-svg/","slug":"0812-svg pattern","published":1,"updated":"2015-02-13T06:41:46.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugph3000nok1vnjxc8z42","content":"<p>参考文章：<a href=\"http://designmodo.com/svg-patterns/\" target=\"_blank\" rel=\"external\">《How to Use SVG Patterns》</a><br>SVG的基础语法和属性选项：<a href=\"http://www.sitepoint.com/tips-accessible-svg/\" target=\"_blank\" rel=\"external\">Tips for Creating Accessible SVG</a></p>\n<p>SVG Patterns是用图案填充SVG图形的一种方式，一些简单的组合就可以做出非常炫的效果。</p>\n<h2 id=\"SVG基础\"><a href=\"#SVG基础\" class=\"headerlink\" title=\"SVG基础\"></a>SVG基础</h2><p>本文集中讨论的浏览器和设备对象为：nternet Explorer 11, Firefox 28 and Chrome 30 on Windows, with Jaws 15 and NVDA 2014.1. Safari 6 on iOS/OSX with VoiceOver, and Chrome 30 on Android with TalkBack。</p>\n<p>在HTML5 doctype声明下，SVG标签使用时不用包括命名空间的声明。像下面这样</p>\n<pre><code>&lt;svg version=&quot;1.1&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;\n    &lt;title&gt;Green rectangle&lt;/title&gt;\n    &lt;rect width=&quot;75&quot; height=&quot;50&quot; rx=&quot;20&quot; ry=&quot;20&quot; fill=&quot;#90ee90&quot; stroke=&quot;#228b22&quot; stroke-fill=&quot;1&quot; /&gt;\n&lt;/svg&gt;\n</code></pre><h3 id=\"ARIA-属性\"><a href=\"#ARIA-属性\" class=\"headerlink\" title=\"ARIA 属性\"></a>ARIA 属性</h3><p>讲ARIA的属性加入到HTML元素中，可以让浏览器更新信息。他对各种浏览器和屏幕阅读器都有很好的支持，所以他可以帮助有阅读障碍的人士更好的浏览网页。</p>\n<p>在SVG里加上aria-labelledby属性的话，可以加强<code>&lt;SVG&gt;</code>和他的子元素的联系。</p>\n<pre><code>&lt;svg version=&quot;1.1&quot; width=&quot;300&quot; height=&quot;200&quot; aria-labelledby=&quot;title&quot;&gt;\n    &lt;title id=&quot;title&quot;&gt;Green rectangle&lt;/title&gt;\n    &lt;rect width=&quot;75&quot; height=&quot;50&quot; rx=&quot;20&quot; ry=&quot;20&quot; fill=&quot;#90ee90&quot; stroke=&quot;#228b22&quot; stroke-fill=&quot;1&quot; /&gt;\n&lt;/svg&gt;\n</code></pre><p>其他的还有一些属性集合起来，可以写成下面这样</p>\n<pre><code>&lt;svg version=&quot;1.1&quot; width=&quot;300&quot; height=&quot;200&quot; aria-labelledby=&quot;title desc&quot;&gt;\n    &lt;title id=&quot;title&quot;&gt;Green rectangle&lt;/title&gt;\n    &lt;desc id=&quot;desc&quot;&gt;A light green rectangle with rounded corners and a dark green border.&lt;/desc&gt;\n    &lt;a xlink:href=&quot;http://example.com&quot;&gt;\n    &lt;rect width=&quot;75&quot; height=&quot;50&quot; rx=&quot;20&quot; ry=&quot;20&quot; fill=&quot;#90ee90&quot; stroke=&quot;#228b22&quot; stroke-fill=&quot;1&quot; /&gt;\n    &lt;text x=&quot;35&quot; y=&quot;30&quot; font-size=&quot;1em&quot; text-anchor=&quot;middle&quot; fill=&quot;#000000&quot;&gt;Website&lt;/text&gt;\n    &lt;/a&gt;\n&lt;/svg&gt;\n</code></pre><h3 id=\"Make-it-focusable\"><a href=\"#Make-it-focusable\" class=\"headerlink\" title=\"Make it focusable\"></a>Make it focusable</h3><p>如果你的SVG是可交互的，必须确保他有一个元素可以让键盘focus。所以这里在SVG里面加上了<code>&lt;a&gt;</code>元素，用户可以使用Tab键通过link来focus到SVG上。</p>\n<p>##Fill Patterns</p>\n<p>先看看简单的SVG patterns的语法。</p>\n<p></p><p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"bBxLe\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/asjmtz/pen/bBxLe/\" target=\"_blank\" rel=\"external\">SVG pattern – 1 </a> by asjmtz (<a href=\"http://codepen.io/asjmtz\" target=\"_blank\" rel=\"external\">@asjmtz</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n<p><code>&lt;svg&gt;</code> 元素可以包含一个 <code>&lt;defs&gt;</code> 元素，<code>&lt;defs&gt;</code> 定义的图案不会立即显示，直到当我们用他的ID引用到 <code>stroke</code> 或 <code>fill</code> 属性时，才会显示。</p>\n<p>###patterns attributes</p>\n<p>下面是使用patterns时的一些重要的属性介绍。</p>\n<p>####ID</p>\n<p> <code>&lt;pattern&gt;</code> 中有唯一的 <code>id</code> 属性。可以让svg的shapes或text引用到他们的fill或stroke属性中。</p>\n<p>####x,y, width, height</p>\n<p><code>&lt;pattern&gt;</code> 中的 x 和 y 属性定义了 pattern 图案在 svg 中开始填充的坐标距离。width 和 height 则是填充图案的外框的大小。</p>\n<p>这里坐标系的选择取决于 <code>patternUnit</code> 和 <code>patternContentUnits</code> 两个属性的值。</p>\n<h4 id=\"patternUnits\"><a href=\"#patternUnits\" class=\"headerlink\" title=\"patternUnits\"></a>patternUnits</h4><p><code>patternUnits = &quot;userSpaceOnUse | objectBoundingBox&quot;</code>。</p>\n<p>他们是应用于x, y, width和 height 的两种坐标系。默认采用objectBoundingBox。引用W3C的原话。</p>\n<blockquote>\n<p>If patternUnits=”userSpaceOnUse”, ‘x’, ‘y’, ‘width’ and ‘height’ represent values in the coordinate system that results from taking the current user coordinate system in place at the time when the ‘pattern’ element is referenced (i.e., the user coordinate system for the element referencing the ‘pattern’ element via a ‘fill’ or ‘stroke’ property) and then applying the transform specified by attribute ‘patternTransform’.</p>\n<p>If patternUnits=”objectBoundingBox”, the user coordinate system for attributes ‘x’, ‘y’, ‘width’ and ‘height’ is established using the bounding box of the element to which the pattern is applied (see Object bounding box units) and then applying the transform specified by attribute ‘patternTransform’.<br>If attribute ‘patternUnits’ is not specified, then the effect is as if a value of ‘objectBoundingBox’ were specified.</p>\n</blockquote>\n<p>从现象看，<code>userSpaceOnUse</code> 使用的width和height是按绝对坐标系计算的像素值，他参考的坐标系和svg图形使用的是同一个，即他的坐标原点在svg父元素的左上角。</p>\n<p>而 <code>objectBoundingBox</code> 的width和height是百分比值，填充图案的大小会随着svg的伸缩而伸缩。</p>\n<p>上面还提到一个<code>patternTransform</code> 的属性，可以做坐标变换用的？？</p>\n<p></p><p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"wpekH\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/asjmtz/pen/wpekH/\" target=\"_blank\" rel=\"external\">wpekH</a> by asjmtz (<a href=\"http://codepen.io/asjmtz\" target=\"_blank\" rel=\"external\">@asjmtz</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n<h4 id=\"patternContentUnits\"><a href=\"#patternContentUnits\" class=\"headerlink\" title=\"patternContentUnits\"></a>patternContentUnits</h4><p>和 <code>patternUnits</code> 一样可以选两个值，但是默认值为 <code>userSpaceOnUse</code> 。</p>\n<p>###Nested Patterns</p>\n<p>可以用一个填充填充另一个填充。来看看这个填充填充的填充的栗子。</p>\n<p>###Paths as Patterns</p>\n<p></p><p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"uvBaA\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/asjmtz/pen/uvBaA/\" target=\"_blank\" rel=\"external\">SVG patterns</a> by asjmtz (<a href=\"http://codepen.io/asjmtz\" target=\"_blank\" rel=\"external\">@asjmtz</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n","excerpt":"","more":"<p>参考文章：<a href=\"http://designmodo.com/svg-patterns/\">《How to Use SVG Patterns》</a><br>SVG的基础语法和属性选项：<a href=\"http://www.sitepoint.com/tips-accessible-svg/\">Tips for Creating Accessible SVG</a></p>\n<p>SVG Patterns是用图案填充SVG图形的一种方式，一些简单的组合就可以做出非常炫的效果。</p>\n<h2 id=\"SVG基础\"><a href=\"#SVG基础\" class=\"headerlink\" title=\"SVG基础\"></a>SVG基础</h2><p>本文集中讨论的浏览器和设备对象为：nternet Explorer 11, Firefox 28 and Chrome 30 on Windows, with Jaws 15 and NVDA 2014.1. Safari 6 on iOS/OSX with VoiceOver, and Chrome 30 on Android with TalkBack。</p>\n<p>在HTML5 doctype声明下，SVG标签使用时不用包括命名空间的声明。像下面这样</p>\n<pre><code>&lt;svg version=&quot;1.1&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;\n    &lt;title&gt;Green rectangle&lt;/title&gt;\n    &lt;rect width=&quot;75&quot; height=&quot;50&quot; rx=&quot;20&quot; ry=&quot;20&quot; fill=&quot;#90ee90&quot; stroke=&quot;#228b22&quot; stroke-fill=&quot;1&quot; /&gt;\n&lt;/svg&gt;\n</code></pre><h3 id=\"ARIA-属性\"><a href=\"#ARIA-属性\" class=\"headerlink\" title=\"ARIA 属性\"></a>ARIA 属性</h3><p>讲ARIA的属性加入到HTML元素中，可以让浏览器更新信息。他对各种浏览器和屏幕阅读器都有很好的支持，所以他可以帮助有阅读障碍的人士更好的浏览网页。</p>\n<p>在SVG里加上aria-labelledby属性的话，可以加强<code>&lt;SVG&gt;</code>和他的子元素的联系。</p>\n<pre><code>&lt;svg version=&quot;1.1&quot; width=&quot;300&quot; height=&quot;200&quot; aria-labelledby=&quot;title&quot;&gt;\n    &lt;title id=&quot;title&quot;&gt;Green rectangle&lt;/title&gt;\n    &lt;rect width=&quot;75&quot; height=&quot;50&quot; rx=&quot;20&quot; ry=&quot;20&quot; fill=&quot;#90ee90&quot; stroke=&quot;#228b22&quot; stroke-fill=&quot;1&quot; /&gt;\n&lt;/svg&gt;\n</code></pre><p>其他的还有一些属性集合起来，可以写成下面这样</p>\n<pre><code>&lt;svg version=&quot;1.1&quot; width=&quot;300&quot; height=&quot;200&quot; aria-labelledby=&quot;title desc&quot;&gt;\n    &lt;title id=&quot;title&quot;&gt;Green rectangle&lt;/title&gt;\n    &lt;desc id=&quot;desc&quot;&gt;A light green rectangle with rounded corners and a dark green border.&lt;/desc&gt;\n    &lt;a xlink:href=&quot;http://example.com&quot;&gt;\n    &lt;rect width=&quot;75&quot; height=&quot;50&quot; rx=&quot;20&quot; ry=&quot;20&quot; fill=&quot;#90ee90&quot; stroke=&quot;#228b22&quot; stroke-fill=&quot;1&quot; /&gt;\n    &lt;text x=&quot;35&quot; y=&quot;30&quot; font-size=&quot;1em&quot; text-anchor=&quot;middle&quot; fill=&quot;#000000&quot;&gt;Website&lt;/text&gt;\n    &lt;/a&gt;\n&lt;/svg&gt;\n</code></pre><h3 id=\"Make-it-focusable\"><a href=\"#Make-it-focusable\" class=\"headerlink\" title=\"Make it focusable\"></a>Make it focusable</h3><p>如果你的SVG是可交互的，必须确保他有一个元素可以让键盘focus。所以这里在SVG里面加上了<code>&lt;a&gt;</code>元素，用户可以使用Tab键通过link来focus到SVG上。</p>\n<p>##Fill Patterns</p>\n<p>先看看简单的SVG patterns的语法。</p>\n<p><p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"bBxLe\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/bBxLe/'>SVG pattern – 1 </a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n<p><code>&lt;svg&gt;</code> 元素可以包含一个 <code>&lt;defs&gt;</code> 元素，<code>&lt;defs&gt;</code> 定义的图案不会立即显示，直到当我们用他的ID引用到 <code>stroke</code> 或 <code>fill</code> 属性时，才会显示。</p>\n<p>###patterns attributes</p>\n<p>下面是使用patterns时的一些重要的属性介绍。</p>\n<p>####ID</p>\n<p> <code>&lt;pattern&gt;</code> 中有唯一的 <code>id</code> 属性。可以让svg的shapes或text引用到他们的fill或stroke属性中。</p>\n<p>####x,y, width, height</p>\n<p><code>&lt;pattern&gt;</code> 中的 x 和 y 属性定义了 pattern 图案在 svg 中开始填充的坐标距离。width 和 height 则是填充图案的外框的大小。</p>\n<p>这里坐标系的选择取决于 <code>patternUnit</code> 和 <code>patternContentUnits</code> 两个属性的值。</p>\n<h4 id=\"patternUnits\"><a href=\"#patternUnits\" class=\"headerlink\" title=\"patternUnits\"></a>patternUnits</h4><p><code>patternUnits = &quot;userSpaceOnUse | objectBoundingBox&quot;</code>。</p>\n<p>他们是应用于x, y, width和 height 的两种坐标系。默认采用objectBoundingBox。引用W3C的原话。</p>\n<blockquote>\n<p>If patternUnits=”userSpaceOnUse”, ‘x’, ‘y’, ‘width’ and ‘height’ represent values in the coordinate system that results from taking the current user coordinate system in place at the time when the ‘pattern’ element is referenced (i.e., the user coordinate system for the element referencing the ‘pattern’ element via a ‘fill’ or ‘stroke’ property) and then applying the transform specified by attribute ‘patternTransform’.</p>\n<p>If patternUnits=”objectBoundingBox”, the user coordinate system for attributes ‘x’, ‘y’, ‘width’ and ‘height’ is established using the bounding box of the element to which the pattern is applied (see Object bounding box units) and then applying the transform specified by attribute ‘patternTransform’.<br>If attribute ‘patternUnits’ is not specified, then the effect is as if a value of ‘objectBoundingBox’ were specified.</p>\n</blockquote>\n<p>从现象看，<code>userSpaceOnUse</code> 使用的width和height是按绝对坐标系计算的像素值，他参考的坐标系和svg图形使用的是同一个，即他的坐标原点在svg父元素的左上角。</p>\n<p>而 <code>objectBoundingBox</code> 的width和height是百分比值，填充图案的大小会随着svg的伸缩而伸缩。</p>\n<p>上面还提到一个<code>patternTransform</code> 的属性，可以做坐标变换用的？？</p>\n<p><p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"wpekH\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/wpekH/'>wpekH</a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n<h4 id=\"patternContentUnits\"><a href=\"#patternContentUnits\" class=\"headerlink\" title=\"patternContentUnits\"></a>patternContentUnits</h4><p>和 <code>patternUnits</code> 一样可以选两个值，但是默认值为 <code>userSpaceOnUse</code> 。</p>\n<p>###Nested Patterns</p>\n<p>可以用一个填充填充另一个填充。来看看这个填充填充的填充的栗子。</p>\n<p>###Paths as Patterns</p>\n<p><p data-height=\"268\" data-theme-id=\"6215\" data-slug-hash=\"uvBaA\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/asjmtz/pen/uvBaA/'>SVG patterns</a> by asjmtz (<a href='http://codepen.io/asjmtz'>@asjmtz</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n\n"},{"title":"jQuery 插件自定义","date":"2014-08-20T03:06:59.000Z","description":"如何自定义一个 jQuery 的插件","_content":"\n## jquery 插件\n\n```\n\njQuery.myPlugin = {\n\tfoo: function() {\n\t\talert('This is a test. This is only a test.');\n\t},\n\tbar: function(param) {\n\t\talert('This function takes a parameter, which is \"' + param + '\".');\n\t}\n};\n//采用命名空间的函数仍然是全局函数，调用时采用的方法：\n$.myPlugin.foo();\n$.myPlugin.bar('baz');\n\n\n\n(function($) {\n\t$.fn.extend({\n\t\tpluginName: function(opt, callback) {\n\t\t\t// Our plugin implementation code goes here.\n\t\t}\n\t})\n})(jQuery);\n\n\n//闭包\n(function($) {\n    //插件定义\n\t$.fn.swipe = function(options) {\n\n\t\t//extend default options with those provided\n\t\t//if deep extend is true,the merge becomes recursive(递归)\n\t\tvar opts = $.extend(true, $.fn.swipe.defaults, options);\n\t};\n\n\t//将默认的参数写在外外面，对于插件的使用者而言，更容易用较少的代码覆盖和修改插件的配置\n\t$.fn.swipe.defaults = {\n\t\tbackground: \"red\"\n\t}\n\n})(jQuery);\n\n\n\n//这个只需要调用一次，且不一定要在ready块中调用\n$.fn.swipe.defaults.foreground = 'blue';\n\n$(\"#swipe\").swipe();\n\n```","source":"_posts/0820-jquery 插件自定义.md","raw":"title: jQuery 插件自定义\ndate: 2014-08-20 11:06:59\ncategories: js\ndescription: 如何自定义一个 jQuery 的插件\n---\n\n## jquery 插件\n\n```\n\njQuery.myPlugin = {\n\tfoo: function() {\n\t\talert('This is a test. This is only a test.');\n\t},\n\tbar: function(param) {\n\t\talert('This function takes a parameter, which is \"' + param + '\".');\n\t}\n};\n//采用命名空间的函数仍然是全局函数，调用时采用的方法：\n$.myPlugin.foo();\n$.myPlugin.bar('baz');\n\n\n\n(function($) {\n\t$.fn.extend({\n\t\tpluginName: function(opt, callback) {\n\t\t\t// Our plugin implementation code goes here.\n\t\t}\n\t})\n})(jQuery);\n\n\n//闭包\n(function($) {\n    //插件定义\n\t$.fn.swipe = function(options) {\n\n\t\t//extend default options with those provided\n\t\t//if deep extend is true,the merge becomes recursive(递归)\n\t\tvar opts = $.extend(true, $.fn.swipe.defaults, options);\n\t};\n\n\t//将默认的参数写在外外面，对于插件的使用者而言，更容易用较少的代码覆盖和修改插件的配置\n\t$.fn.swipe.defaults = {\n\t\tbackground: \"red\"\n\t}\n\n})(jQuery);\n\n\n\n//这个只需要调用一次，且不一定要在ready块中调用\n$.fn.swipe.defaults.foreground = 'blue';\n\n$(\"#swipe\").swipe();\n\n```","slug":"0820-jquery 插件自定义","published":1,"updated":"2015-04-30T02:32:18.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugph4000pok1vom2m4bux","content":"<h2 id=\"jquery-插件\"><a href=\"#jquery-插件\" class=\"headerlink\" title=\"jquery 插件\"></a>jquery 插件</h2><pre><code>\njQuery.myPlugin = {\n    foo: function() {\n        alert(&#39;This is a test. This is only a test.&#39;);\n    },\n    bar: function(param) {\n        alert(&#39;This function takes a parameter, which is &quot;&#39; + param + &#39;&quot;.&#39;);\n    }\n};\n//采用命名空间的函数仍然是全局函数，调用时采用的方法：\n$.myPlugin.foo();\n$.myPlugin.bar(&#39;baz&#39;);\n\n\n\n(function($) {\n    $.fn.extend({\n        pluginName: function(opt, callback) {\n            // Our plugin implementation code goes here.\n        }\n    })\n})(jQuery);\n\n\n//闭包\n(function($) {\n    //插件定义\n    $.fn.swipe = function(options) {\n\n        //extend default options with those provided\n        //if deep extend is true,the merge becomes recursive(递归)\n        var opts = $.extend(true, $.fn.swipe.defaults, options);\n    };\n\n    //将默认的参数写在外外面，对于插件的使用者而言，更容易用较少的代码覆盖和修改插件的配置\n    $.fn.swipe.defaults = {\n        background: &quot;red&quot;\n    }\n\n})(jQuery);\n\n\n\n//这个只需要调用一次，且不一定要在ready块中调用\n$.fn.swipe.defaults.foreground = &#39;blue&#39;;\n\n$(&quot;#swipe&quot;).swipe();\n</code></pre>","excerpt":"","more":"<h2 id=\"jquery-插件\"><a href=\"#jquery-插件\" class=\"headerlink\" title=\"jquery 插件\"></a>jquery 插件</h2><pre><code>\njQuery.myPlugin = {\n    foo: function() {\n        alert(&#39;This is a test. This is only a test.&#39;);\n    },\n    bar: function(param) {\n        alert(&#39;This function takes a parameter, which is &quot;&#39; + param + &#39;&quot;.&#39;);\n    }\n};\n//采用命名空间的函数仍然是全局函数，调用时采用的方法：\n$.myPlugin.foo();\n$.myPlugin.bar(&#39;baz&#39;);\n\n\n\n(function($) {\n    $.fn.extend({\n        pluginName: function(opt, callback) {\n            // Our plugin implementation code goes here.\n        }\n    })\n})(jQuery);\n\n\n//闭包\n(function($) {\n    //插件定义\n    $.fn.swipe = function(options) {\n\n        //extend default options with those provided\n        //if deep extend is true,the merge becomes recursive(递归)\n        var opts = $.extend(true, $.fn.swipe.defaults, options);\n    };\n\n    //将默认的参数写在外外面，对于插件的使用者而言，更容易用较少的代码覆盖和修改插件的配置\n    $.fn.swipe.defaults = {\n        background: &quot;red&quot;\n    }\n\n})(jQuery);\n\n\n\n//这个只需要调用一次，且不一定要在ready块中调用\n$.fn.swipe.defaults.foreground = &#39;blue&#39;;\n\n$(&quot;#swipe&quot;).swipe();\n</code></pre>"},{"title":"Angular Lesson 1","date":"2014-09-25T03:06:59.000Z","description":"Angular phonecat 教程 part 1 —— 介绍","_content":"\n## angular lesson 1\n\n据说是官方的lesson教程，angular-phonecat\n\n### 环境安装\n首先你得安装有下面两个东西，就像烤面包先得有烤箱。\n\t1. git\n\t2. node\n\n然后打开git bush，进入你的工程目录，输入\n```\ngit clone https://github.com/angular/angular-phonecat.git\n```\n\n讲这个项目从github弄下面后，`cd angular-phonecat` 进入这个目录，npm安装依赖包 `node install`。node_modules目录下面会安装以下工具：\n\n- Bower - client-side code package manager\n- Http-Server - simple local static web server\n- Karma - unit test runner\n- Protractor - end to end (E2E) test runner\n\n这里有些启动他们的命令：\n\n-  `npm start`  : start a local development web-server\n-  `npm test` : start the Karma unit test runner\n-  `npm run protractor`  : run the Protractor end to end (E2E) tests\n-  `npm run update-webdriver`  : install the drivers needed by Protractor\n\n如果前面的步骤都顺利的完成了，现在就可以通过 `npm start` 启动node的 http server 了。\n打开浏览器，进入http://localhost:8000/app/index.html，看到一句Nothing here yet!  说明成功了。\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/0925-angular phonecat.md","raw":"title: Angular Lesson 1\ndate: 2014-09-25 11:06:59\ncategories: Angular\ndescription: Angular phonecat 教程 part 1 —— 介绍\n---\n\n## angular lesson 1\n\n据说是官方的lesson教程，angular-phonecat\n\n### 环境安装\n首先你得安装有下面两个东西，就像烤面包先得有烤箱。\n\t1. git\n\t2. node\n\n然后打开git bush，进入你的工程目录，输入\n```\ngit clone https://github.com/angular/angular-phonecat.git\n```\n\n讲这个项目从github弄下面后，`cd angular-phonecat` 进入这个目录，npm安装依赖包 `node install`。node_modules目录下面会安装以下工具：\n\n- Bower - client-side code package manager\n- Http-Server - simple local static web server\n- Karma - unit test runner\n- Protractor - end to end (E2E) test runner\n\n这里有些启动他们的命令：\n\n-  `npm start`  : start a local development web-server\n-  `npm test` : start the Karma unit test runner\n-  `npm run protractor`  : run the Protractor end to end (E2E) tests\n-  `npm run update-webdriver`  : install the drivers needed by Protractor\n\n如果前面的步骤都顺利的完成了，现在就可以通过 `npm start` 启动node的 http server 了。\n打开浏览器，进入http://localhost:8000/app/index.html，看到一句Nothing here yet!  说明成功了。\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","slug":"0925-angular phonecat","published":1,"updated":"2015-02-13T06:22:08.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugph5000rok1ve4hrap4m","content":"<h2 id=\"angular-lesson-1\"><a href=\"#angular-lesson-1\" class=\"headerlink\" title=\"angular lesson 1\"></a>angular lesson 1</h2><p>据说是官方的lesson教程，angular-phonecat</p>\n<h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><p>首先你得安装有下面两个东西，就像烤面包先得有烤箱。</p>\n<pre><code>1. git\n2. node\n</code></pre><p>然后打开git bush，进入你的工程目录，输入</p>\n<pre><code>git clone https://github.com/angular/angular-phonecat.git\n</code></pre><p>讲这个项目从github弄下面后，<code>cd angular-phonecat</code> 进入这个目录，npm安装依赖包 <code>node install</code>。node_modules目录下面会安装以下工具：</p>\n<ul>\n<li>Bower - client-side code package manager</li>\n<li>Http-Server - simple local static web server</li>\n<li>Karma - unit test runner</li>\n<li>Protractor - end to end (E2E) test runner</li>\n</ul>\n<p>这里有些启动他们的命令：</p>\n<ul>\n<li><code>npm start</code>  : start a local development web-server</li>\n<li><code>npm test</code> : start the Karma unit test runner</li>\n<li><code>npm run protractor</code>  : run the Protractor end to end (E2E) tests</li>\n<li><code>npm run update-webdriver</code>  : install the drivers needed by Protractor</li>\n</ul>\n<p>如果前面的步骤都顺利的完成了，现在就可以通过 <code>npm start</code> 启动node的 http server 了。<br>打开浏览器，进入<a href=\"http://localhost:8000/app/index.html，看到一句Nothing\" target=\"_blank\" rel=\"external\">http://localhost:8000/app/index.html，看到一句Nothing</a> here yet!  说明成功了。</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"angular-lesson-1\"><a href=\"#angular-lesson-1\" class=\"headerlink\" title=\"angular lesson 1\"></a>angular lesson 1</h2><p>据说是官方的lesson教程，angular-phonecat</p>\n<h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><p>首先你得安装有下面两个东西，就像烤面包先得有烤箱。</p>\n<pre><code>1. git\n2. node\n</code></pre><p>然后打开git bush，进入你的工程目录，输入</p>\n<pre><code>git clone https://github.com/angular/angular-phonecat.git\n</code></pre><p>讲这个项目从github弄下面后，<code>cd angular-phonecat</code> 进入这个目录，npm安装依赖包 <code>node install</code>。node_modules目录下面会安装以下工具：</p>\n<ul>\n<li>Bower - client-side code package manager</li>\n<li>Http-Server - simple local static web server</li>\n<li>Karma - unit test runner</li>\n<li>Protractor - end to end (E2E) test runner</li>\n</ul>\n<p>这里有些启动他们的命令：</p>\n<ul>\n<li><code>npm start</code>  : start a local development web-server</li>\n<li><code>npm test</code> : start the Karma unit test runner</li>\n<li><code>npm run protractor</code>  : run the Protractor end to end (E2E) tests</li>\n<li><code>npm run update-webdriver</code>  : install the drivers needed by Protractor</li>\n</ul>\n<p>如果前面的步骤都顺利的完成了，现在就可以通过 <code>npm start</code> 启动node的 http server 了。<br>打开浏览器，进入<a href=\"http://localhost:8000/app/index.html，看到一句Nothing\">http://localhost:8000/app/index.html，看到一句Nothing</a> here yet!  说明成功了。</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"Angular Bootstrapping 引导","date":"2014-09-26T03:06:59.000Z","description":"Angular phonecat 教程 part 2 —— bootstrapping","_content":"\n##angular Bootstrapping—— 引导\n\n##step 0\n\n进入 `angular-phonecat` 的目录，运行命令：\n\n```\ngit checkout -f step-0\n```\n\n这个命令会重置我们的工作区到教程的初始步骤step 0。\n跑 `npm start` ，进可以通过 http://localhost:8000/app/ 浏览app页面。\n\n## 这些code是要闹哪样呢？\n\n`app/index.html` 的code\n\n```\n<!doctype html>\n<html lang=\"en\" ng-app>\n<head>\n  <meta charset=\"utf-8\">\n  <title>My HTML File</title>\n  <link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n  <link rel=\"stylesheet\" href=\"css/app.css\">\n  <script src=\"bower_components/angular/angular.js\"></script>\n</head>\n<body>\n\n  <p>Nothing here { {'yet' + '!'} }</p>\n\n</body>\n</html>\n\n```\n\n### `ng-app` \n\n`ng-app` 代表Angular指令 `ngApp`,  用来标记我们的HTML元素，会让Angular 认定为 app 的 root element。大家可以自由的决定app的入口元素在哪里，html或其他元素。\n\n## ` { { } }`\n\n数据绑定的code\n\n```\nNothing here { {'yet' + '!'} }\n```\n\n这行代码展示了两个Angular模板的核心特点：\n\n-  绑定使用双括号—— `{ { } }`\n-  在绑定中使用简单的表达式—— `'yet' + '!'`\n\n这个绑定告诉了Angular去计算表单式，然后把结果插入DOM里绑定数据的地方。在下一步我们会看到，与单向绑定不同的是，当表达式计算的结果改变时，数据会保持更新到DOM上。\n\n[ Angular expression ](https://docs.angularjs.org/guide/expression) 是类JS的代码缩写，他的 context 上下文是当前的module scope，而不是全局域 `(window)` 。\n\n## Bootstrapping AngularJS apps\n\n使用 `ngApp` 指令引导Angular app 很方便也适用于大部分的应用。 但是，在一些其他的使用了scripts loader的栗子中，可以使用这个来引导app——[ imperative / manual](https://docs.angularjs.org/guide/bootstrap)。\n\n当APP引导的时候完成了三个重要的事情：\n\n 1. 注册器注册依赖？？\n 2. 注册器建立根作用域，他将作为我们应用的上下文context\n 3. Angular从 `ngApp` 根元素开始编译DOM，处理根下面的指令和绑定们\n\n一旦一个app被引导完成，他会等待浏览器事件的触发（例如鼠标点击，键盘事件，或者HTTP应答）。一旦事件被触发，Angular就去侦测是否他会改变任何Model，然后通过更新所有相关的绑定，将改变的地方映射到View去。\n\n示意图：\n![angular ng-app](http://iamtutu.qiniudn.com/tutorial_00.png)\n\n\n\n\n\n\n \n  \n\n\n\n\n\n","source":"_posts/0926-angular lesson2.md","raw":"title: Angular Bootstrapping 引导\ndate: 2014-09-26 11:06:59\ncategories: Angular\ndescription: Angular phonecat 教程 part 2 —— bootstrapping \n---\n\n##angular Bootstrapping—— 引导\n\n##step 0\n\n进入 `angular-phonecat` 的目录，运行命令：\n\n```\ngit checkout -f step-0\n```\n\n这个命令会重置我们的工作区到教程的初始步骤step 0。\n跑 `npm start` ，进可以通过 http://localhost:8000/app/ 浏览app页面。\n\n## 这些code是要闹哪样呢？\n\n`app/index.html` 的code\n\n```\n<!doctype html>\n<html lang=\"en\" ng-app>\n<head>\n  <meta charset=\"utf-8\">\n  <title>My HTML File</title>\n  <link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n  <link rel=\"stylesheet\" href=\"css/app.css\">\n  <script src=\"bower_components/angular/angular.js\"></script>\n</head>\n<body>\n\n  <p>Nothing here { {'yet' + '!'} }</p>\n\n</body>\n</html>\n\n```\n\n### `ng-app` \n\n`ng-app` 代表Angular指令 `ngApp`,  用来标记我们的HTML元素，会让Angular 认定为 app 的 root element。大家可以自由的决定app的入口元素在哪里，html或其他元素。\n\n## ` { { } }`\n\n数据绑定的code\n\n```\nNothing here { {'yet' + '!'} }\n```\n\n这行代码展示了两个Angular模板的核心特点：\n\n-  绑定使用双括号—— `{ { } }`\n-  在绑定中使用简单的表达式—— `'yet' + '!'`\n\n这个绑定告诉了Angular去计算表单式，然后把结果插入DOM里绑定数据的地方。在下一步我们会看到，与单向绑定不同的是，当表达式计算的结果改变时，数据会保持更新到DOM上。\n\n[ Angular expression ](https://docs.angularjs.org/guide/expression) 是类JS的代码缩写，他的 context 上下文是当前的module scope，而不是全局域 `(window)` 。\n\n## Bootstrapping AngularJS apps\n\n使用 `ngApp` 指令引导Angular app 很方便也适用于大部分的应用。 但是，在一些其他的使用了scripts loader的栗子中，可以使用这个来引导app——[ imperative / manual](https://docs.angularjs.org/guide/bootstrap)。\n\n当APP引导的时候完成了三个重要的事情：\n\n 1. 注册器注册依赖？？\n 2. 注册器建立根作用域，他将作为我们应用的上下文context\n 3. Angular从 `ngApp` 根元素开始编译DOM，处理根下面的指令和绑定们\n\n一旦一个app被引导完成，他会等待浏览器事件的触发（例如鼠标点击，键盘事件，或者HTTP应答）。一旦事件被触发，Angular就去侦测是否他会改变任何Model，然后通过更新所有相关的绑定，将改变的地方映射到View去。\n\n示意图：\n![angular ng-app](http://iamtutu.qiniudn.com/tutorial_00.png)\n\n\n\n\n\n\n \n  \n\n\n\n\n\n","slug":"0926-angular lesson2","published":1,"updated":"2015-02-13T06:11:24.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugph7000tok1vt87pmep9","content":"<p>##angular Bootstrapping—— 引导</p>\n<p>##step 0</p>\n<p>进入 <code>angular-phonecat</code> 的目录，运行命令：</p>\n<pre><code>git checkout -f step-0\n</code></pre><p>这个命令会重置我们的工作区到教程的初始步骤step 0。<br>跑 <code>npm start</code> ，进可以通过 <a href=\"http://localhost:8000/app/\" target=\"_blank\" rel=\"external\">http://localhost:8000/app/</a> 浏览app页面。</p>\n<h2 id=\"这些code是要闹哪样呢？\"><a href=\"#这些code是要闹哪样呢？\" class=\"headerlink\" title=\"这些code是要闹哪样呢？\"></a>这些code是要闹哪样呢？</h2><p><code>app/index.html</code> 的code</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot; ng-app&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;My HTML File&lt;/title&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/app.css&quot;&gt;\n  &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;p&gt;Nothing here { {&#39;yet&#39; + &#39;!&#39;} }&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"ng-app\"><a href=\"#ng-app\" class=\"headerlink\" title=\"ng-app\"></a><code>ng-app</code></h3><p><code>ng-app</code> 代表Angular指令 <code>ngApp</code>,  用来标记我们的HTML元素，会让Angular 认定为 app 的 root element。大家可以自由的决定app的入口元素在哪里，html或其他元素。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"{ { } }\"></a><code>{ { } }</code></h2><p>数据绑定的code</p>\n<pre><code>Nothing here { {&#39;yet&#39; + &#39;!&#39;} }\n</code></pre><p>这行代码展示了两个Angular模板的核心特点：</p>\n<ul>\n<li>绑定使用双括号—— <code>{ { } }</code></li>\n<li>在绑定中使用简单的表达式—— <code>&#39;yet&#39; + &#39;!&#39;</code></li>\n</ul>\n<p>这个绑定告诉了Angular去计算表单式，然后把结果插入DOM里绑定数据的地方。在下一步我们会看到，与单向绑定不同的是，当表达式计算的结果改变时，数据会保持更新到DOM上。</p>\n<p><a href=\"https://docs.angularjs.org/guide/expression\" target=\"_blank\" rel=\"external\"> Angular expression </a> 是类JS的代码缩写，他的 context 上下文是当前的module scope，而不是全局域 <code>(window)</code> 。</p>\n<h2 id=\"Bootstrapping-AngularJS-apps\"><a href=\"#Bootstrapping-AngularJS-apps\" class=\"headerlink\" title=\"Bootstrapping AngularJS apps\"></a>Bootstrapping AngularJS apps</h2><p>使用 <code>ngApp</code> 指令引导Angular app 很方便也适用于大部分的应用。 但是，在一些其他的使用了scripts loader的栗子中，可以使用这个来引导app——<a href=\"https://docs.angularjs.org/guide/bootstrap\" target=\"_blank\" rel=\"external\"> imperative / manual</a>。</p>\n<p>当APP引导的时候完成了三个重要的事情：</p>\n<ol>\n<li>注册器注册依赖？？</li>\n<li>注册器建立根作用域，他将作为我们应用的上下文context</li>\n<li>Angular从 <code>ngApp</code> 根元素开始编译DOM，处理根下面的指令和绑定们</li>\n</ol>\n<p>一旦一个app被引导完成，他会等待浏览器事件的触发（例如鼠标点击，键盘事件，或者HTTP应答）。一旦事件被触发，Angular就去侦测是否他会改变任何Model，然后通过更新所有相关的绑定，将改变的地方映射到View去。</p>\n<p>示意图：<br><img src=\"http://iamtutu.qiniudn.com/tutorial_00.png\" alt=\"angular ng-app\"></p>\n","excerpt":"","more":"<p>##angular Bootstrapping—— 引导</p>\n<p>##step 0</p>\n<p>进入 <code>angular-phonecat</code> 的目录，运行命令：</p>\n<pre><code>git checkout -f step-0\n</code></pre><p>这个命令会重置我们的工作区到教程的初始步骤step 0。<br>跑 <code>npm start</code> ，进可以通过 <a href=\"http://localhost:8000/app/\">http://localhost:8000/app/</a> 浏览app页面。</p>\n<h2 id=\"这些code是要闹哪样呢？\"><a href=\"#这些code是要闹哪样呢？\" class=\"headerlink\" title=\"这些code是要闹哪样呢？\"></a>这些code是要闹哪样呢？</h2><p><code>app/index.html</code> 的code</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot; ng-app&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;My HTML File&lt;/title&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/app.css&quot;&gt;\n  &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;p&gt;Nothing here { {&#39;yet&#39; + &#39;!&#39;} }&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"ng-app\"><a href=\"#ng-app\" class=\"headerlink\" title=\"ng-app\"></a><code>ng-app</code></h3><p><code>ng-app</code> 代表Angular指令 <code>ngApp</code>,  用来标记我们的HTML元素，会让Angular 认定为 app 的 root element。大家可以自由的决定app的入口元素在哪里，html或其他元素。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"{ { } }\"></a><code>{ { } }</code></h2><p>数据绑定的code</p>\n<pre><code>Nothing here { {&#39;yet&#39; + &#39;!&#39;} }\n</code></pre><p>这行代码展示了两个Angular模板的核心特点：</p>\n<ul>\n<li>绑定使用双括号—— <code>{ { } }</code></li>\n<li>在绑定中使用简单的表达式—— <code>&#39;yet&#39; + &#39;!&#39;</code></li>\n</ul>\n<p>这个绑定告诉了Angular去计算表单式，然后把结果插入DOM里绑定数据的地方。在下一步我们会看到，与单向绑定不同的是，当表达式计算的结果改变时，数据会保持更新到DOM上。</p>\n<p><a href=\"https://docs.angularjs.org/guide/expression\"> Angular expression </a> 是类JS的代码缩写，他的 context 上下文是当前的module scope，而不是全局域 <code>(window)</code> 。</p>\n<h2 id=\"Bootstrapping-AngularJS-apps\"><a href=\"#Bootstrapping-AngularJS-apps\" class=\"headerlink\" title=\"Bootstrapping AngularJS apps\"></a>Bootstrapping AngularJS apps</h2><p>使用 <code>ngApp</code> 指令引导Angular app 很方便也适用于大部分的应用。 但是，在一些其他的使用了scripts loader的栗子中，可以使用这个来引导app——<a href=\"https://docs.angularjs.org/guide/bootstrap\"> imperative / manual</a>。</p>\n<p>当APP引导的时候完成了三个重要的事情：</p>\n<ol>\n<li>注册器注册依赖？？</li>\n<li>注册器建立根作用域，他将作为我们应用的上下文context</li>\n<li>Angular从 <code>ngApp</code> 根元素开始编译DOM，处理根下面的指令和绑定们</li>\n</ol>\n<p>一旦一个app被引导完成，他会等待浏览器事件的触发（例如鼠标点击，键盘事件，或者HTTP应答）。一旦事件被触发，Angular就去侦测是否他会改变任何Model，然后通过更新所有相关的绑定，将改变的地方映射到View去。</p>\n<p>示意图：<br><img src=\"http://iamtutu.qiniudn.com/tutorial_00.png\" alt=\"angular ng-app\"></p>\n"},{"title":"Angular 模版学习2","date":"2014-09-26T03:06:59.000Z","description":"Angular phonecat 教程 part 3 —— 模版（2）","_content":"\n# Filtering Repeaters\n\n## step 3\n\n```\ngit checkout -f step-3\n...\nnpm start\n```\n\n### controller\n没啥改变\n\n### template\n`app/index.html` \n\n```\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">\n      <!--Sidebar content-->\n\n      Search: <input ng-model=\"query\">\n\n    </div>\n    <div class=\"col-md-10\">\n      <!--Body content-->\n\n      <ul class=\"phones\">\n        <li ng-repeat=\"phone in phones | filter:query\">\n          {{phone.name}}\n          <p>{{phone.snippet}}</p>\n        </li>\n      </ul>\n\n    </div>\n  </div>\n</div>\n\n```\n\n使用`<input>` 标签和Angular 的filter函数来处理ngRepeat指令的输入。用户可以实时看到搜索的结果：\n\n- 数据绑定：当页面load时，Angular绑定input的名字到一个在数据模型里的同名变量，然后保持两个同步。\n- 使用filter：filter函数使用`query` 的值来创建一个新的数组，数组为匹配query的结果。即输入input的是一个过滤用的关键词，什么我输入了一个正则？？\n\nngRepeater 自动更新视图以回应由 filter 返回的phones数组的变化\n\n## 测试\n\n单元测试完美适合于控制器和其他组件的测试，但是没法测试DOM 操作或其他app操作。为此，使用一个end-to-end端对端的测试是更好的choice。\n\n下面是个end-to-end test来验证我们的搜索功能，`test/e2e/scenarios.js:`\n\n```\ndescribe('PhoneCat App', function() {\n\ndescribe('Phone list view', function() {\n\n  beforeEach(function() {\n    browser.get('app/index.html');\n  });\n\n\n  it('should filter the phone list as a user types into the search box', function() {\n\n    var phoneList = element.all(by.repeater('phone in phones'));\n    var query = element(by.model('query'));\n\n    expect(phoneList.count()).toBe(3);\n\n    query.sendKeys('nexus');\n    expect(phoneList.count()).toBe(1);\n\n    query.clear();\n    query.sendKeys('motorola');\n    expect(phoneList.count()).toBe(2);\n  });\n});\n});\n```\n\n这个end-to-end使用的是 Protractor 的 API。更多语法相关[点这里 ](https://github.com/angular/protractor/blob/master/docs/api.md).\n\n使用 `npm run protractor` 命令开始测试。需要能翻墙到google，ou no !!! T^T !!!\n \n \n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/0926-angular lesson3 - part2.md","raw":"title: Angular 模版学习2\ndate: 2014-09-26 11:06:59\ncategories: Angular\ndescription: Angular phonecat 教程 part 3 —— 模版（2）\n---\n\n# Filtering Repeaters\n\n## step 3\n\n```\ngit checkout -f step-3\n...\nnpm start\n```\n\n### controller\n没啥改变\n\n### template\n`app/index.html` \n\n```\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">\n      <!--Sidebar content-->\n\n      Search: <input ng-model=\"query\">\n\n    </div>\n    <div class=\"col-md-10\">\n      <!--Body content-->\n\n      <ul class=\"phones\">\n        <li ng-repeat=\"phone in phones | filter:query\">\n          {{phone.name}}\n          <p>{{phone.snippet}}</p>\n        </li>\n      </ul>\n\n    </div>\n  </div>\n</div>\n\n```\n\n使用`<input>` 标签和Angular 的filter函数来处理ngRepeat指令的输入。用户可以实时看到搜索的结果：\n\n- 数据绑定：当页面load时，Angular绑定input的名字到一个在数据模型里的同名变量，然后保持两个同步。\n- 使用filter：filter函数使用`query` 的值来创建一个新的数组，数组为匹配query的结果。即输入input的是一个过滤用的关键词，什么我输入了一个正则？？\n\nngRepeater 自动更新视图以回应由 filter 返回的phones数组的变化\n\n## 测试\n\n单元测试完美适合于控制器和其他组件的测试，但是没法测试DOM 操作或其他app操作。为此，使用一个end-to-end端对端的测试是更好的choice。\n\n下面是个end-to-end test来验证我们的搜索功能，`test/e2e/scenarios.js:`\n\n```\ndescribe('PhoneCat App', function() {\n\ndescribe('Phone list view', function() {\n\n  beforeEach(function() {\n    browser.get('app/index.html');\n  });\n\n\n  it('should filter the phone list as a user types into the search box', function() {\n\n    var phoneList = element.all(by.repeater('phone in phones'));\n    var query = element(by.model('query'));\n\n    expect(phoneList.count()).toBe(3);\n\n    query.sendKeys('nexus');\n    expect(phoneList.count()).toBe(1);\n\n    query.clear();\n    query.sendKeys('motorola');\n    expect(phoneList.count()).toBe(2);\n  });\n});\n});\n```\n\n这个end-to-end使用的是 Protractor 的 API。更多语法相关[点这里 ](https://github.com/angular/protractor/blob/master/docs/api.md).\n\n使用 `npm run protractor` 命令开始测试。需要能翻墙到google，ou no !!! T^T !!!\n \n \n> Written with [StackEdit](https://stackedit.io/).","slug":"0926-angular lesson3 - part2","published":1,"updated":"2015-02-13T06:22:48.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugph8000vok1vb4i8w6f9","content":"<h1 id=\"Filtering-Repeaters\"><a href=\"#Filtering-Repeaters\" class=\"headerlink\" title=\"Filtering Repeaters\"></a>Filtering Repeaters</h1><h2 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step 3\"></a>step 3</h2><pre><code>git checkout -f step-3\n...\nnpm start\n</code></pre><h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><p>没啥改变</p>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><p><code>app/index.html</code> </p>\n<pre><code>&lt;div class=&quot;container-fluid&quot;&gt;\n  &lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;col-md-2&quot;&gt;\n      &lt;!--Sidebar content--&gt;\n\n      Search: &lt;input ng-model=&quot;query&quot;&gt;\n\n    &lt;/div&gt;\n    &lt;div class=&quot;col-md-10&quot;&gt;\n      &lt;!--Body content--&gt;\n\n      &lt;ul class=&quot;phones&quot;&gt;\n        &lt;li ng-repeat=&quot;phone in phones | filter:query&quot;&gt;\n          {{phone.name}}\n          &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>使用<code>&lt;input&gt;</code> 标签和Angular 的filter函数来处理ngRepeat指令的输入。用户可以实时看到搜索的结果：</p>\n<ul>\n<li>数据绑定：当页面load时，Angular绑定input的名字到一个在数据模型里的同名变量，然后保持两个同步。</li>\n<li>使用filter：filter函数使用<code>query</code> 的值来创建一个新的数组，数组为匹配query的结果。即输入input的是一个过滤用的关键词，什么我输入了一个正则？？</li>\n</ul>\n<p>ngRepeater 自动更新视图以回应由 filter 返回的phones数组的变化</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>单元测试完美适合于控制器和其他组件的测试，但是没法测试DOM 操作或其他app操作。为此，使用一个end-to-end端对端的测试是更好的choice。</p>\n<p>下面是个end-to-end test来验证我们的搜索功能，<code>test/e2e/scenarios.js:</code></p>\n<pre><code>describe(&#39;PhoneCat App&#39;, function() {\n\ndescribe(&#39;Phone list view&#39;, function() {\n\n  beforeEach(function() {\n    browser.get(&#39;app/index.html&#39;);\n  });\n\n\n  it(&#39;should filter the phone list as a user types into the search box&#39;, function() {\n\n    var phoneList = element.all(by.repeater(&#39;phone in phones&#39;));\n    var query = element(by.model(&#39;query&#39;));\n\n    expect(phoneList.count()).toBe(3);\n\n    query.sendKeys(&#39;nexus&#39;);\n    expect(phoneList.count()).toBe(1);\n\n    query.clear();\n    query.sendKeys(&#39;motorola&#39;);\n    expect(phoneList.count()).toBe(2);\n  });\n});\n});\n</code></pre><p>这个end-to-end使用的是 Protractor 的 API。更多语法相关<a href=\"https://github.com/angular/protractor/blob/master/docs/api.md\" target=\"_blank\" rel=\"external\">点这里 </a>.</p>\n<p>使用 <code>npm run protractor</code> 命令开始测试。需要能翻墙到google，ou no !!! T^T !!!</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Filtering-Repeaters\"><a href=\"#Filtering-Repeaters\" class=\"headerlink\" title=\"Filtering Repeaters\"></a>Filtering Repeaters</h1><h2 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step 3\"></a>step 3</h2><pre><code>git checkout -f step-3\n...\nnpm start\n</code></pre><h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><p>没啥改变</p>\n<h3 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h3><p><code>app/index.html</code> </p>\n<pre><code>&lt;div class=&quot;container-fluid&quot;&gt;\n  &lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;col-md-2&quot;&gt;\n      &lt;!--Sidebar content--&gt;\n\n      Search: &lt;input ng-model=&quot;query&quot;&gt;\n\n    &lt;/div&gt;\n    &lt;div class=&quot;col-md-10&quot;&gt;\n      &lt;!--Body content--&gt;\n\n      &lt;ul class=&quot;phones&quot;&gt;\n        &lt;li ng-repeat=&quot;phone in phones | filter:query&quot;&gt;\n          {{phone.name}}\n          &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>使用<code>&lt;input&gt;</code> 标签和Angular 的filter函数来处理ngRepeat指令的输入。用户可以实时看到搜索的结果：</p>\n<ul>\n<li>数据绑定：当页面load时，Angular绑定input的名字到一个在数据模型里的同名变量，然后保持两个同步。</li>\n<li>使用filter：filter函数使用<code>query</code> 的值来创建一个新的数组，数组为匹配query的结果。即输入input的是一个过滤用的关键词，什么我输入了一个正则？？</li>\n</ul>\n<p>ngRepeater 自动更新视图以回应由 filter 返回的phones数组的变化</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>单元测试完美适合于控制器和其他组件的测试，但是没法测试DOM 操作或其他app操作。为此，使用一个end-to-end端对端的测试是更好的choice。</p>\n<p>下面是个end-to-end test来验证我们的搜索功能，<code>test/e2e/scenarios.js:</code></p>\n<pre><code>describe(&#39;PhoneCat App&#39;, function() {\n\ndescribe(&#39;Phone list view&#39;, function() {\n\n  beforeEach(function() {\n    browser.get(&#39;app/index.html&#39;);\n  });\n\n\n  it(&#39;should filter the phone list as a user types into the search box&#39;, function() {\n\n    var phoneList = element.all(by.repeater(&#39;phone in phones&#39;));\n    var query = element(by.model(&#39;query&#39;));\n\n    expect(phoneList.count()).toBe(3);\n\n    query.sendKeys(&#39;nexus&#39;);\n    expect(phoneList.count()).toBe(1);\n\n    query.clear();\n    query.sendKeys(&#39;motorola&#39;);\n    expect(phoneList.count()).toBe(2);\n  });\n});\n});\n</code></pre><p>这个end-to-end使用的是 Protractor 的 API。更多语法相关<a href=\"https://github.com/angular/protractor/blob/master/docs/api.md\">点这里 </a>.</p>\n<p>使用 <code>npm run protractor</code> 命令开始测试。需要能翻墙到google，ou no !!! T^T !!!</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"Angular Template 模板","date":"2014-09-26T03:06:59.000Z","description":"Angular phonecat 教程 part 3 —— 模版","_content":"\n\n为了说明Angular怎样加强标准HTML，这一节会将一个纯html转为模板，Angular用他来展示一些数据集合。我们加的数据是两个手机的基本信息。\n\n## step 1\n\n调整工作区到step1\n```\ngit checkout -f step-1\n```\n\n然后别忘了 `npm start` ，在浏览器上查看新的页面展示。\n\n这是个纯html的静态模板，下面看看Angular的动态模板是怎么弄的。马上就到了step 2。\n\n## step 2\n\n```\ngit checkout -f step-2\n```\n\nAngular比较提倡使用 **MVC 设计模式** 来结耦代码。由于这个理念，这个步骤使用了一些 JS 代码来增加app中的 model，view 和 controller 组件。\n\n### View and Template\n\n在 Angular 中，视图是模型通过 HTML 模板的映射。这意味着，无论何时数据模型的变化，都能刷新绑定点而更新视图。\n\n` app/index.html: `\n\n```\n<html ng-app=\"phonecatApp\">\n<head>\n  ...\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"js/controllers.js\"></script>\n</head>\n<body ng-controller=\"PhoneListCtrl\">\n\n  <ul>\n    <li ng-repeat=\"phone in phones\">\n      {{phone.name}}\n      <p>{{phone.snippet}}</p>\n    </li>\n  </ul>\n\n</body>\n</html>\n```\n\n### ng-repeat\n\n我们将硬代码写的phone  list 替换为 ` ngRepeat directive ` 和两个 Angular expression。\n\n- 这个 `ng-repeat=\"phone in phones\" ` 属性是一个Angular repeater指令。repeater让 Angular 为每个list里的phone建立 `<li>` 模板。总之就是模板中的 `for in` 循环。\n\n### ng-controller\n\n这个指令绑定个 `PhoneListCtrl` 的 controller 到 body 上。数据 ` {{phone.name}}` 和 `{{phone.snippet}}` 是他设置的，(⊙_⊙)。\n\n### ng-app\n\n前面出现的这个指令，现在给他赋值了之后，则表示 `phonecarApp` 是一个module模块名。这个模块包含着`PhoneListCtrl` 这个控制器。\n\n他们的关系图：\n\n![关系图](http://iamtutu.qiniudn.com/tutorial_02.png)\n\n### Module and Controller\n\n`app/js/controllers.js:`\n\n```\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.'},\n    {'name': 'Motorola XOOM™ with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.'},\n    {'name': 'MOTOROLA XOOM™',\n     'snippet': 'The Next, Next Generation tablet.'}\n  ];\n});\n```\n\n1. 在html标签上定义的模块名字 `phonecatApp` ，在这里注册为 Angular 的 module。\n2. 然后在这个module下注册了一个控制器——`PhoneListCtrl`\n\n控制器让我们能够在 model 和 view 之间建立数据绑定。`PhoneListCtrl` 控制器绑定 phone data 到 `$scope` 。这个 scope 是 root scope 的 prototypical descendant（原型子孙）？？root scope在app 开始时被定义。这个控制器的scope可以使用到任何在控制器标签中的绑定。\n\n### scope\n\n在Angular中scope的概念十分的重要，他是将template、model和controller公共工作的粘合剂。\n详细的Angular scope 介绍请翻墙看：[ angular scope documentation.](https://docs.angularjs.org/api/ng/type/$rootScope.Scope) ^_^\n\n### 测试\n\n#### 全局控制器\n\n用Angular 的方法将控制器从视图中分离，我们可以方便的编写测试代码。如果控制器在全局作用域可用，我们可用一个虚拟的scope来实例化控制器：\n\n```\ndescribe('PhoneListCtrl', function(){\n\nit('should create \"phones\" model with 3 phones', function() {\n  var scope = {},\n      ctrl = new PhoneListCtrl(scope);\n\n  expect(scope.phones.length).toBe(3);\n});\n\n});\n```\n\n在Angular中写单元测试挺方便啊O(∩_∩)O哈哈~\n因为在软件开发中，测试是一个关键的步骤，所以Angular简化了测试，以鼓励coder们多写测试啊。\n\n#### 非全局控制器\n\nAngular提供了一个service服务——`$controller` 。他可以通过名字获取你的控制器。\n\n```\ndescribe('PhoneListCtrl', function(){\n\nbeforeEach(module('phonecatApp'));\n\nit('should create \"phones\" model with 3 phones', inject(function($controller) {\n  var scope = {},\n      ctrl = $controller('PhoneListCtrl', {$scope:scope});\n\n  expect(scope.phones.length).toBe(3);\n}));\n\n});\n```\n\n解释：\n\n- 告诉Angular 在每个测试之前加载 `phonecatApp` 模块\n- 让Angular 注册 `$controller` 服务到我们的测试函数\n- 用 `$controller` 来建立一个 `PhoneListCtrl` 的实例\n- 在实例中，我们来证实phones数组拥有三个记录的属性\n\n### Writing and Running Tests 写跑测试\n\nangular-seed项目预先配置了使用 **Karma** 来跑单元测试，确保开跑前已经使用 `npm install` 安装了Karma相关的组件。\n\n使用 `npm test` 开跑：\n\n- Karma 会打开一个浏览器的页面来跑你的测试，可以无视\n- 你会看到命令台输出（大概）：\n```\n info: Karma server started at http://localhost:9876/\n  info (launcher): Starting  browser \"Chrome\"\n  info (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n\n  Chrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)\n```\n\n \\(^o^)/ success！！\n\n- 当你修改你的test.js的源文件时，Karma会默认帮你重跑一遍，so sweet O(∩_∩)O\n\n\n\n\n\n\n\n\n","source":"_posts/0926-angular lesson3.md","raw":"title: Angular Template 模板 \ndate: 2014-09-26 11:06:59\ncategories: Angular\ndescription: Angular phonecat 教程 part 3 —— 模版\n---\n\n\n为了说明Angular怎样加强标准HTML，这一节会将一个纯html转为模板，Angular用他来展示一些数据集合。我们加的数据是两个手机的基本信息。\n\n## step 1\n\n调整工作区到step1\n```\ngit checkout -f step-1\n```\n\n然后别忘了 `npm start` ，在浏览器上查看新的页面展示。\n\n这是个纯html的静态模板，下面看看Angular的动态模板是怎么弄的。马上就到了step 2。\n\n## step 2\n\n```\ngit checkout -f step-2\n```\n\nAngular比较提倡使用 **MVC 设计模式** 来结耦代码。由于这个理念，这个步骤使用了一些 JS 代码来增加app中的 model，view 和 controller 组件。\n\n### View and Template\n\n在 Angular 中，视图是模型通过 HTML 模板的映射。这意味着，无论何时数据模型的变化，都能刷新绑定点而更新视图。\n\n` app/index.html: `\n\n```\n<html ng-app=\"phonecatApp\">\n<head>\n  ...\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"js/controllers.js\"></script>\n</head>\n<body ng-controller=\"PhoneListCtrl\">\n\n  <ul>\n    <li ng-repeat=\"phone in phones\">\n      {{phone.name}}\n      <p>{{phone.snippet}}</p>\n    </li>\n  </ul>\n\n</body>\n</html>\n```\n\n### ng-repeat\n\n我们将硬代码写的phone  list 替换为 ` ngRepeat directive ` 和两个 Angular expression。\n\n- 这个 `ng-repeat=\"phone in phones\" ` 属性是一个Angular repeater指令。repeater让 Angular 为每个list里的phone建立 `<li>` 模板。总之就是模板中的 `for in` 循环。\n\n### ng-controller\n\n这个指令绑定个 `PhoneListCtrl` 的 controller 到 body 上。数据 ` {{phone.name}}` 和 `{{phone.snippet}}` 是他设置的，(⊙_⊙)。\n\n### ng-app\n\n前面出现的这个指令，现在给他赋值了之后，则表示 `phonecarApp` 是一个module模块名。这个模块包含着`PhoneListCtrl` 这个控制器。\n\n他们的关系图：\n\n![关系图](http://iamtutu.qiniudn.com/tutorial_02.png)\n\n### Module and Controller\n\n`app/js/controllers.js:`\n\n```\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.'},\n    {'name': 'Motorola XOOM™ with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.'},\n    {'name': 'MOTOROLA XOOM™',\n     'snippet': 'The Next, Next Generation tablet.'}\n  ];\n});\n```\n\n1. 在html标签上定义的模块名字 `phonecatApp` ，在这里注册为 Angular 的 module。\n2. 然后在这个module下注册了一个控制器——`PhoneListCtrl`\n\n控制器让我们能够在 model 和 view 之间建立数据绑定。`PhoneListCtrl` 控制器绑定 phone data 到 `$scope` 。这个 scope 是 root scope 的 prototypical descendant（原型子孙）？？root scope在app 开始时被定义。这个控制器的scope可以使用到任何在控制器标签中的绑定。\n\n### scope\n\n在Angular中scope的概念十分的重要，他是将template、model和controller公共工作的粘合剂。\n详细的Angular scope 介绍请翻墙看：[ angular scope documentation.](https://docs.angularjs.org/api/ng/type/$rootScope.Scope) ^_^\n\n### 测试\n\n#### 全局控制器\n\n用Angular 的方法将控制器从视图中分离，我们可以方便的编写测试代码。如果控制器在全局作用域可用，我们可用一个虚拟的scope来实例化控制器：\n\n```\ndescribe('PhoneListCtrl', function(){\n\nit('should create \"phones\" model with 3 phones', function() {\n  var scope = {},\n      ctrl = new PhoneListCtrl(scope);\n\n  expect(scope.phones.length).toBe(3);\n});\n\n});\n```\n\n在Angular中写单元测试挺方便啊O(∩_∩)O哈哈~\n因为在软件开发中，测试是一个关键的步骤，所以Angular简化了测试，以鼓励coder们多写测试啊。\n\n#### 非全局控制器\n\nAngular提供了一个service服务——`$controller` 。他可以通过名字获取你的控制器。\n\n```\ndescribe('PhoneListCtrl', function(){\n\nbeforeEach(module('phonecatApp'));\n\nit('should create \"phones\" model with 3 phones', inject(function($controller) {\n  var scope = {},\n      ctrl = $controller('PhoneListCtrl', {$scope:scope});\n\n  expect(scope.phones.length).toBe(3);\n}));\n\n});\n```\n\n解释：\n\n- 告诉Angular 在每个测试之前加载 `phonecatApp` 模块\n- 让Angular 注册 `$controller` 服务到我们的测试函数\n- 用 `$controller` 来建立一个 `PhoneListCtrl` 的实例\n- 在实例中，我们来证实phones数组拥有三个记录的属性\n\n### Writing and Running Tests 写跑测试\n\nangular-seed项目预先配置了使用 **Karma** 来跑单元测试，确保开跑前已经使用 `npm install` 安装了Karma相关的组件。\n\n使用 `npm test` 开跑：\n\n- Karma 会打开一个浏览器的页面来跑你的测试，可以无视\n- 你会看到命令台输出（大概）：\n```\n info: Karma server started at http://localhost:9876/\n  info (launcher): Starting  browser \"Chrome\"\n  info (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n\n  Chrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)\n```\n\n \\(^o^)/ success！！\n\n- 当你修改你的test.js的源文件时，Karma会默认帮你重跑一遍，so sweet O(∩_∩)O\n\n\n\n\n\n\n\n\n","slug":"0926-angular lesson3","published":1,"updated":"2015-02-13T06:23:24.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpha000xok1vuy3pbieg","content":"<p>为了说明Angular怎样加强标准HTML，这一节会将一个纯html转为模板，Angular用他来展示一些数据集合。我们加的数据是两个手机的基本信息。</p>\n<h2 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h2><p>调整工作区到step1</p>\n<pre><code>git checkout -f step-1\n</code></pre><p>然后别忘了 <code>npm start</code> ，在浏览器上查看新的页面展示。</p>\n<p>这是个纯html的静态模板，下面看看Angular的动态模板是怎么弄的。马上就到了step 2。</p>\n<h2 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2\"></a>step 2</h2><pre><code>git checkout -f step-2\n</code></pre><p>Angular比较提倡使用 <strong>MVC 设计模式</strong> 来结耦代码。由于这个理念，这个步骤使用了一些 JS 代码来增加app中的 model，view 和 controller 组件。</p>\n<h3 id=\"View-and-Template\"><a href=\"#View-and-Template\" class=\"headerlink\" title=\"View and Template\"></a>View and Template</h3><p>在 Angular 中，视图是模型通过 HTML 模板的映射。这意味着，无论何时数据模型的变化，都能刷新绑定点而更新视图。</p>\n<p><code>app/index.html:</code></p>\n<pre><code>&lt;html ng-app=&quot;phonecatApp&quot;&gt;\n&lt;head&gt;\n  ...\n  &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body ng-controller=&quot;PhoneListCtrl&quot;&gt;\n\n  &lt;ul&gt;\n    &lt;li ng-repeat=&quot;phone in phones&quot;&gt;\n      {{phone.name}}\n      &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"ng-repeat\"><a href=\"#ng-repeat\" class=\"headerlink\" title=\"ng-repeat\"></a>ng-repeat</h3><p>我们将硬代码写的phone  list 替换为 <code>ngRepeat directive</code> 和两个 Angular expression。</p>\n<ul>\n<li>这个 <code>ng-repeat=&quot;phone in phones&quot;</code> 属性是一个Angular repeater指令。repeater让 Angular 为每个list里的phone建立 <code>&lt;li&gt;</code> 模板。总之就是模板中的 <code>for in</code> 循环。</li>\n</ul>\n<h3 id=\"ng-controller\"><a href=\"#ng-controller\" class=\"headerlink\" title=\"ng-controller\"></a>ng-controller</h3><p>这个指令绑定个 <code>PhoneListCtrl</code> 的 controller 到 body 上。数据 <code></code> 和 <code></code> 是他设置的，(⊙_⊙)。</p>\n<h3 id=\"ng-app\"><a href=\"#ng-app\" class=\"headerlink\" title=\"ng-app\"></a>ng-app</h3><p>前面出现的这个指令，现在给他赋值了之后，则表示 <code>phonecarApp</code> 是一个module模块名。这个模块包含着<code>PhoneListCtrl</code> 这个控制器。</p>\n<p>他们的关系图：</p>\n<p><img src=\"http://iamtutu.qiniudn.com/tutorial_02.png\" alt=\"关系图\"></p>\n<h3 id=\"Module-and-Controller\"><a href=\"#Module-and-Controller\" class=\"headerlink\" title=\"Module and Controller\"></a>Module and Controller</h3><p><code>app/js/controllers.js:</code></p>\n<pre><code>var phonecatApp = angular.module(&#39;phonecatApp&#39;, []);\n\nphonecatApp.controller(&#39;PhoneListCtrl&#39;, function ($scope) {\n  $scope.phones = [\n    {&#39;name&#39;: &#39;Nexus S&#39;,\n     &#39;snippet&#39;: &#39;Fast just got faster with Nexus S.&#39;},\n    {&#39;name&#39;: &#39;Motorola XOOM™ with Wi-Fi&#39;,\n     &#39;snippet&#39;: &#39;The Next, Next Generation tablet.&#39;},\n    {&#39;name&#39;: &#39;MOTOROLA XOOM™&#39;,\n     &#39;snippet&#39;: &#39;The Next, Next Generation tablet.&#39;}\n  ];\n});\n</code></pre><ol>\n<li>在html标签上定义的模块名字 <code>phonecatApp</code> ，在这里注册为 Angular 的 module。</li>\n<li>然后在这个module下注册了一个控制器——<code>PhoneListCtrl</code></li>\n</ol>\n<p>控制器让我们能够在 model 和 view 之间建立数据绑定。<code>PhoneListCtrl</code> 控制器绑定 phone data 到 <code>$scope</code> 。这个 scope 是 root scope 的 prototypical descendant（原型子孙）？？root scope在app 开始时被定义。这个控制器的scope可以使用到任何在控制器标签中的绑定。</p>\n<h3 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h3><p>在Angular中scope的概念十分的重要，他是将template、model和controller公共工作的粘合剂。<br>详细的Angular scope 介绍请翻墙看：<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope\" target=\"_blank\" rel=\"external\"> angular scope documentation.</a> ^_^</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"全局控制器\"><a href=\"#全局控制器\" class=\"headerlink\" title=\"全局控制器\"></a>全局控制器</h4><p>用Angular 的方法将控制器从视图中分离，我们可以方便的编写测试代码。如果控制器在全局作用域可用，我们可用一个虚拟的scope来实例化控制器：</p>\n<pre><code>describe(&#39;PhoneListCtrl&#39;, function(){\n\nit(&#39;should create &quot;phones&quot; model with 3 phones&#39;, function() {\n  var scope = {},\n      ctrl = new PhoneListCtrl(scope);\n\n  expect(scope.phones.length).toBe(3);\n});\n\n});\n</code></pre><p>在Angular中写单元测试挺方便啊O(∩_∩)O哈哈~<br>因为在软件开发中，测试是一个关键的步骤，所以Angular简化了测试，以鼓励coder们多写测试啊。</p>\n<h4 id=\"非全局控制器\"><a href=\"#非全局控制器\" class=\"headerlink\" title=\"非全局控制器\"></a>非全局控制器</h4><p>Angular提供了一个service服务——<code>$controller</code> 。他可以通过名字获取你的控制器。</p>\n<pre><code>describe(&#39;PhoneListCtrl&#39;, function(){\n\nbeforeEach(module(&#39;phonecatApp&#39;));\n\nit(&#39;should create &quot;phones&quot; model with 3 phones&#39;, inject(function($controller) {\n  var scope = {},\n      ctrl = $controller(&#39;PhoneListCtrl&#39;, {$scope:scope});\n\n  expect(scope.phones.length).toBe(3);\n}));\n\n});\n</code></pre><p>解释：</p>\n<ul>\n<li>告诉Angular 在每个测试之前加载 <code>phonecatApp</code> 模块</li>\n<li>让Angular 注册 <code>$controller</code> 服务到我们的测试函数</li>\n<li>用 <code>$controller</code> 来建立一个 <code>PhoneListCtrl</code> 的实例</li>\n<li>在实例中，我们来证实phones数组拥有三个记录的属性</li>\n</ul>\n<h3 id=\"Writing-and-Running-Tests-写跑测试\"><a href=\"#Writing-and-Running-Tests-写跑测试\" class=\"headerlink\" title=\"Writing and Running Tests 写跑测试\"></a>Writing and Running Tests 写跑测试</h3><p>angular-seed项目预先配置了使用 <strong>Karma</strong> 来跑单元测试，确保开跑前已经使用 <code>npm install</code> 安装了Karma相关的组件。</p>\n<p>使用 <code>npm test</code> 开跑：</p>\n<ul>\n<li>Karma 会打开一个浏览器的页面来跑你的测试，可以无视</li>\n<li><p>你会看到命令台输出（大概）：</p>\n<pre><code>info: Karma server started at http://localhost:9876/\ninfo (launcher): Starting  browser &quot;Chrome&quot;\ninfo (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n\nChrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)\n</code></pre><p>(^o^)/ success！！</p>\n</li>\n<li><p>当你修改你的test.js的源文件时，Karma会默认帮你重跑一遍，so sweet O(∩_∩)O</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>为了说明Angular怎样加强标准HTML，这一节会将一个纯html转为模板，Angular用他来展示一些数据集合。我们加的数据是两个手机的基本信息。</p>\n<h2 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1\"></a>step 1</h2><p>调整工作区到step1</p>\n<pre><code>git checkout -f step-1\n</code></pre><p>然后别忘了 <code>npm start</code> ，在浏览器上查看新的页面展示。</p>\n<p>这是个纯html的静态模板，下面看看Angular的动态模板是怎么弄的。马上就到了step 2。</p>\n<h2 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2\"></a>step 2</h2><pre><code>git checkout -f step-2\n</code></pre><p>Angular比较提倡使用 <strong>MVC 设计模式</strong> 来结耦代码。由于这个理念，这个步骤使用了一些 JS 代码来增加app中的 model，view 和 controller 组件。</p>\n<h3 id=\"View-and-Template\"><a href=\"#View-and-Template\" class=\"headerlink\" title=\"View and Template\"></a>View and Template</h3><p>在 Angular 中，视图是模型通过 HTML 模板的映射。这意味着，无论何时数据模型的变化，都能刷新绑定点而更新视图。</p>\n<p><code>app/index.html:</code></p>\n<pre><code>&lt;html ng-app=&quot;phonecatApp&quot;&gt;\n&lt;head&gt;\n  ...\n  &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body ng-controller=&quot;PhoneListCtrl&quot;&gt;\n\n  &lt;ul&gt;\n    &lt;li ng-repeat=&quot;phone in phones&quot;&gt;\n      {{phone.name}}\n      &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"ng-repeat\"><a href=\"#ng-repeat\" class=\"headerlink\" title=\"ng-repeat\"></a>ng-repeat</h3><p>我们将硬代码写的phone  list 替换为 <code>ngRepeat directive</code> 和两个 Angular expression。</p>\n<ul>\n<li>这个 <code>ng-repeat=&quot;phone in phones&quot;</code> 属性是一个Angular repeater指令。repeater让 Angular 为每个list里的phone建立 <code>&lt;li&gt;</code> 模板。总之就是模板中的 <code>for in</code> 循环。</li>\n</ul>\n<h3 id=\"ng-controller\"><a href=\"#ng-controller\" class=\"headerlink\" title=\"ng-controller\"></a>ng-controller</h3><p>这个指令绑定个 <code>PhoneListCtrl</code> 的 controller 到 body 上。数据 <code></code> 和 <code></code> 是他设置的，(⊙_⊙)。</p>\n<h3 id=\"ng-app\"><a href=\"#ng-app\" class=\"headerlink\" title=\"ng-app\"></a>ng-app</h3><p>前面出现的这个指令，现在给他赋值了之后，则表示 <code>phonecarApp</code> 是一个module模块名。这个模块包含着<code>PhoneListCtrl</code> 这个控制器。</p>\n<p>他们的关系图：</p>\n<p><img src=\"http://iamtutu.qiniudn.com/tutorial_02.png\" alt=\"关系图\"></p>\n<h3 id=\"Module-and-Controller\"><a href=\"#Module-and-Controller\" class=\"headerlink\" title=\"Module and Controller\"></a>Module and Controller</h3><p><code>app/js/controllers.js:</code></p>\n<pre><code>var phonecatApp = angular.module(&#39;phonecatApp&#39;, []);\n\nphonecatApp.controller(&#39;PhoneListCtrl&#39;, function ($scope) {\n  $scope.phones = [\n    {&#39;name&#39;: &#39;Nexus S&#39;,\n     &#39;snippet&#39;: &#39;Fast just got faster with Nexus S.&#39;},\n    {&#39;name&#39;: &#39;Motorola XOOM™ with Wi-Fi&#39;,\n     &#39;snippet&#39;: &#39;The Next, Next Generation tablet.&#39;},\n    {&#39;name&#39;: &#39;MOTOROLA XOOM™&#39;,\n     &#39;snippet&#39;: &#39;The Next, Next Generation tablet.&#39;}\n  ];\n});\n</code></pre><ol>\n<li>在html标签上定义的模块名字 <code>phonecatApp</code> ，在这里注册为 Angular 的 module。</li>\n<li>然后在这个module下注册了一个控制器——<code>PhoneListCtrl</code></li>\n</ol>\n<p>控制器让我们能够在 model 和 view 之间建立数据绑定。<code>PhoneListCtrl</code> 控制器绑定 phone data 到 <code>$scope</code> 。这个 scope 是 root scope 的 prototypical descendant（原型子孙）？？root scope在app 开始时被定义。这个控制器的scope可以使用到任何在控制器标签中的绑定。</p>\n<h3 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h3><p>在Angular中scope的概念十分的重要，他是将template、model和controller公共工作的粘合剂。<br>详细的Angular scope 介绍请翻墙看：<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope\"> angular scope documentation.</a> ^_^</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"全局控制器\"><a href=\"#全局控制器\" class=\"headerlink\" title=\"全局控制器\"></a>全局控制器</h4><p>用Angular 的方法将控制器从视图中分离，我们可以方便的编写测试代码。如果控制器在全局作用域可用，我们可用一个虚拟的scope来实例化控制器：</p>\n<pre><code>describe(&#39;PhoneListCtrl&#39;, function(){\n\nit(&#39;should create &quot;phones&quot; model with 3 phones&#39;, function() {\n  var scope = {},\n      ctrl = new PhoneListCtrl(scope);\n\n  expect(scope.phones.length).toBe(3);\n});\n\n});\n</code></pre><p>在Angular中写单元测试挺方便啊O(∩_∩)O哈哈~<br>因为在软件开发中，测试是一个关键的步骤，所以Angular简化了测试，以鼓励coder们多写测试啊。</p>\n<h4 id=\"非全局控制器\"><a href=\"#非全局控制器\" class=\"headerlink\" title=\"非全局控制器\"></a>非全局控制器</h4><p>Angular提供了一个service服务——<code>$controller</code> 。他可以通过名字获取你的控制器。</p>\n<pre><code>describe(&#39;PhoneListCtrl&#39;, function(){\n\nbeforeEach(module(&#39;phonecatApp&#39;));\n\nit(&#39;should create &quot;phones&quot; model with 3 phones&#39;, inject(function($controller) {\n  var scope = {},\n      ctrl = $controller(&#39;PhoneListCtrl&#39;, {$scope:scope});\n\n  expect(scope.phones.length).toBe(3);\n}));\n\n});\n</code></pre><p>解释：</p>\n<ul>\n<li>告诉Angular 在每个测试之前加载 <code>phonecatApp</code> 模块</li>\n<li>让Angular 注册 <code>$controller</code> 服务到我们的测试函数</li>\n<li>用 <code>$controller</code> 来建立一个 <code>PhoneListCtrl</code> 的实例</li>\n<li>在实例中，我们来证实phones数组拥有三个记录的属性</li>\n</ul>\n<h3 id=\"Writing-and-Running-Tests-写跑测试\"><a href=\"#Writing-and-Running-Tests-写跑测试\" class=\"headerlink\" title=\"Writing and Running Tests 写跑测试\"></a>Writing and Running Tests 写跑测试</h3><p>angular-seed项目预先配置了使用 <strong>Karma</strong> 来跑单元测试，确保开跑前已经使用 <code>npm install</code> 安装了Karma相关的组件。</p>\n<p>使用 <code>npm test</code> 开跑：</p>\n<ul>\n<li>Karma 会打开一个浏览器的页面来跑你的测试，可以无视</li>\n<li><p>你会看到命令台输出（大概）：</p>\n<pre><code>info: Karma server started at http://localhost:9876/\ninfo (launcher): Starting  browser &quot;Chrome&quot;\ninfo (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n\nChrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)\n</code></pre><p>(^o^)/ success！！</p>\n</li>\n<li><p>当你修改你的test.js的源文件时，Karma会默认帮你重跑一遍，so sweet O(∩_∩)O</p>\n</li>\n</ul>\n"},{"title":"Protractor 学习笔记","date":"2014-09-30T03:06:59.000Z","description":"安装 protractor 和他的基本用法","_content":"\n## 准备活动\n\n### 简介\n\nprotractor 是个 [Node.js](http://nodejs.org/) 程序。所以首先得安装 Node.js。然后就可以使用npm 安装 protractor 了。\n\n通常 protractor 使用 [Jasmine](http://jasmine.github.io/1.3/introduction.html) 测试框架作为他的测试接口。\n\n下面的教程的测试将使用一个独立的 Selenium Server 来控制浏览器。需要安装 JDK 来运行这个服务器。可以用 `java -version` 命令来测试是否安装成功 JDK。\n\n### 安装\n \n全局安装protractor\n```\nnpm install -g protractor\n```\n\n这个命令会安装两个命令行工具，protractor 和 webdriver-manager。尝试跑 `protractor --version` 确认安装成功。webdriver-manager 是一个辅助工具，他可以简单的让Selenium Server 的实例跑起来？？用这个命令可以让他来下载必要的 binaries：\n```\nwebdriver-manager update\n```\n\n现在可以打开一个服务器\n```\nwebdriver-manager start\n```\n\n这个命令会开启一个Selenium Server ，然后输出一串的 log 信息。你的 Protractor 测试将会把请求发到服务器来控制本地的浏览器。在整个教程中，请让服务器在后面撒欢的跑。你可以到这里看服务器的状态信息 http://localhost:4444/wd/hub 。\n\n\n## step 0 - 写一测试\n\n新开个命令行或终端窗口，并选个干净整洁的文件夹来做测试目录。\n\nProtractor 运行需要两个文件，一个是 **spec file** ，一个是 **configuration file**。\n\n我们先从一个简单的测试开始，内容是引导一个Angular app 例子和检验他的title。我们将会用到这里的 Super Calculator application —— http://juliemr.github.io/protractor-demo/\n\n将下面的代码 copy 到 spec.js 中：\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  it('should have a title', function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n\n    expect(browser.getTitle()).toEqual('Super Calculator');\n  });\n});\n```\n \n 这里 `describe` 和 `it` 语法来自 Jasmine 框架。`browser` 由 Protractor 全局创建的，他可以用来执行浏览器级别的命令，例如用 `browser` 导航。\n\n现在来创建配置文件，将下面的代码 copy 到 conf.js：\n```\n// conf.js\nexports.config = {\n  seleniumAddress: 'http://localhost:4444/wd/hub',\n  specs: ['spec.js']\n}\n```\n\n这个配置文件通知 Protractor 你的测试文件（specs）的位置，还有Selenium Server 的对话地址（seleniumAddress）。其他配置项使用默认的，Chrome是默认浏览器。\n\n现在运行测试\n```\nprotractor conf.js\n```\n\nOK! 我们会看到 Chrome 打开一个指向 Calculator 的窗口，然后又闪关了。测试结果输出应为 `1 tests, 1 assertion, 0 failures`。真是可喜可贺，我们第一个 Protractor 测试已经成功了 \\(^o^)/~\n\n## step 1 - 元素交互\n\n现在来修改下测试文件，让他与页面上的文件进行交互吧！变 ~ 身 ~\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  it('should add one and two', function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n    element(by.model('first')).sendKeys(1);\n    element(by.model('second')).sendKeys(2);\n\n    element(by.id('gobutton')).click();\n\n    expect(element(by.binding('latest')).getText()).\n        toEqual('5'); // This is wrong!\n  });\n});\n```\n\n这里也使用了两个 Protractor 创建的全局 `elemenet` 和 `by`。`element` 函数用来寻找页面 HTML 元素，他会返回一个 ElementFinder 对象，这个对象可与元素交互或者获取他们的信息（狗仔队~~）。在这个测试中，我们使用 `sendKeys` 来给 `<input>` 输入值，`click` 来点击按钮，`getText` 来返回元素的内容。\n\n`element` 需要一个定位仪参数。`by` 元素创建了定位仪，我们使用三个类型的定位仪。\n- `by.model('first')` 来查找元素 `ng-model=\"first\"`。\n-  `by.id('gobutton')` 来根据给定的id查找。\n-  `by.binding('latest')` 来发现绑定了latest变量的元素，即 `{ {latest} }`\n\n[关于定位仪 (by) 和元素查找器 (element) 的更多信息](http://angular.github.io/protractor/#/locators)\n\n运行测试\n```\nprotractor conf.js\n```\n\n1 + 2 == 5肯定会 failed 啦~\\(≧▽≦)/~啦啦啦 \n\n## step 2 - 多个测试\n\n稍微美化点，将两个测试结合起来，提出重复的部分\n\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  var firstNumber = element(by.model('first'));\n  var secondNumber = element(by.model('second'));\n  var goButton = element(by.id('gobutton'));\n  var latestResult = element(by.binding('latest'));\n\n  beforeEach(function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n  });\n\n  it('should have a title', function() {\n    expect(browser.getTitle()).toEqual('Super Calculator');\n  });\n\n  it('should add one and two', function() {\n    firstNumber.sendKeys(1);\n    secondNumber.sendKeys(2);\n\n    goButton.click();\n\n    expect(latestResult.getText()).toEqual('3');\n  });\n\n  it('should add four and six', function() {\n    // Fill this in.\n    expect(latestResult.getText()).toEqual('10');\n  });\n});\n```\n\n这里，我们将导航拉到一个 `beforeEach` 函数里，他会运行在每个 `it` 块前。\n\n## step 3 - 改变配置\n\n变 ~ 身 ~ \\(^o^)/~\n```\n// conf.js\nexports.config = {\n  seleniumAddress: 'http://localhost:4444/wd/hub',\n  specs: ['spec.js'],\n  capabilities: {\n    browserName: 'firefox'\n  }\n}\n```\n\n尝试重新运行测试。我们可以看到 Firefox 代替 chrome 跑了出来。`capabilities` 对象描述了测试使用的浏览器。所有可用的选项，看这里 [the reference config file](https://github.com/angular/protractor/blob/master/docs/referenceConf.js)\n\n还可以一次在多个浏览器中跑测试，像这样\n```\n// conf.js\nexports.config = {\n  seleniumAddress: 'http://localhost:4444/wd/hub',\n  specs: ['spec.js'],\n  multiCapabilities: [{\n    browserName: 'firefox'\n  }, {\n    browserName: 'chrome'\n  }]\n}\n```\n大家可以试试看效果。Chrome 和 Firefox 会同步进行测试，命令行中的结果是独立显示的。\n\n我的 Firefox 没有安装在默认 C 盘的路径上，所以有报错 `Cannot find firefox binary in PATH. Make sure firefox is installed.` ，把 `firefox.exe` 的路径加在了系统变量 PATH ，也没有解决。\n\n这个问题修改的[参考文章](http://sariyalee.iteye.com/blog/1688271)，万万没想到，我最后还是重装了Firefox。不知道以后还能不能愉快地自定义安装地址了呢╮(╯▽╰)╭\n\n## step 4 - 元素列表\n\n重新回到测试文件，有时会遇到多个元素的列表需要处理的问题。可以用 `element.all` 处理，这个方法会返回一个 ElementArrayFinder。在我们的这个 Calculator app 中，每个操作都记录在一个历史的表格中，使用的是 Angular 的 `ng-repeater`。下面让我们来测试这些操作是否记录在表格中。\n\n变 ~ 身 ~ \\(^o^)/~\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  var firstNumber = element(by.model('first'));\n  var secondNumber = element(by.model('second'));\n  var goButton = element(by.id('gobutton'));\n  var latestResult = element(by.binding('latest'));\n  var history = element.all(by.repeater('result in memory'));\n\n  function add(a, b) {\n    firstNumber.sendKeys(a);\n    secondNumber.sendKeys(b);\n    goButton.click();\n  }\n\n  beforeEach(function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n  });\n\n  it('should have a history', function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.count()).toEqual(2);\n\n    add(5, 6);\n\n    expect(history.count()).toEqual(0); // This is wrong!\n  });\n});\n```\n\n这里我们做了两件事：\n- 首先，我们创建了一个辅助函数`add`，并且增加了变量 `history`。\n- 我们用了 `element.all` 结合 `by.repeater` 定位仪来获得一个 ElementArrayFinder。在 spec 文件中，我们用了count函数计算了历史记录的应有 length 。\n\n`ElementArrayFinder` 处理 `add` 外还有许多方法。用 `last` 来获得一个匹配定位仪获得元素集中的最后一个元素。\n\n```\nit('should have a history', function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.last().getText()).toContain('1 + 2');\n    expect(history.first().getText()).toContain('foo'); // This is wrong!\n  });\n``` \n因为 Calculator 展示了最老的结果在底部，我们用 `toContain` Jasmine 匹配来假设元素的文字包含有“1+2”。\n\nElementArrayFinder 还有 `each`、`map`、 `filter` 和 `reduce` 这些方法和 JS 的数组方法很相似。[更多 API 细节看这里](http://angular.github.io/protractor/#/api?view=ElementArrayFinder)\n\n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/0930-protractor.md","raw":"title: Protractor 学习笔记\ndate: 2014-09-30 11:06:59\ncategories: test\ndescription: 安装 protractor 和他的基本用法\n---\n\n## 准备活动\n\n### 简介\n\nprotractor 是个 [Node.js](http://nodejs.org/) 程序。所以首先得安装 Node.js。然后就可以使用npm 安装 protractor 了。\n\n通常 protractor 使用 [Jasmine](http://jasmine.github.io/1.3/introduction.html) 测试框架作为他的测试接口。\n\n下面的教程的测试将使用一个独立的 Selenium Server 来控制浏览器。需要安装 JDK 来运行这个服务器。可以用 `java -version` 命令来测试是否安装成功 JDK。\n\n### 安装\n \n全局安装protractor\n```\nnpm install -g protractor\n```\n\n这个命令会安装两个命令行工具，protractor 和 webdriver-manager。尝试跑 `protractor --version` 确认安装成功。webdriver-manager 是一个辅助工具，他可以简单的让Selenium Server 的实例跑起来？？用这个命令可以让他来下载必要的 binaries：\n```\nwebdriver-manager update\n```\n\n现在可以打开一个服务器\n```\nwebdriver-manager start\n```\n\n这个命令会开启一个Selenium Server ，然后输出一串的 log 信息。你的 Protractor 测试将会把请求发到服务器来控制本地的浏览器。在整个教程中，请让服务器在后面撒欢的跑。你可以到这里看服务器的状态信息 http://localhost:4444/wd/hub 。\n\n\n## step 0 - 写一测试\n\n新开个命令行或终端窗口，并选个干净整洁的文件夹来做测试目录。\n\nProtractor 运行需要两个文件，一个是 **spec file** ，一个是 **configuration file**。\n\n我们先从一个简单的测试开始，内容是引导一个Angular app 例子和检验他的title。我们将会用到这里的 Super Calculator application —— http://juliemr.github.io/protractor-demo/\n\n将下面的代码 copy 到 spec.js 中：\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  it('should have a title', function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n\n    expect(browser.getTitle()).toEqual('Super Calculator');\n  });\n});\n```\n \n 这里 `describe` 和 `it` 语法来自 Jasmine 框架。`browser` 由 Protractor 全局创建的，他可以用来执行浏览器级别的命令，例如用 `browser` 导航。\n\n现在来创建配置文件，将下面的代码 copy 到 conf.js：\n```\n// conf.js\nexports.config = {\n  seleniumAddress: 'http://localhost:4444/wd/hub',\n  specs: ['spec.js']\n}\n```\n\n这个配置文件通知 Protractor 你的测试文件（specs）的位置，还有Selenium Server 的对话地址（seleniumAddress）。其他配置项使用默认的，Chrome是默认浏览器。\n\n现在运行测试\n```\nprotractor conf.js\n```\n\nOK! 我们会看到 Chrome 打开一个指向 Calculator 的窗口，然后又闪关了。测试结果输出应为 `1 tests, 1 assertion, 0 failures`。真是可喜可贺，我们第一个 Protractor 测试已经成功了 \\(^o^)/~\n\n## step 1 - 元素交互\n\n现在来修改下测试文件，让他与页面上的文件进行交互吧！变 ~ 身 ~\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  it('should add one and two', function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n    element(by.model('first')).sendKeys(1);\n    element(by.model('second')).sendKeys(2);\n\n    element(by.id('gobutton')).click();\n\n    expect(element(by.binding('latest')).getText()).\n        toEqual('5'); // This is wrong!\n  });\n});\n```\n\n这里也使用了两个 Protractor 创建的全局 `elemenet` 和 `by`。`element` 函数用来寻找页面 HTML 元素，他会返回一个 ElementFinder 对象，这个对象可与元素交互或者获取他们的信息（狗仔队~~）。在这个测试中，我们使用 `sendKeys` 来给 `<input>` 输入值，`click` 来点击按钮，`getText` 来返回元素的内容。\n\n`element` 需要一个定位仪参数。`by` 元素创建了定位仪，我们使用三个类型的定位仪。\n- `by.model('first')` 来查找元素 `ng-model=\"first\"`。\n-  `by.id('gobutton')` 来根据给定的id查找。\n-  `by.binding('latest')` 来发现绑定了latest变量的元素，即 `{ {latest} }`\n\n[关于定位仪 (by) 和元素查找器 (element) 的更多信息](http://angular.github.io/protractor/#/locators)\n\n运行测试\n```\nprotractor conf.js\n```\n\n1 + 2 == 5肯定会 failed 啦~\\(≧▽≦)/~啦啦啦 \n\n## step 2 - 多个测试\n\n稍微美化点，将两个测试结合起来，提出重复的部分\n\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  var firstNumber = element(by.model('first'));\n  var secondNumber = element(by.model('second'));\n  var goButton = element(by.id('gobutton'));\n  var latestResult = element(by.binding('latest'));\n\n  beforeEach(function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n  });\n\n  it('should have a title', function() {\n    expect(browser.getTitle()).toEqual('Super Calculator');\n  });\n\n  it('should add one and two', function() {\n    firstNumber.sendKeys(1);\n    secondNumber.sendKeys(2);\n\n    goButton.click();\n\n    expect(latestResult.getText()).toEqual('3');\n  });\n\n  it('should add four and six', function() {\n    // Fill this in.\n    expect(latestResult.getText()).toEqual('10');\n  });\n});\n```\n\n这里，我们将导航拉到一个 `beforeEach` 函数里，他会运行在每个 `it` 块前。\n\n## step 3 - 改变配置\n\n变 ~ 身 ~ \\(^o^)/~\n```\n// conf.js\nexports.config = {\n  seleniumAddress: 'http://localhost:4444/wd/hub',\n  specs: ['spec.js'],\n  capabilities: {\n    browserName: 'firefox'\n  }\n}\n```\n\n尝试重新运行测试。我们可以看到 Firefox 代替 chrome 跑了出来。`capabilities` 对象描述了测试使用的浏览器。所有可用的选项，看这里 [the reference config file](https://github.com/angular/protractor/blob/master/docs/referenceConf.js)\n\n还可以一次在多个浏览器中跑测试，像这样\n```\n// conf.js\nexports.config = {\n  seleniumAddress: 'http://localhost:4444/wd/hub',\n  specs: ['spec.js'],\n  multiCapabilities: [{\n    browserName: 'firefox'\n  }, {\n    browserName: 'chrome'\n  }]\n}\n```\n大家可以试试看效果。Chrome 和 Firefox 会同步进行测试，命令行中的结果是独立显示的。\n\n我的 Firefox 没有安装在默认 C 盘的路径上，所以有报错 `Cannot find firefox binary in PATH. Make sure firefox is installed.` ，把 `firefox.exe` 的路径加在了系统变量 PATH ，也没有解决。\n\n这个问题修改的[参考文章](http://sariyalee.iteye.com/blog/1688271)，万万没想到，我最后还是重装了Firefox。不知道以后还能不能愉快地自定义安装地址了呢╮(╯▽╰)╭\n\n## step 4 - 元素列表\n\n重新回到测试文件，有时会遇到多个元素的列表需要处理的问题。可以用 `element.all` 处理，这个方法会返回一个 ElementArrayFinder。在我们的这个 Calculator app 中，每个操作都记录在一个历史的表格中，使用的是 Angular 的 `ng-repeater`。下面让我们来测试这些操作是否记录在表格中。\n\n变 ~ 身 ~ \\(^o^)/~\n```\n// spec.js\ndescribe('angularjs homepage', function() {\n  var firstNumber = element(by.model('first'));\n  var secondNumber = element(by.model('second'));\n  var goButton = element(by.id('gobutton'));\n  var latestResult = element(by.binding('latest'));\n  var history = element.all(by.repeater('result in memory'));\n\n  function add(a, b) {\n    firstNumber.sendKeys(a);\n    secondNumber.sendKeys(b);\n    goButton.click();\n  }\n\n  beforeEach(function() {\n    browser.get('http://juliemr.github.io/protractor-demo/');\n  });\n\n  it('should have a history', function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.count()).toEqual(2);\n\n    add(5, 6);\n\n    expect(history.count()).toEqual(0); // This is wrong!\n  });\n});\n```\n\n这里我们做了两件事：\n- 首先，我们创建了一个辅助函数`add`，并且增加了变量 `history`。\n- 我们用了 `element.all` 结合 `by.repeater` 定位仪来获得一个 ElementArrayFinder。在 spec 文件中，我们用了count函数计算了历史记录的应有 length 。\n\n`ElementArrayFinder` 处理 `add` 外还有许多方法。用 `last` 来获得一个匹配定位仪获得元素集中的最后一个元素。\n\n```\nit('should have a history', function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.last().getText()).toContain('1 + 2');\n    expect(history.first().getText()).toContain('foo'); // This is wrong!\n  });\n``` \n因为 Calculator 展示了最老的结果在底部，我们用 `toContain` Jasmine 匹配来假设元素的文字包含有“1+2”。\n\nElementArrayFinder 还有 `each`、`map`、 `filter` 和 `reduce` 这些方法和 JS 的数组方法很相似。[更多 API 细节看这里](http://angular.github.io/protractor/#/api?view=ElementArrayFinder)\n\n> Written with [StackEdit](https://stackedit.io/).","slug":"0930-protractor","published":1,"updated":"2015-04-30T02:32:00.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphb0010ok1v380c0ruv","content":"<h2 id=\"准备活动\"><a href=\"#准备活动\" class=\"headerlink\" title=\"准备活动\"></a>准备活动</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>protractor 是个 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a> 程序。所以首先得安装 Node.js。然后就可以使用npm 安装 protractor 了。</p>\n<p>通常 protractor 使用 <a href=\"http://jasmine.github.io/1.3/introduction.html\" target=\"_blank\" rel=\"external\">Jasmine</a> 测试框架作为他的测试接口。</p>\n<p>下面的教程的测试将使用一个独立的 Selenium Server 来控制浏览器。需要安装 JDK 来运行这个服务器。可以用 <code>java -version</code> 命令来测试是否安装成功 JDK。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>全局安装protractor</p>\n<pre><code>npm install -g protractor\n</code></pre><p>这个命令会安装两个命令行工具，protractor 和 webdriver-manager。尝试跑 <code>protractor --version</code> 确认安装成功。webdriver-manager 是一个辅助工具，他可以简单的让Selenium Server 的实例跑起来？？用这个命令可以让他来下载必要的 binaries：</p>\n<pre><code>webdriver-manager update\n</code></pre><p>现在可以打开一个服务器</p>\n<pre><code>webdriver-manager start\n</code></pre><p>这个命令会开启一个Selenium Server ，然后输出一串的 log 信息。你的 Protractor 测试将会把请求发到服务器来控制本地的浏览器。在整个教程中，请让服务器在后面撒欢的跑。你可以到这里看服务器的状态信息 <a href=\"http://localhost:4444/wd/hub\" target=\"_blank\" rel=\"external\">http://localhost:4444/wd/hub</a> 。</p>\n<h2 id=\"step-0-写一测试\"><a href=\"#step-0-写一测试\" class=\"headerlink\" title=\"step 0 - 写一测试\"></a>step 0 - 写一测试</h2><p>新开个命令行或终端窗口，并选个干净整洁的文件夹来做测试目录。</p>\n<p>Protractor 运行需要两个文件，一个是 <strong>spec file</strong> ，一个是 <strong>configuration file</strong>。</p>\n<p>我们先从一个简单的测试开始，内容是引导一个Angular app 例子和检验他的title。我们将会用到这里的 Super Calculator application —— <a href=\"http://juliemr.github.io/protractor-demo/\" target=\"_blank\" rel=\"external\">http://juliemr.github.io/protractor-demo/</a></p>\n<p>将下面的代码 copy 到 spec.js 中：</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  it(&#39;should have a title&#39;, function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n\n    expect(browser.getTitle()).toEqual(&#39;Super Calculator&#39;);\n  });\n});\n</code></pre><p> 这里 <code>describe</code> 和 <code>it</code> 语法来自 Jasmine 框架。<code>browser</code> 由 Protractor 全局创建的，他可以用来执行浏览器级别的命令，例如用 <code>browser</code> 导航。</p>\n<p>现在来创建配置文件，将下面的代码 copy 到 conf.js：</p>\n<pre><code>// conf.js\nexports.config = {\n  seleniumAddress: &#39;http://localhost:4444/wd/hub&#39;,\n  specs: [&#39;spec.js&#39;]\n}\n</code></pre><p>这个配置文件通知 Protractor 你的测试文件（specs）的位置，还有Selenium Server 的对话地址（seleniumAddress）。其他配置项使用默认的，Chrome是默认浏览器。</p>\n<p>现在运行测试</p>\n<pre><code>protractor conf.js\n</code></pre><p>OK! 我们会看到 Chrome 打开一个指向 Calculator 的窗口，然后又闪关了。测试结果输出应为 <code>1 tests, 1 assertion, 0 failures</code>。真是可喜可贺，我们第一个 Protractor 测试已经成功了 (^o^)/~</p>\n<h2 id=\"step-1-元素交互\"><a href=\"#step-1-元素交互\" class=\"headerlink\" title=\"step 1 - 元素交互\"></a>step 1 - 元素交互</h2><p>现在来修改下测试文件，让他与页面上的文件进行交互吧！变 ~ 身 ~</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  it(&#39;should add one and two&#39;, function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n    element(by.model(&#39;first&#39;)).sendKeys(1);\n    element(by.model(&#39;second&#39;)).sendKeys(2);\n\n    element(by.id(&#39;gobutton&#39;)).click();\n\n    expect(element(by.binding(&#39;latest&#39;)).getText()).\n        toEqual(&#39;5&#39;); // This is wrong!\n  });\n});\n</code></pre><p>这里也使用了两个 Protractor 创建的全局 <code>elemenet</code> 和 <code>by</code>。<code>element</code> 函数用来寻找页面 HTML 元素，他会返回一个 ElementFinder 对象，这个对象可与元素交互或者获取他们的信息（狗仔队~~）。在这个测试中，我们使用 <code>sendKeys</code> 来给 <code>&lt;input&gt;</code> 输入值，<code>click</code> 来点击按钮，<code>getText</code> 来返回元素的内容。</p>\n<p><code>element</code> 需要一个定位仪参数。<code>by</code> 元素创建了定位仪，我们使用三个类型的定位仪。</p>\n<ul>\n<li><code>by.model(&#39;first&#39;)</code> 来查找元素 <code>ng-model=&quot;first&quot;</code>。</li>\n<li><code>by.id(&#39;gobutton&#39;)</code> 来根据给定的id查找。</li>\n<li><code>by.binding(&#39;latest&#39;)</code> 来发现绑定了latest变量的元素，即 <code>{ {latest} }</code></li>\n</ul>\n<p><a href=\"http://angular.github.io/protractor/#/locators\" target=\"_blank\" rel=\"external\">关于定位仪 (by) 和元素查找器 (element) 的更多信息</a></p>\n<p>运行测试</p>\n<pre><code>protractor conf.js\n</code></pre><p>1 + 2 == 5肯定会 failed 啦~(≧▽≦)/~啦啦啦 </p>\n<h2 id=\"step-2-多个测试\"><a href=\"#step-2-多个测试\" class=\"headerlink\" title=\"step 2 - 多个测试\"></a>step 2 - 多个测试</h2><p>稍微美化点，将两个测试结合起来，提出重复的部分</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  var firstNumber = element(by.model(&#39;first&#39;));\n  var secondNumber = element(by.model(&#39;second&#39;));\n  var goButton = element(by.id(&#39;gobutton&#39;));\n  var latestResult = element(by.binding(&#39;latest&#39;));\n\n  beforeEach(function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n  });\n\n  it(&#39;should have a title&#39;, function() {\n    expect(browser.getTitle()).toEqual(&#39;Super Calculator&#39;);\n  });\n\n  it(&#39;should add one and two&#39;, function() {\n    firstNumber.sendKeys(1);\n    secondNumber.sendKeys(2);\n\n    goButton.click();\n\n    expect(latestResult.getText()).toEqual(&#39;3&#39;);\n  });\n\n  it(&#39;should add four and six&#39;, function() {\n    // Fill this in.\n    expect(latestResult.getText()).toEqual(&#39;10&#39;);\n  });\n});\n</code></pre><p>这里，我们将导航拉到一个 <code>beforeEach</code> 函数里，他会运行在每个 <code>it</code> 块前。</p>\n<h2 id=\"step-3-改变配置\"><a href=\"#step-3-改变配置\" class=\"headerlink\" title=\"step 3 - 改变配置\"></a>step 3 - 改变配置</h2><p>变 ~ 身 ~ (^o^)/~</p>\n<pre><code>// conf.js\nexports.config = {\n  seleniumAddress: &#39;http://localhost:4444/wd/hub&#39;,\n  specs: [&#39;spec.js&#39;],\n  capabilities: {\n    browserName: &#39;firefox&#39;\n  }\n}\n</code></pre><p>尝试重新运行测试。我们可以看到 Firefox 代替 chrome 跑了出来。<code>capabilities</code> 对象描述了测试使用的浏览器。所有可用的选项，看这里 <a href=\"https://github.com/angular/protractor/blob/master/docs/referenceConf.js\" target=\"_blank\" rel=\"external\">the reference config file</a></p>\n<p>还可以一次在多个浏览器中跑测试，像这样</p>\n<pre><code>// conf.js\nexports.config = {\n  seleniumAddress: &#39;http://localhost:4444/wd/hub&#39;,\n  specs: [&#39;spec.js&#39;],\n  multiCapabilities: [{\n    browserName: &#39;firefox&#39;\n  }, {\n    browserName: &#39;chrome&#39;\n  }]\n}\n</code></pre><p>大家可以试试看效果。Chrome 和 Firefox 会同步进行测试，命令行中的结果是独立显示的。</p>\n<p>我的 Firefox 没有安装在默认 C 盘的路径上，所以有报错 <code>Cannot find firefox binary in PATH. Make sure firefox is installed.</code> ，把 <code>firefox.exe</code> 的路径加在了系统变量 PATH ，也没有解决。</p>\n<p>这个问题修改的<a href=\"http://sariyalee.iteye.com/blog/1688271\" target=\"_blank\" rel=\"external\">参考文章</a>，万万没想到，我最后还是重装了Firefox。不知道以后还能不能愉快地自定义安装地址了呢╮(╯▽╰)╭</p>\n<h2 id=\"step-4-元素列表\"><a href=\"#step-4-元素列表\" class=\"headerlink\" title=\"step 4 - 元素列表\"></a>step 4 - 元素列表</h2><p>重新回到测试文件，有时会遇到多个元素的列表需要处理的问题。可以用 <code>element.all</code> 处理，这个方法会返回一个 ElementArrayFinder。在我们的这个 Calculator app 中，每个操作都记录在一个历史的表格中，使用的是 Angular 的 <code>ng-repeater</code>。下面让我们来测试这些操作是否记录在表格中。</p>\n<p>变 ~ 身 ~ (^o^)/~</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  var firstNumber = element(by.model(&#39;first&#39;));\n  var secondNumber = element(by.model(&#39;second&#39;));\n  var goButton = element(by.id(&#39;gobutton&#39;));\n  var latestResult = element(by.binding(&#39;latest&#39;));\n  var history = element.all(by.repeater(&#39;result in memory&#39;));\n\n  function add(a, b) {\n    firstNumber.sendKeys(a);\n    secondNumber.sendKeys(b);\n    goButton.click();\n  }\n\n  beforeEach(function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n  });\n\n  it(&#39;should have a history&#39;, function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.count()).toEqual(2);\n\n    add(5, 6);\n\n    expect(history.count()).toEqual(0); // This is wrong!\n  });\n});\n</code></pre><p>这里我们做了两件事：</p>\n<ul>\n<li>首先，我们创建了一个辅助函数<code>add</code>，并且增加了变量 <code>history</code>。</li>\n<li>我们用了 <code>element.all</code> 结合 <code>by.repeater</code> 定位仪来获得一个 ElementArrayFinder。在 spec 文件中，我们用了count函数计算了历史记录的应有 length 。</li>\n</ul>\n<p><code>ElementArrayFinder</code> 处理 <code>add</code> 外还有许多方法。用 <code>last</code> 来获得一个匹配定位仪获得元素集中的最后一个元素。</p>\n<pre><code>it(&#39;should have a history&#39;, function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.last().getText()).toContain(&#39;1 + 2&#39;);\n    expect(history.first().getText()).toContain(&#39;foo&#39;); // This is wrong!\n  });\n</code></pre><p>因为 Calculator 展示了最老的结果在底部，我们用 <code>toContain</code> Jasmine 匹配来假设元素的文字包含有“1+2”。</p>\n<p>ElementArrayFinder 还有 <code>each</code>、<code>map</code>、 <code>filter</code> 和 <code>reduce</code> 这些方法和 JS 的数组方法很相似。<a href=\"http://angular.github.io/protractor/#/api?view=ElementArrayFinder\" target=\"_blank\" rel=\"external\">更多 API 细节看这里</a></p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"准备活动\"><a href=\"#准备活动\" class=\"headerlink\" title=\"准备活动\"></a>准备活动</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>protractor 是个 <a href=\"http://nodejs.org/\">Node.js</a> 程序。所以首先得安装 Node.js。然后就可以使用npm 安装 protractor 了。</p>\n<p>通常 protractor 使用 <a href=\"http://jasmine.github.io/1.3/introduction.html\">Jasmine</a> 测试框架作为他的测试接口。</p>\n<p>下面的教程的测试将使用一个独立的 Selenium Server 来控制浏览器。需要安装 JDK 来运行这个服务器。可以用 <code>java -version</code> 命令来测试是否安装成功 JDK。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>全局安装protractor</p>\n<pre><code>npm install -g protractor\n</code></pre><p>这个命令会安装两个命令行工具，protractor 和 webdriver-manager。尝试跑 <code>protractor --version</code> 确认安装成功。webdriver-manager 是一个辅助工具，他可以简单的让Selenium Server 的实例跑起来？？用这个命令可以让他来下载必要的 binaries：</p>\n<pre><code>webdriver-manager update\n</code></pre><p>现在可以打开一个服务器</p>\n<pre><code>webdriver-manager start\n</code></pre><p>这个命令会开启一个Selenium Server ，然后输出一串的 log 信息。你的 Protractor 测试将会把请求发到服务器来控制本地的浏览器。在整个教程中，请让服务器在后面撒欢的跑。你可以到这里看服务器的状态信息 <a href=\"http://localhost:4444/wd/hub\">http://localhost:4444/wd/hub</a> 。</p>\n<h2 id=\"step-0-写一测试\"><a href=\"#step-0-写一测试\" class=\"headerlink\" title=\"step 0 - 写一测试\"></a>step 0 - 写一测试</h2><p>新开个命令行或终端窗口，并选个干净整洁的文件夹来做测试目录。</p>\n<p>Protractor 运行需要两个文件，一个是 <strong>spec file</strong> ，一个是 <strong>configuration file</strong>。</p>\n<p>我们先从一个简单的测试开始，内容是引导一个Angular app 例子和检验他的title。我们将会用到这里的 Super Calculator application —— <a href=\"http://juliemr.github.io/protractor-demo/\">http://juliemr.github.io/protractor-demo/</a></p>\n<p>将下面的代码 copy 到 spec.js 中：</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  it(&#39;should have a title&#39;, function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n\n    expect(browser.getTitle()).toEqual(&#39;Super Calculator&#39;);\n  });\n});\n</code></pre><p> 这里 <code>describe</code> 和 <code>it</code> 语法来自 Jasmine 框架。<code>browser</code> 由 Protractor 全局创建的，他可以用来执行浏览器级别的命令，例如用 <code>browser</code> 导航。</p>\n<p>现在来创建配置文件，将下面的代码 copy 到 conf.js：</p>\n<pre><code>// conf.js\nexports.config = {\n  seleniumAddress: &#39;http://localhost:4444/wd/hub&#39;,\n  specs: [&#39;spec.js&#39;]\n}\n</code></pre><p>这个配置文件通知 Protractor 你的测试文件（specs）的位置，还有Selenium Server 的对话地址（seleniumAddress）。其他配置项使用默认的，Chrome是默认浏览器。</p>\n<p>现在运行测试</p>\n<pre><code>protractor conf.js\n</code></pre><p>OK! 我们会看到 Chrome 打开一个指向 Calculator 的窗口，然后又闪关了。测试结果输出应为 <code>1 tests, 1 assertion, 0 failures</code>。真是可喜可贺，我们第一个 Protractor 测试已经成功了 (^o^)/~</p>\n<h2 id=\"step-1-元素交互\"><a href=\"#step-1-元素交互\" class=\"headerlink\" title=\"step 1 - 元素交互\"></a>step 1 - 元素交互</h2><p>现在来修改下测试文件，让他与页面上的文件进行交互吧！变 ~ 身 ~</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  it(&#39;should add one and two&#39;, function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n    element(by.model(&#39;first&#39;)).sendKeys(1);\n    element(by.model(&#39;second&#39;)).sendKeys(2);\n\n    element(by.id(&#39;gobutton&#39;)).click();\n\n    expect(element(by.binding(&#39;latest&#39;)).getText()).\n        toEqual(&#39;5&#39;); // This is wrong!\n  });\n});\n</code></pre><p>这里也使用了两个 Protractor 创建的全局 <code>elemenet</code> 和 <code>by</code>。<code>element</code> 函数用来寻找页面 HTML 元素，他会返回一个 ElementFinder 对象，这个对象可与元素交互或者获取他们的信息（狗仔队~~）。在这个测试中，我们使用 <code>sendKeys</code> 来给 <code>&lt;input&gt;</code> 输入值，<code>click</code> 来点击按钮，<code>getText</code> 来返回元素的内容。</p>\n<p><code>element</code> 需要一个定位仪参数。<code>by</code> 元素创建了定位仪，我们使用三个类型的定位仪。</p>\n<ul>\n<li><code>by.model(&#39;first&#39;)</code> 来查找元素 <code>ng-model=&quot;first&quot;</code>。</li>\n<li><code>by.id(&#39;gobutton&#39;)</code> 来根据给定的id查找。</li>\n<li><code>by.binding(&#39;latest&#39;)</code> 来发现绑定了latest变量的元素，即 <code>{ {latest} }</code></li>\n</ul>\n<p><a href=\"http://angular.github.io/protractor/#/locators\">关于定位仪 (by) 和元素查找器 (element) 的更多信息</a></p>\n<p>运行测试</p>\n<pre><code>protractor conf.js\n</code></pre><p>1 + 2 == 5肯定会 failed 啦~(≧▽≦)/~啦啦啦 </p>\n<h2 id=\"step-2-多个测试\"><a href=\"#step-2-多个测试\" class=\"headerlink\" title=\"step 2 - 多个测试\"></a>step 2 - 多个测试</h2><p>稍微美化点，将两个测试结合起来，提出重复的部分</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  var firstNumber = element(by.model(&#39;first&#39;));\n  var secondNumber = element(by.model(&#39;second&#39;));\n  var goButton = element(by.id(&#39;gobutton&#39;));\n  var latestResult = element(by.binding(&#39;latest&#39;));\n\n  beforeEach(function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n  });\n\n  it(&#39;should have a title&#39;, function() {\n    expect(browser.getTitle()).toEqual(&#39;Super Calculator&#39;);\n  });\n\n  it(&#39;should add one and two&#39;, function() {\n    firstNumber.sendKeys(1);\n    secondNumber.sendKeys(2);\n\n    goButton.click();\n\n    expect(latestResult.getText()).toEqual(&#39;3&#39;);\n  });\n\n  it(&#39;should add four and six&#39;, function() {\n    // Fill this in.\n    expect(latestResult.getText()).toEqual(&#39;10&#39;);\n  });\n});\n</code></pre><p>这里，我们将导航拉到一个 <code>beforeEach</code> 函数里，他会运行在每个 <code>it</code> 块前。</p>\n<h2 id=\"step-3-改变配置\"><a href=\"#step-3-改变配置\" class=\"headerlink\" title=\"step 3 - 改变配置\"></a>step 3 - 改变配置</h2><p>变 ~ 身 ~ (^o^)/~</p>\n<pre><code>// conf.js\nexports.config = {\n  seleniumAddress: &#39;http://localhost:4444/wd/hub&#39;,\n  specs: [&#39;spec.js&#39;],\n  capabilities: {\n    browserName: &#39;firefox&#39;\n  }\n}\n</code></pre><p>尝试重新运行测试。我们可以看到 Firefox 代替 chrome 跑了出来。<code>capabilities</code> 对象描述了测试使用的浏览器。所有可用的选项，看这里 <a href=\"https://github.com/angular/protractor/blob/master/docs/referenceConf.js\">the reference config file</a></p>\n<p>还可以一次在多个浏览器中跑测试，像这样</p>\n<pre><code>// conf.js\nexports.config = {\n  seleniumAddress: &#39;http://localhost:4444/wd/hub&#39;,\n  specs: [&#39;spec.js&#39;],\n  multiCapabilities: [{\n    browserName: &#39;firefox&#39;\n  }, {\n    browserName: &#39;chrome&#39;\n  }]\n}\n</code></pre><p>大家可以试试看效果。Chrome 和 Firefox 会同步进行测试，命令行中的结果是独立显示的。</p>\n<p>我的 Firefox 没有安装在默认 C 盘的路径上，所以有报错 <code>Cannot find firefox binary in PATH. Make sure firefox is installed.</code> ，把 <code>firefox.exe</code> 的路径加在了系统变量 PATH ，也没有解决。</p>\n<p>这个问题修改的<a href=\"http://sariyalee.iteye.com/blog/1688271\">参考文章</a>，万万没想到，我最后还是重装了Firefox。不知道以后还能不能愉快地自定义安装地址了呢╮(╯▽╰)╭</p>\n<h2 id=\"step-4-元素列表\"><a href=\"#step-4-元素列表\" class=\"headerlink\" title=\"step 4 - 元素列表\"></a>step 4 - 元素列表</h2><p>重新回到测试文件，有时会遇到多个元素的列表需要处理的问题。可以用 <code>element.all</code> 处理，这个方法会返回一个 ElementArrayFinder。在我们的这个 Calculator app 中，每个操作都记录在一个历史的表格中，使用的是 Angular 的 <code>ng-repeater</code>。下面让我们来测试这些操作是否记录在表格中。</p>\n<p>变 ~ 身 ~ (^o^)/~</p>\n<pre><code>// spec.js\ndescribe(&#39;angularjs homepage&#39;, function() {\n  var firstNumber = element(by.model(&#39;first&#39;));\n  var secondNumber = element(by.model(&#39;second&#39;));\n  var goButton = element(by.id(&#39;gobutton&#39;));\n  var latestResult = element(by.binding(&#39;latest&#39;));\n  var history = element.all(by.repeater(&#39;result in memory&#39;));\n\n  function add(a, b) {\n    firstNumber.sendKeys(a);\n    secondNumber.sendKeys(b);\n    goButton.click();\n  }\n\n  beforeEach(function() {\n    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);\n  });\n\n  it(&#39;should have a history&#39;, function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.count()).toEqual(2);\n\n    add(5, 6);\n\n    expect(history.count()).toEqual(0); // This is wrong!\n  });\n});\n</code></pre><p>这里我们做了两件事：</p>\n<ul>\n<li>首先，我们创建了一个辅助函数<code>add</code>，并且增加了变量 <code>history</code>。</li>\n<li>我们用了 <code>element.all</code> 结合 <code>by.repeater</code> 定位仪来获得一个 ElementArrayFinder。在 spec 文件中，我们用了count函数计算了历史记录的应有 length 。</li>\n</ul>\n<p><code>ElementArrayFinder</code> 处理 <code>add</code> 外还有许多方法。用 <code>last</code> 来获得一个匹配定位仪获得元素集中的最后一个元素。</p>\n<pre><code>it(&#39;should have a history&#39;, function() {\n    add(1, 2);\n    add(3, 4);\n\n    expect(history.last().getText()).toContain(&#39;1 + 2&#39;);\n    expect(history.first().getText()).toContain(&#39;foo&#39;); // This is wrong!\n  });\n</code></pre><p>因为 Calculator 展示了最老的结果在底部，我们用 <code>toContain</code> Jasmine 匹配来假设元素的文字包含有“1+2”。</p>\n<p>ElementArrayFinder 还有 <code>each</code>、<code>map</code>、 <code>filter</code> 和 <code>reduce</code> 这些方法和 JS 的数组方法很相似。<a href=\"http://angular.github.io/protractor/#/api?view=ElementArrayFinder\">更多 API 细节看这里</a></p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"getBoundClientRect 函数详解","date":"2014-10-26T03:06:59.000Z","description":"getBoundClientRect 函数介绍","_content":"\n\n##getBoundClientRect函数详解\n[转载自这里](http://www.cnblogs.com/2050/archive/2012/02/01/2335211.html)\n\n###一、定义\n \ngetBoundingClientRect 函数是W3C组织在第一版本的W3C CSSOM View specification草案中确定的一个标准方法，在此之前，只有IE浏览器是支持该方法的，W3C在这次草案中把它扶正成为标准，足可以看出它并不简单。getBoundingClientRect 方法返回的是调用该方法的元素的TextRectangle对象，该对象具有top、left、right、bottom四个属性，分别代表该元素上、左、右、下四条边界相对于浏览器窗口左上角（注意，不是文档区域的左上角）的偏移像素值。\n\n###二、兼容性\n\ngetBoundingClientRect方法最先在IE5中出现，后来被W3C接纳成为标准。目前IE5.5+、Firefox 3.5+、Chrome 4+、Safari 4.0+、Opara 10.10+等浏览器均支持该方法，兼容性几乎完美。\n\n在具体表现方面，Firefox6以前的版本使用getBoundingClientRect时不能获取到top和bottom这两个属性值，Firefox6及以后的版本和其他支持getBoundingClientRect方法的浏览器则top、left、right、bottom四个属性值均能获取到。需要说明的是由于某些版本的IE浏览器的<html>文档根元素默认是有2px边框的,所以这里需要特别处理一下，微软MSDN上说在IE5中会存在这样的情况，但据我实际测试，xp系统中IE6也存在这样的问题，奇怪的是，我在win7环境下用IETester测试的IE各版本都是正常的。但这并不是什么大问题，我们只要把得到的值减去html根元素（body也可考虑进来）的clientLeft或clientTop就能保持各浏览器一致啦。\n\n###三、用途\n\n当getBoundingClientRect刚被w3c列为标准的时候，PPK还曾质疑过它是不是多此一举，因为已经存在类似的方法来获取元素的偏移位置，比如offsetLeft和offsetTop。但Jquery的作者John Resig马上阐明了getBoundingClientRect的用处。用传统的方法固然可以实现getBoundingClientRect同样的功能，但兼容各种浏览器以及各种不同的元素就会把你弄死，而且效率还非常低下。所以获取页面上某个元素相对于浏览器窗口的偏移量就成了getBoundingClientRect的用武之地了。而获取元素的偏移量能有什么用，我相信，你懂的~ ^_^\n","source":"_posts/1013-getBoundClientRect.md","raw":"title: getBoundClientRect 函数详解\ndate: 2014-10-26 11:06:59\ncategories: js\ndescription: getBoundClientRect 函数介绍\n---\n\n\n##getBoundClientRect函数详解\n[转载自这里](http://www.cnblogs.com/2050/archive/2012/02/01/2335211.html)\n\n###一、定义\n \ngetBoundingClientRect 函数是W3C组织在第一版本的W3C CSSOM View specification草案中确定的一个标准方法，在此之前，只有IE浏览器是支持该方法的，W3C在这次草案中把它扶正成为标准，足可以看出它并不简单。getBoundingClientRect 方法返回的是调用该方法的元素的TextRectangle对象，该对象具有top、left、right、bottom四个属性，分别代表该元素上、左、右、下四条边界相对于浏览器窗口左上角（注意，不是文档区域的左上角）的偏移像素值。\n\n###二、兼容性\n\ngetBoundingClientRect方法最先在IE5中出现，后来被W3C接纳成为标准。目前IE5.5+、Firefox 3.5+、Chrome 4+、Safari 4.0+、Opara 10.10+等浏览器均支持该方法，兼容性几乎完美。\n\n在具体表现方面，Firefox6以前的版本使用getBoundingClientRect时不能获取到top和bottom这两个属性值，Firefox6及以后的版本和其他支持getBoundingClientRect方法的浏览器则top、left、right、bottom四个属性值均能获取到。需要说明的是由于某些版本的IE浏览器的<html>文档根元素默认是有2px边框的,所以这里需要特别处理一下，微软MSDN上说在IE5中会存在这样的情况，但据我实际测试，xp系统中IE6也存在这样的问题，奇怪的是，我在win7环境下用IETester测试的IE各版本都是正常的。但这并不是什么大问题，我们只要把得到的值减去html根元素（body也可考虑进来）的clientLeft或clientTop就能保持各浏览器一致啦。\n\n###三、用途\n\n当getBoundingClientRect刚被w3c列为标准的时候，PPK还曾质疑过它是不是多此一举，因为已经存在类似的方法来获取元素的偏移位置，比如offsetLeft和offsetTop。但Jquery的作者John Resig马上阐明了getBoundingClientRect的用处。用传统的方法固然可以实现getBoundingClientRect同样的功能，但兼容各种浏览器以及各种不同的元素就会把你弄死，而且效率还非常低下。所以获取页面上某个元素相对于浏览器窗口的偏移量就成了getBoundingClientRect的用武之地了。而获取元素的偏移量能有什么用，我相信，你懂的~ ^_^\n","slug":"1013-getBoundClientRect","published":1,"updated":"2015-02-13T06:40:42.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphc0012ok1vgn1ptawr","content":"<p>##getBoundClientRect函数详解<br><a href=\"http://www.cnblogs.com/2050/archive/2012/02/01/2335211.html\" target=\"_blank\" rel=\"external\">转载自这里</a></p>\n<p>###一、定义</p>\n<p>getBoundingClientRect 函数是W3C组织在第一版本的W3C CSSOM View specification草案中确定的一个标准方法，在此之前，只有IE浏览器是支持该方法的，W3C在这次草案中把它扶正成为标准，足可以看出它并不简单。getBoundingClientRect 方法返回的是调用该方法的元素的TextRectangle对象，该对象具有top、left、right、bottom四个属性，分别代表该元素上、左、右、下四条边界相对于浏览器窗口左上角（注意，不是文档区域的左上角）的偏移像素值。</p>\n<p>###二、兼容性</p>\n<p>getBoundingClientRect方法最先在IE5中出现，后来被W3C接纳成为标准。目前IE5.5+、Firefox 3.5+、Chrome 4+、Safari 4.0+、Opara 10.10+等浏览器均支持该方法，兼容性几乎完美。</p>\n<p>在具体表现方面，Firefox6以前的版本使用getBoundingClientRect时不能获取到top和bottom这两个属性值，Firefox6及以后的版本和其他支持getBoundingClientRect方法的浏览器则top、left、right、bottom四个属性值均能获取到。需要说明的是由于某些版本的IE浏览器的<html>文档根元素默认是有2px边框的,所以这里需要特别处理一下，微软MSDN上说在IE5中会存在这样的情况，但据我实际测试，xp系统中IE6也存在这样的问题，奇怪的是，我在win7环境下用IETester测试的IE各版本都是正常的。但这并不是什么大问题，我们只要把得到的值减去html根元素（body也可考虑进来）的clientLeft或clientTop就能保持各浏览器一致啦。</html></p>\n<p>###三、用途</p>\n<p>当getBoundingClientRect刚被w3c列为标准的时候，PPK还曾质疑过它是不是多此一举，因为已经存在类似的方法来获取元素的偏移位置，比如offsetLeft和offsetTop。但Jquery的作者John Resig马上阐明了getBoundingClientRect的用处。用传统的方法固然可以实现getBoundingClientRect同样的功能，但兼容各种浏览器以及各种不同的元素就会把你弄死，而且效率还非常低下。所以获取页面上某个元素相对于浏览器窗口的偏移量就成了getBoundingClientRect的用武之地了。而获取元素的偏移量能有什么用，我相信，你懂的~ ^_^</p>\n","excerpt":"","more":"<p>##getBoundClientRect函数详解<br><a href=\"http://www.cnblogs.com/2050/archive/2012/02/01/2335211.html\">转载自这里</a></p>\n<p>###一、定义</p>\n<p>getBoundingClientRect 函数是W3C组织在第一版本的W3C CSSOM View specification草案中确定的一个标准方法，在此之前，只有IE浏览器是支持该方法的，W3C在这次草案中把它扶正成为标准，足可以看出它并不简单。getBoundingClientRect 方法返回的是调用该方法的元素的TextRectangle对象，该对象具有top、left、right、bottom四个属性，分别代表该元素上、左、右、下四条边界相对于浏览器窗口左上角（注意，不是文档区域的左上角）的偏移像素值。</p>\n<p>###二、兼容性</p>\n<p>getBoundingClientRect方法最先在IE5中出现，后来被W3C接纳成为标准。目前IE5.5+、Firefox 3.5+、Chrome 4+、Safari 4.0+、Opara 10.10+等浏览器均支持该方法，兼容性几乎完美。</p>\n<p>在具体表现方面，Firefox6以前的版本使用getBoundingClientRect时不能获取到top和bottom这两个属性值，Firefox6及以后的版本和其他支持getBoundingClientRect方法的浏览器则top、left、right、bottom四个属性值均能获取到。需要说明的是由于某些版本的IE浏览器的<html>文档根元素默认是有2px边框的,所以这里需要特别处理一下，微软MSDN上说在IE5中会存在这样的情况，但据我实际测试，xp系统中IE6也存在这样的问题，奇怪的是，我在win7环境下用IETester测试的IE各版本都是正常的。但这并不是什么大问题，我们只要把得到的值减去html根元素（body也可考虑进来）的clientLeft或clientTop就能保持各浏览器一致啦。</p>\n<p>###三、用途</p>\n<p>当getBoundingClientRect刚被w3c列为标准的时候，PPK还曾质疑过它是不是多此一举，因为已经存在类似的方法来获取元素的偏移位置，比如offsetLeft和offsetTop。但Jquery的作者John Resig马上阐明了getBoundingClientRect的用处。用传统的方法固然可以实现getBoundingClientRect同样的功能，但兼容各种浏览器以及各种不同的元素就会把你弄死，而且效率还非常低下。所以获取页面上某个元素相对于浏览器窗口的偏移量就成了getBoundingClientRect的用武之地了。而获取元素的偏移量能有什么用，我相信，你懂的~ ^_^</p>\n"},{"title":"window.history 复习","date":"2014-11-02T03:06:59.000Z","description":"使用 window.history 来控制浏览器前进和后退","_content":"\n\n## 复习\n\n模拟用户点击浏览器后退按钮\n```\nwindow.history.back();\n```\n\n模拟用户点击浏览器前进按钮\n```\nwindow.history.forward();\n```\n\n可以用go()方法加载在session历史记录中的某个页面，参数是一个相对于当前页面的index值（当前页面是index0）\n\n后退一页\n```\nwindow.history.go(-1);\n```\n前进一页\n```\nwindow.history.go(1);\n```\n\nhistory栈的页面数量可以由length属性得到：\n```\nvar numberOfEntries = window.history.length;\n```\n\n**Note:**  Internet Explorer 支持将URL字符串作为参数传给go()，这种用法不是标准的用法，且Gecko不支持。\n\n## HTML5 History\n\nHTML5 引入了`history.pushState( )` 和 `history.replaceState( )` 方法，他们分别允许你添加和修改history实体。他们可以结合`window.onpopstate` 事件使用。\n\n","source":"_posts/1101-history.md","raw":"title: window.history 复习\ndate: 2014-11-02 11:06:59\ncategories: js\ndescription: 使用 window.history 来控制浏览器前进和后退\n---\n\n\n## 复习\n\n模拟用户点击浏览器后退按钮\n```\nwindow.history.back();\n```\n\n模拟用户点击浏览器前进按钮\n```\nwindow.history.forward();\n```\n\n可以用go()方法加载在session历史记录中的某个页面，参数是一个相对于当前页面的index值（当前页面是index0）\n\n后退一页\n```\nwindow.history.go(-1);\n```\n前进一页\n```\nwindow.history.go(1);\n```\n\nhistory栈的页面数量可以由length属性得到：\n```\nvar numberOfEntries = window.history.length;\n```\n\n**Note:**  Internet Explorer 支持将URL字符串作为参数传给go()，这种用法不是标准的用法，且Gecko不支持。\n\n## HTML5 History\n\nHTML5 引入了`history.pushState( )` 和 `history.replaceState( )` 方法，他们分别允许你添加和修改history实体。他们可以结合`window.onpopstate` 事件使用。\n\n","slug":"1101-history","published":1,"updated":"2015-04-30T02:27:55.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphe0015ok1vynca0dyx","content":"<h2 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h2><p>模拟用户点击浏览器后退按钮</p>\n<pre><code>window.history.back();\n</code></pre><p>模拟用户点击浏览器前进按钮</p>\n<pre><code>window.history.forward();\n</code></pre><p>可以用go()方法加载在session历史记录中的某个页面，参数是一个相对于当前页面的index值（当前页面是index0）</p>\n<p>后退一页</p>\n<pre><code>window.history.go(-1);\n</code></pre><p>前进一页</p>\n<pre><code>window.history.go(1);\n</code></pre><p>history栈的页面数量可以由length属性得到：</p>\n<pre><code>var numberOfEntries = window.history.length;\n</code></pre><p><strong>Note:</strong>  Internet Explorer 支持将URL字符串作为参数传给go()，这种用法不是标准的用法，且Gecko不支持。</p>\n<h2 id=\"HTML5-History\"><a href=\"#HTML5-History\" class=\"headerlink\" title=\"HTML5 History\"></a>HTML5 History</h2><p>HTML5 引入了<code>history.pushState( )</code> 和 <code>history.replaceState( )</code> 方法，他们分别允许你添加和修改history实体。他们可以结合<code>window.onpopstate</code> 事件使用。</p>\n","excerpt":"","more":"<h2 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h2><p>模拟用户点击浏览器后退按钮</p>\n<pre><code>window.history.back();\n</code></pre><p>模拟用户点击浏览器前进按钮</p>\n<pre><code>window.history.forward();\n</code></pre><p>可以用go()方法加载在session历史记录中的某个页面，参数是一个相对于当前页面的index值（当前页面是index0）</p>\n<p>后退一页</p>\n<pre><code>window.history.go(-1);\n</code></pre><p>前进一页</p>\n<pre><code>window.history.go(1);\n</code></pre><p>history栈的页面数量可以由length属性得到：</p>\n<pre><code>var numberOfEntries = window.history.length;\n</code></pre><p><strong>Note:</strong>  Internet Explorer 支持将URL字符串作为参数传给go()，这种用法不是标准的用法，且Gecko不支持。</p>\n<h2 id=\"HTML5-History\"><a href=\"#HTML5-History\" class=\"headerlink\" title=\"HTML5 History\"></a>HTML5 History</h2><p>HTML5 引入了<code>history.pushState( )</code> 和 <code>history.replaceState( )</code> 方法，他们分别允许你添加和修改history实体。他们可以结合<code>window.onpopstate</code> 事件使用。</p>\n"},{"title":"2015不是本命，也要拼命","date":"2015-01-10T03:06:59.000Z","description":"2015 新春要做的事情","_content":"\n又这样过了几个月，忙着一个又一个的项目。到了年末，发现自己原来想看的东西、想学的似乎并没有怎么动 ╮(╯_╰)╭\n\n再来个Todo-list吧！\n\n### 1. 拜读 jQuery 源码\n\n每次说使用熟练的时候，又好怕被问道 `“你看了源码了吗?”`。\n\n好的，我这就去看。\n\n### 2. ES5 ES6的东西\n\n前端圈的大神们都在讨论Node.js、fibjs、AngularJS、IO.js什么的，\n\n哎╮(╯_╰)╭想看又看不懂，我这等菜鸟只能本分的从根本做起罗。\n\n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/2015不是本命，也要拼命——最近要做的事2015春.md","raw":"title: 2015不是本命，也要拼命\ndate: 2015-01-10 11:06:59\ncategories: to-do\ndescription: 2015 新春要做的事情\n---\n\n又这样过了几个月，忙着一个又一个的项目。到了年末，发现自己原来想看的东西、想学的似乎并没有怎么动 ╮(╯_╰)╭\n\n再来个Todo-list吧！\n\n### 1. 拜读 jQuery 源码\n\n每次说使用熟练的时候，又好怕被问道 `“你看了源码了吗?”`。\n\n好的，我这就去看。\n\n### 2. ES5 ES6的东西\n\n前端圈的大神们都在讨论Node.js、fibjs、AngularJS、IO.js什么的，\n\n哎╮(╯_╰)╭想看又看不懂，我这等菜鸟只能本分的从根本做起罗。\n\n> Written with [StackEdit](https://stackedit.io/).","slug":"2015不是本命，也要拼命——最近要做的事2015春","published":1,"updated":"2015-02-13T06:29:56.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphf0017ok1vutiuv320","content":"<p>又这样过了几个月，忙着一个又一个的项目。到了年末，发现自己原来想看的东西、想学的似乎并没有怎么动 ╮(╯_╰)╭</p>\n<p>再来个Todo-list吧！</p>\n<h3 id=\"1-拜读-jQuery-源码\"><a href=\"#1-拜读-jQuery-源码\" class=\"headerlink\" title=\"1. 拜读 jQuery 源码\"></a>1. 拜读 jQuery 源码</h3><p>每次说使用熟练的时候，又好怕被问道 <code>“你看了源码了吗?”</code>。</p>\n<p>好的，我这就去看。</p>\n<h3 id=\"2-ES5-ES6的东西\"><a href=\"#2-ES5-ES6的东西\" class=\"headerlink\" title=\"2. ES5 ES6的东西\"></a>2. ES5 ES6的东西</h3><p>前端圈的大神们都在讨论Node.js、fibjs、AngularJS、IO.js什么的，</p>\n<p>哎╮(╯_╰)╭想看又看不懂，我这等菜鸟只能本分的从根本做起罗。</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<p>又这样过了几个月，忙着一个又一个的项目。到了年末，发现自己原来想看的东西、想学的似乎并没有怎么动 ╮(╯_╰)╭</p>\n<p>再来个Todo-list吧！</p>\n<h3 id=\"1-拜读-jQuery-源码\"><a href=\"#1-拜读-jQuery-源码\" class=\"headerlink\" title=\"1. 拜读 jQuery 源码\"></a>1. 拜读 jQuery 源码</h3><p>每次说使用熟练的时候，又好怕被问道 <code>“你看了源码了吗?”</code>。</p>\n<p>好的，我这就去看。</p>\n<h3 id=\"2-ES5-ES6的东西\"><a href=\"#2-ES5-ES6的东西\" class=\"headerlink\" title=\"2. ES5 ES6的东西\"></a>2. ES5 ES6的东西</h3><p>前端圈的大神们都在讨论Node.js、fibjs、AngularJS、IO.js什么的，</p>\n<p>哎╮(╯_╰)╭想看又看不懂，我这等菜鸟只能本分的从根本做起罗。</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"Aurelia 文档小翻译","date":"2015-06-09T07:52:02.000Z","description":"在学习 Aurelia，整篇的英文文档很容易分神，顺手翻译一下文档，还有很多不懂的地方啊","_content":"\n\n##Browser Support\n\nAurelia 支持现代浏览器，包括 Chrome，Firefox，IE11，Safari 8。但是我们也提供兼容 IE9 及以上的方法。\n\n为了需要兼容 IE9 及以上，我们需要为 MutationObservers 添加一个额外的 polyfill。实现方法，用 `jspm` 安装 `github:polymer/mutationobservers`。接着在 `aurelia-bootstrapper` 的外层这样调用它：\n\n```\n<script src=\"jspm_packages/github/polymer/mutationobservers@0.4.2/MutationObserver.js\"></script>\n<script src=\"jspm_packages/system.js\"></script>\n<script src=\"config.js\"></script>\n<script>\n  // Loads WeakMap polyfill needed by MutationObservers\n  System.import('core-js').then( function() {\n    // Imports MutationObserver polyfill\n    System.import('mutationobservers').then( function() {\n      // Ensures start of Aurelia when all required IE9 dependencies are loaded\n      System.import('aurelia-bootstrapper');\n    })\n  });\n</script>\n```\n\n> Note: Aurelia 本身不需要 WeakMap，但是上面的 MutationObserver ployfill 会用到。 \n\n## Startup & Configuration\n\n大多数的平台都为代码执行设置有一个 \"main\" 或者入口点，Aurelia 也不例外。如果你已经看过了 [Get Started](http://aurelia.io/get-started.html)，你会发现这个 `aurelia-app` 属性。把它简单的放到一个 HTML 元素中，Aurelia 的引导器会加载一个 `app.js` 和 `app.html`，将他们通过数据绑定在一起，然后将他们注册到 `aurelia-app` 属性放置的地方。\n\n有时，我们想要配置框架，或者在向用户展示信息之前优先跑些代码，又或者，在项目进行中时，向需要 startup 配置的方向发展。因此，我们可以给 `aurelia-app` 一个值，这个值指向一个配置模块。该模块 export 一个单独的函数 `configure`。Aurelia 引用 `configure` 函数，向他传入 Aurelia 对象，之后我们可以用来 配置框架的这些那些东西 : ) 。\n\n实例：\n```\nimport {LogManager} from 'aurelia-framework';\nimport {ConsoleAppender} from 'aurelia-logging-console';\n\nLogManager.addAppender(new ConsoleAppender());\nLogManager.setLevel(LogManager.logLevel.debug);\n\nexport function configure(aurelia) {\n  aurelia.use\n    .defaultBindingLanguage()\n    .defaultResources()\n    .router()\n    .eventAggregator()\n    .plugin('./path/to/plugin');\n\n  aurelia.start().then(a => a.setRoot('app', document.body));\n}\n```\n\n除了自定义插件的代码，以上的代码都是 `aurelia-app` 默认会帮你完成的工作。如果你使用配置文件的方法，你需要自己配置这些文件，但是你也可以安装自定义的插件，用一些 services 设置依赖注入的 container，安装视图模版中用到的全局资源等。\n\n如果你使用配置文件的方法，你可以只写一个简单的文件，他包含了所有我们上面栗子的标准选项，然后这么写：\n```\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging();\n\n  aurelia.start().then(a => a.setRoot());\n}\n```\n\n### Logging\n\nAurelia 框架有一个简单的 logging abstraction，默认是无操作的。上面的配置展示了如何安装一个附件( appender )来向控制台 console 输出 log 数据。我们还可以设置 log level，`logLevel` 的值可以为：`none`, `error`, `warn`, `info` and `debug`。\n\n你可以简单的创建自己的 `appender`。配合 appender 接口来实现一个 类。最好的栗子是看源码：[console log appender's source](https://github.com/aurelia/logging-console/blob/master/src/index.js)\n\n### Plugins\n\n**插件** 是只有一个 exported `configure` 函数的  module 。当启动时，Aurelia 会 load 所有插件模块 ，将 Aurelia 的实例传入插件们的 `configure` 函数并执行。\n\n插件可从 配置函数 返回一个 `Promise` 来完成异步的配置任务。在写插件时，要确保明确的提供所有的 metadata，包括给 Custom Elements 使用的 View Strategy。\n\n为了 配置你的插件的来源，在 app 中你可以设置一个函数或者对象作为配置函数的第二个参数，在插件中可以用到，你的插件的使用者可以这么用：\n\n```\naurelia.use.plugin('./path/to/plugin', config => { /* configuration work */ });\n```\n\n> Note:  插件不能依赖 Aurelia 的命名约定。因为 Aurelia 的命名约定是可配置的，所以第三方插件应该明确，确保在不同的上下文环境下函数的执行。\n\n#### Promises\n\nAurelia 默认使用 ES6 原生的 Promises 或者 polyfill。你也可以使用这个不错的 Promise 库 [Bluebird](https://github.com/petkaantonov/bluebird) 来替换。使用它只需要将它放到页面上其他引用的脚本前面，他回使用自己标准的 Promise 实现，这个方法比原生的 Promise 要快，并且拥有更好的 debugging 支持。另外，在使用 Babel 编译器的时候，可以使用 [coroutines](http://babeljs.io/docs/usage/transformers/other/bluebird-coroutines/) 来改进异步代码的书写。\n\n### The Aurelia Object\n\n因为自定义配置模块和插件都需要用到 Aurelia Object，下面是一个简单的 API 的解释：\n\n```\nexport class Aurelia {\n  loader:Loader; //the module loader\n  container:Container; //the app-level dependency injection container\n  use:Plugins; //the plugins api (see above)\n\n  withInstance(type, instance):Aurelia; //DI helper method (pass through to container)\n  withSingleton(type, implementation):Aurelia; //DI helper method (pass through to container)\n  globalizeResources(...resourcePaths):Aurelia; //module ids of resources relative to the configuration/plugin module\n  renameGlobalResource(resourcePath, newName); //renames a globally available resource to avoid naming conflicts\n\n  start():Promise; //starts the framework, causing plugins to be installed and resources to be loaded\n  setRoot(root, applicationHost):Promise; //set your \"root\" or \"app\" view-model and display it\n}\n```\n\n## Views and View Models\n\n在 Aurelia 中，用户交互元素由 View 和 View-model 对来实现。View 由 HTML 完成，会被渲染到 DOM 中，View-model 由 JavaScript 完成， 向 View 提供数据和交互行为。模版引擎和 DI（依赖注入）负责创建配对之间的联系，并且为进程执行一个可预言的生命周期？（不理解）\n\n在连接成功之后， Aurelia 强大的数据绑定就能将 View 和 View-model 的数据和视图联合起来，实现数据双向绑定。\n\n- 这样的分隔方法有利于 开发和设计 的合作: ) \n- 可维护性、灵活的架构、甚至代码控制……\n\n### Dependency Injection (DI)\n\nView-model 和其他的交互元素：Custom Elements、Customs Attributes，都被作为 类来创建，然后框架中使用依赖注入容器来实例化。 这种代码容易模块化和测试。\n\n你可以将需求拆分为小的对象，合作来完成一个目标，而不是写一个巨大的类。DI 可以配合完成拼接。\n\n使用 DI时，在你的 类中的 constructor 中传入，下面是栗子：\n```\nimport {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n\n```\n\n在 ES7 或者 TypeScript 中可以使用 Decrators，这时你只需要加一个 `inject` decorator，每注入一个类型传一个参数。如果你使用的语法没有支持 Decrators，或者是不想用，也可以添加一个叫 `inject` 的静态属性或者方法到你的类中。这样必须返回一个可注入的类型数组（array of injectable types）。下面是一个在 CoffeeScript 结合 CommomJS 模块的栗子：\n\n```\nHttpClient = require('aurelia-http-client').HttpClient;\n\nclass Flickr\n  constructor: (@http) ->\n  @inject:[HttpClient]\n```\n\n如果你正在使用　TypeScript 开发，可以用 `--emitDecoratorMetadata` 编译标识配合 Aurelia 的 `autoinject()` decorator 来让框架读取标准 TS 类型信息。这样做之后，就不需要去复制类型了。代码实例：\n\n```\nimport {autoinject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@autoinject()\nexport class CustomerDetail{\n    constructor(http:HttpClient){\n        this.http = http;\n    }\n}\n```\n\n> Note: TypeScript 实现这个编译选项的方式中有个有趣的细节，他适用于任何decorator。所以，如果你在自己的 TS 类中拿到一些其他的 Decorator ，就不需要引入 `autoinject` decorator，那些 Type information 仍然能被 Aurelia 的依赖注入框架发现。\n\n当明确的声明依赖时，他们不一定非得是 constructor types，还可以是 resolvers 的实例。例如：\n\n```\nimport {Lazy, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@inject(Lazy.of(HttpClient))\nexport class CustomerDetail{\n    constructor(getHTTP){\n        this.getHTTP = getHTTP;\n    }\n}\n```\n\n这样的 `Lazy` resolver 实际上没有提供一个 `HttpClient` 的实例，它提供一个可以随时返回 `HttpClient` 实例的函数。你可以通过写个类继承 Resolver 来创建 resolvers，或者使用我们提供的一些方便的 resolvers：\n\n-  `lazy` -  Injects a function for lazily evaluating the dependency.\n\t- ex . `Lazy.of(HttpClient)`\n- `All` - Injects an array of all services registered with the provided key\n\t- ex. `All.of(Plugin)`\n- `Optional` -  Injects an instance of a class only if it already exists in the container; null otherwise.\n\t- ex. `Optional.of(LoggedInUser)`\n\n另外关于 resolvers，你也可以用 `Registration` decorators 来指定一个默认的注册(registration)，或者一个实例的生命周期。默认情况下，DI 容器假设每个实例都是单例？（everything is a singleton instance）one instance for the app。但是你可以用一个registration decorator 来修改，示例：\n\n```\nimport {transient, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@transient()\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n```\n\n如上所写，每次请求 DI 容器返回 CustomerDetail 的时候会返回一个新的实例，而不是一个 singleton。`singleton` 和 `transient` registrations 都提供给外部使用，但是你也可以通过构建一个实现 `register(container, key, fn)` 函数的类，来创建 registration 。之后，就可以简单了用 `registration` decorator 来把它的实例添加到你的类中。\n\n如果你不能或不想用 decorators。don't worry! 我们准备了后备方案。只要提供一个静态的 `decorators` 属性或方法，然后使用我们 链式的 `Decorators` helper。 这位 helper 有对应我们所有 decorators 的方法。So，无论你使用何种语言都十分简单使用。下面是 CoffeeScript 的实例：\n\n```\nHttpClient = require('aurelia-http-client').HttpClient;\nDecorators = require('aurelia-framework').Decorators;\n\nclass CustomerDetail\n  constructor: (@http) ->\n  @decorators:Decorators.transient().inject(HttpClient);\n```\n\n### Parent View Models\n\nBy default a View-model's access is limited to injected objects as well as children of the class. Sometimes it may be desirable to refer to objects and methods on a parent View-model, which can be achieved by storing the parent during the bind method of the view lifecycle:\n\n```\nclass ChildViewModel {\n  bind(bindingContext) {\n    this.$parent = bindingContext;\n  }\n}\n```\n\n## Tamplating\n\nAurelia 的模版引擎负责加载视图和他们所需要的资源，以及完美编译 HTML 和渲染 UI 到屏幕上。创建一个视图，你仅仅需要一个HTML文件，在里面加上`HTMLTemplate` 即可，下面是个简单的视图：\n\n```\n<template>\n    <div>Hello World!</div>\n</template>\n```\n\n所有在 `template` 标签中的内容都由 Aurelia 管理。但是，因为 Aurelia 使用 HTMLImport 技术来加载视图，所以你也可以写入 `links` ，他们也会被正确的加载，还可以用相对路径的写法哦，具体是指：\n\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"./hello.css\">\n\n<template>\n    <div class=\"hello\">Hello World!</div>\n</template>\n```\n\n这样你就可以为每个视图选择需要加载的样式，还可以使用 Web components on the fly。\n\n当你需要引入一个 Aurelia 特制 (Aurelia-specific) 的资源时，比如一个 Aurelia Custom Element，Custom Attribute or Value Converter，你会在视图中用到一个 `require` 元素。栗子：\n\n```\n<template>\n  <require from='./nav-bar'></require>\n\n  <nav-bar router.bind=\"router\"></nav-bar>\n\n  <div class=\"page-host\">\n    <router-view></router-view>\n  </div>\n</template>\n\n```\n\n在这个例子中 `nav-bar` 是一个我们需要使用的 Aurelia Custom Element。在 我们使用 `require` element 时，框架的资源管道会处理输入的元件。这么做有以下好处：\n- 去重 - 资源只会在 app 中被 download 一次，即使其他的视图需要相同的元素，也只会被下载一次。\n- 一次编译 - 模版中这样引入自定义元素在整个应用周期只会被编译一次\n- Local Scope( 本地作用域？ ) - 引入的资源只能在引入他的视图中可见，通过这样排除全局作用域的方法，可以有效减少命名冲突的可能性、加强可维护性和易懂性\n- 重命名 - 资源可以被重命名，这样当你在同一视图，引入两个名字相同或相似的第三方资源时，就可以使用这个特性\n\t- ex. `<require from=\"./nav-bar\" as=\"foo-bar\"></require>` - 现在你可以使用 `foo-bar` 元素来替代 `nav-bar` 元素。（这是基于 ES6 的import 语法，重命名被认为是代替 Alias 的方法，因为他完全的重命名了type ）\n- 包 - require 可以指向一个包括多资源的模块，包中的所有的资源会被导入同个视图\n- 可扩展性 - 我们可以定义新的资源类型，You can define new types of resources which, when required in this way, can execute custom loading (async one-time) and registration (once per-view). This is a declarative, extensible resource loading pipeline.\n- ES6 - 代码是由 ES6 loader 加载而不是 HTMLImport 机制， enabling all the features and extensibility of your loader。这么设计完全统一了所有app资源的加载方法，无论是 JS 还是 HTML\n\n在你的视图中，你会用到上面提到的各种不同的资源以及数据绑定\n\n>Note: 你可能会觉得每个视图中都要引入东西很无聊╮(╯▽╰)╭。Remember ，在引导（ bootstrapping）阶段，你可以配置 Aurelia 可以让所有视图使用的全局资源。Just use `aurelia.globalizeResources(...resourcePaths)`。\n\nAurelia  polyfills browsers 不包括支持 templates。但是，模版的一些特性可以被 polyfilled ，需要 workarounds。特别当 `template` 元素在 `select` 和 `table` 元素中时，下面的代码在不原生支持 templates 的浏览器中不能实现：\n\n```\n  <table>\n    <template repeat.for=\"customer of customers\">\n      <tr>\n        <td>${customer.fullName}</td>\n      </tr>\n    </template>\n  </table>\n```\n\n为了重复输出 `tr` 元素，可以简单的修改为：\n\n```\n  <table>\n    <tr repeat.for=\"customer of customers\">\n      <td>${customer.fullName}</td>\n    </tr>\n  </table>\n\n```\n\n### Databinding\n\n数据绑定让你可以将一个 JS 对象中的状态和行为连接到 HTML 视图中。当连接建立之后，任何的连接的属性改动都会在一个或两个方向上同步。\n\nJS 对象中的改变能反应在视图上，视图上的修改能映射到 JS 对象中。\n\n要建立这样连接，可以在 HTML 中利用 `binding commands` 。通过使用一个绑定操作符 `.` 来声明绑定命令。当 HTML 的属性中包含一个 `.`，编译器会将属性的名字和值传到绑定语言（binding language）来编译，当视图被创建时，通过建立的连接，我们就能使用一个或更多的绑定表达式了。\n\n可以自己扩展绑定命令，但是 Aurelia 提供了一个覆盖大多数常用使用案例的命令集合。\n\n#### bind, one-way, two-way & one-time\n\n最常用的绑定命令是 `.bind`。这样会让所有的属性使用单向绑定来绑定，而元素的值使用双向绑定。\n\n这意味着神马呢？\n\n**单向绑定**是说改变JS 的 view-models 会反映到 view 上，而反方向不会反应。\n**双向绑定**是指每个方向改变都会影响到对方。\n\n`.bind` 会假设你在绑定表单元素的时候会希望 view 上的 form 改变反应到 view-model 上，而其他的情况下就使用单向绑定，这是因为，在许多的时候，双向绑定到一个非表单元素上是无意义的。下面是 `.bind` 的小栗子：\n\n```\n<input type=\"text\" value.bind=\"firstName\">\n<a href.bind=\"url\">Aurelia</a>\n```\n\n在上面的例子中，`input` 元素会将他的值绑定到 view-model 的 `firstName` 属性上。改变 `firstName` 的属性会更新 `input.value` ，而改变 `input.value` 会更新 `firstName` 的值。另一边，`a` 标签的 `href` 属性绑在了 view-model 的 `url` 属性上。只有改变 `url` 的值会影响 `href`，反方向则不通。\n\n我们也可以明确的使用 `.one-way` 或者 `.two-way` 来代替 `.bind`。举一个常见的栗子：当需要引入一个 Web Components 作为输入类型的控件时，你可以这样使用：\n\n```\n<markdown-editor value.two-way=\"markdown\"></markdown-editor>\n```\n\n为了优化性能和最小化 CPU 与内存的使用，你可以选择利用 `.one-time` 绑定命令来在初始绑定阶段，将 View-model 的数据“一次性”输出到 view，这之后就不会再有任何同步行为了。\n\n#### delegate, trigger & call\n\n绑定命令不只是能连接 View-model 和 view 的属性，还可以触发行为操作。例如，如果你想要在点击按钮的时候执行一个方法，你可以像这么使用 `trigger` 命令：\n\n```\n<button click.trigger=\"sayHello()\">Say Hello</button>\n```\n\n当按钮被点击之后， view-model 的 `sayhello` 方法就会被执行。即便如此，像这样往每个单独的元素中绑定事件控制器并不是很有效率，所以通常你会比较倾向于使用事件委托。我们可以用 `.delegate` 命令来使用事件委托。例子如下：\n\n```\n<button click.delegate=\"sayHello()\">Say Hello</button>\n```\n\n当你需要访问事件对象时，`$event` 可以作为参数传到 delegate/trigger 的函数中。\n\n```\n<button click.delegate=\"sayHello($event)\">Say Hello</button>\n```\n\n> Note: 事件委派，是一个使用 DOM 事件冒泡特性的技术。当使用 `.delegate`，一个单独的事件控制器被绑定到 document，而不是一个绑定到单独的元素。当元素的事件被触发，它沿着 DOM 冒泡到 有绑着控制器的 document。这是一个能更有效利用内存来处理事件的方式，默认机制中推荐使用这个方法。\n\nAll of this works against DOM events in some way or another. 有时，你在用 Aurelia Custom Attribute or Element 时，会想要一个函数直接的引用，然后在之后什么时候手动的执行它。用 `.call` 绑定可以传一个函数引用（since the attribute will call it later）：\n\n```\n<button touch.call=\"sayHello()\">Say Hello</button>\n```\n\n如上，Custom Attribute `touch` 会获得一个函数，他可以执行你的 `sayhello()` 代码。依赖于 implementor 的特性，你也可以从 caller 得到传值。就像从 trigger/delegate 传 `$event` 对象。\n\n#### string interpolation\n\n有时你需要将属性直接绑定到 document 的内容中或插入属性值中。这时，你可以使用 string interpolation 语法 `${expression}`。 String interpolation 是单向绑定，他的输出被转化为字符串，这时例子：\n\n```\n<span>${fullName}</span>\n```\n\n`fullName` 属性会直接被插入 span 的内容。你还可以将这个用在 css class 的绑定上：\n\n```\n<div class=\"dot ${color} ${isHappy ? 'green' : 'red'}\"></div>\n```\n\n在上面例子中，“dot” 是一个静态的类，`isHappy` 为 true 时是 “green”，false 时是 “red”。还有 `color` 的值会被作为一个类被加入。\n\n> Note: 你可以在绑定中使用简单的表达式。但是不要试图做其他的更多的，因为在试图中最好不要涉及过多代码。你应该只想建立 view 和 view-model 的链接。\n\n#### ref\n\n绑定语言还识别一个特别属性的用法：`ref`。使用 `ref` 你可以为一个元素创建 local name，然后可以在其他绑定表达式中使用。他也可以设置为 view-model 的属性，之后你就能在代码中访问到。\n\n```\n<input type=\"text\" ref=\"name\"> ${name.value}\n```\n\nYou can also use ref as a binding command to get the view-model instance that backs an Aurelia Custom Element or Custom Attribute. By using this technique, you can connect different components to each other:\n通过这个技术，可以将不同的组件联系在一起：\n\n```\n<producer producer.ref=\"producerVM\"></producer>\n<consumer input.bind=\"producerVM.output\"></consumer>\n```\n\n`producer.ref = \"producerVM\"` 为 view-model 的 `producer` custom element 创建个假名，然后在别的地方用。下面是一些 `ref` 的用法：\n\n- `attribute-name.ref=\"someIndetifier\"` - 给 custom attribute 类的实例创建引用\n\n- `element-name.ref=\"someIndetifier\"` - 给 custom element 类实例创建引用\n\n- `ref=\"someIndetifier\"` - 给 DOM 中的 HTMLElement\n创建一个引用\n\n\n#### select elements\n\nHTMLSelectElement( HTML select 元素 ) 上的 `value.bind` 有一个特别的操作来支持单选或多选模式。\n\n经典的 select 元素使用一个 `value.bind` 和 `repeat` 结合来渲染时，可以这么写：\n\n```\n<select value.bind=\"favoriteColor\">\n    <option>Select A Color</option>\n    <option repeat.for=\"color of colors\" value.bind=\"color\">${color}</option>\n</select>\n```\n\n但是，有时你想用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 select 元素的栗子：\n\n```\n<select value.bind=\"employeeOfTheMonth\">\n  <option>Select An Employee</option>\n  <option repeat.for=\"employee of employees\" model.bind=\"employee\">${employee.fullName}</option>\n</select>\n```\n\n与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 `model` 中，而不是只能接受字符串的 `value`。\n\n#### multi select elements\n\n在多选情景下，你可以将 select 元素的值绑定到一个数组。下面的栗子展示了如何绑定一个字符串数组 `favoriteColors`：\n\n```\n<select value.bind=\"favoriteColors\" multiple>\n    <option repeat.for=\"color of colors\" value.bind=\"color\">${color}</option>\n</select>\n```\n\n同样适用于对象数组：\n\n```\n<select value.bind=\"favoriteEmployees\" multiple>\n  <option repeat.for=\"employee of employees\" model.bind=\"employee\">${employee.fullName}</option>\n</select>\n```\n\n#### radio\n\n在 HTMLInputElement （HTML input 元素）中使用  `checked.bind` 也有特殊的用法来支持绑定字符串或是对象这样的非 boolean 值。\n\n一个经典的 radio 按钮组渲染栗子：\n\n```\n<label repeat.for=\"color of colors\">\n  <input type=\"radio\" name=\"clrs\" value.bind=\"color\" checked.bind=\"$parent.favoriteColor\" />\n  ${color}\n</label>\n```\n\n但是，有时你想使用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 radio 按钮组的栗子：\n\n```\n<label repeat.for=\"employee of employees\">\n  <input type=\"radio\" name=\"emps\" model.bind=\"employee\" checked.bind=\"$parent.employeeOfTheMonth\" />\n  ${employee.fullName}\n</label>\n```\n\n与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 `model` 中，而不是只能接受字符串的 `value`。\n\n你也可以将 boolean 属性绑定到一个 radio 组。\n\n```\n<label><input type=\"radio\" name=\"tacos\" model.bind=\"null\" checked.bind=\"likesTacos\" />Unanswered</label>\n<label><input type=\"radio\" name=\"tacos\" model.bind=\"true\" checked.bind=\"likesTacos\" />Yes</label>\n<label><input type=\"radio\" name=\"tacos\" model.bind=\"false\" checked.bind=\"likesTacos\" />No</label>\n```\n\n#### checkboxes\n\n为了更好支持 多选 的情景，Aurelia 可以将 input 元素的 checked 属性绑定到数组。 下面是如果绑定字符串数组 `favoriteColors`:\n\n```\n<label repeat.for=\"color of colors\">\n  <input type=\"checkbox\" value.bind=\"color\" checked.bind=\"$parent.favoriteColors\" />\n  ${color}\n</label>\n```\n\n同样可以绑定对象数组：\n\n```\n<label repeat.for=\"employee of employees\">\n  <input type=\"checkbox\" model.bind=\"employee\" checked.bind=\"$parent.favoriteEmployees\" />\n  ${employee.fullName}\n</label>\n```\n\n还可以绑定 boolean 类型的属性：\n\n```\n<li><label><input type=\"checkbox\" checked.bind=\"wantsFudge\" />Fudge</label></li>\n<li><label><input type=\"checkbox\" checked.bind=\"wantsSprinkles\" />Sprinkles</label></li>\n<li><label><input type=\"checkbox\" checked.bind=\"wantsCherry\" />Cherry</label></li>\n```\n\n#### innerHTML\n\n你还可以用 `innerhtml` 属性绑定元素的 `innerHTML` 值：\n\n```\n<div innerhtml.bind=\"htmlProperty\"></div>\n<div innerhtml=\"${htmlProperty}\"></div>\n```\n\nAurelia 提供一个简单的 html sanitization 转化器：\n\n```\n<div innerhtml.bind=\"htmlProperty | sanitizeHtml\"></div>\n<div innerhtml=\"${htmlProperty | sanitizeHtml}\"></div>\n```\n\n我们鼓励你使用一个更加完善的 html sanitizer 就像 [sanitize-html](https://www.npmjs.com/package/sanitize-html)。下面是使用这个包创建一个转换器的用法：\n\n```\njspm install npm:sanitize-html\n```\n\n```\nimport sanitizeHtml from 'sanitize-html';\n\nexport class MySanitizeHtmlValueConverter {\n  toView(untrustedHtml) {\n    return sanitizeHtml(untrustedHtml);\n  }\n}\n```\n\n> Note: 使用 `innerhtml` 属性绑定仅仅是设置了元素的 `innerHTML` 属性。这些 HTML 标签不会传到 Aurelia 的模版系统。 Binding expressions and require elements will not be evaluated. 已经有一个问题在 track 这个问题了 [aurelia/templating#35](https://github.com/aurelia/templating/issues/35)。\n\n#### textContent\n\n我们可以用 `textcontent` 属性绑定 元素的 `textContent`：\n\n```\n<div textcontent.bind=\"stringProperty\"></div>\n<div textcontent=\"${stringProperty}\"></div>\n```\n\n双向绑定可以用在 `contenteditable` 元素上：\n\n```\n<div textcontent.bind=\"stringProperty\" contenteditable=\"true\"></div>\n```\n\n#### style\n\n我们可以还可以绑定 css 字符串或对象到一个元素的 `style` 属性：\n\n```\nexport class Foo {\n  constructor() {\n    this.styleString = 'color: red; background-color: blue';\n\n    this.styleObject = {\n      color: 'red',\n      'background-color': 'blue'\n    };\n  }\n}\n```\n\n```\n<div style.bind=\"styleString\"></div>\n<div style.bind=\"styleObject\"></div>\n```\n\n当使用插值语法时，为了兼容 IE 可以使用 `style` 属性的别名`css` 来替代：\n\n```\n<!-- good: -->\n<div css=\"width: ${width}px; height: ${height}px;\"></div>\n\n<!-- incompatible with Internet Explorer: -->\n<div style=\"width: ${width}px; height: ${height}px;\"></div>\n```\n\n#### Adaptive Binding\n\nAurelia 有一个可适应绑定（adaptive binding） 系统，当需要决定如何最有效的观察变化时，他会从大量的策略中选择一个。更多关于这个系统如何运作的信息请看[这篇文章](http://blog.durandal.io/2015/04/03/aurelia-adaptive-binding/)。大多时候你都不需要考虑这些繁枝细节，然而了解他将有助于你了解使用绑定系统时应该避免的一些低效的方法。\n\n**首先需要了解：computed properties ( properties with getter functions ) 使用脏检查来观察变化。** 更有效的策略，例如：Object.observe 和 property rewriting （属性重写）并不适用于 computed property 类型。\n\n当前的浏览器环境下，脏检查是一个必要的麻烦（necessary evil）。在写这边文章时，只有极少浏览器支持 Object.observe 。Aurelia 的脏检查机制与 [Polymer](https://www.polymer-project.org/)使用的很相似。他利用 Aurelia 的 micro-task-queue 来处理更新的DOM 是蛮有效的。\n\n在你的应用中有一些绑定使用脏检查时并不会造成性能问题，大量使用才会有问题。幸运的是，我们有个方法可以避免脏值检查简单的 computed properties。来看看下面的 `fullName` 属性：\n\n```\nexport class Person {\n  firstName = 'John';\n  lastName = 'Doe';\n\n  @computedFrom('firstName', 'lastName')\n  get fullName(){\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n```\n\n我们使用 `@computedFrom` decorator 来向 Aurelia 绑定系统供一个提示，这时系统就知道只有 `firstName` 或 `lastName` 改变时，`fullName` 才会改变。\n\n留意脏检查是怎么工作的也是很重要的。当一个属性使用了脏检查，绑定系统就定期检查现在属性值是否与原来的观察值有所不同。检测时间差默认为 120 毫秒。这就意味着你的属性的 getter 函数有可能被十分频繁的调用，也就不能尽可能的高效了。我们还需要避免不必要的返回对象或者数组的新实例，例如下面：\n\n```\n<template>\n  <label for=\"search\">Search Issues:</label>\n  <input id=\"search\" type=\"text\" value.bind=\"searchText\" />\n  <ul>\n    <li repeat.for=\"issue of filteredIssues\">${issue.abstract}</li>\n  </ul>\n</template>\n```\n\n原生的视图模型实现：\n\n```\nexport class IssueSearch {\n  searchText = '';\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  // this returns a new array instance on every call which will in-turn result in a lot of DOM updates.\n  get filteredIssues() {\n    if (this.searchText === '')\n      return [];\n    return this.allIssues.filter(x => x.abstract.indexOf(this.searchText) !== -1);\n  }\n}\n```\n\n改进的视图模型实现：\n\n```\nexport class IssueSearch {\n  filteredIssues = [];\n  _searchText = '';\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n  set searchText(newValue) {\n    this._searchText = newValue;\n    if (newValue === '') {\n      this.filteredIssues = [];\n    } else {\n      this.filteredIssues = this.allIssues.filter(x => x.abstract.indexOf(this.searchText) !== -1);\n    }\n  }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Aurelia-文档小翻译.md","raw":"title: \"Aurelia 文档小翻译\"\ndate: 2015-06-09 15:52:02\ncategories: Aurelia\ndescription: 在学习 Aurelia，整篇的英文文档很容易分神，顺手翻译一下文档，还有很多不懂的地方啊 \n---\n\n\n##Browser Support\n\nAurelia 支持现代浏览器，包括 Chrome，Firefox，IE11，Safari 8。但是我们也提供兼容 IE9 及以上的方法。\n\n为了需要兼容 IE9 及以上，我们需要为 MutationObservers 添加一个额外的 polyfill。实现方法，用 `jspm` 安装 `github:polymer/mutationobservers`。接着在 `aurelia-bootstrapper` 的外层这样调用它：\n\n```\n<script src=\"jspm_packages/github/polymer/mutationobservers@0.4.2/MutationObserver.js\"></script>\n<script src=\"jspm_packages/system.js\"></script>\n<script src=\"config.js\"></script>\n<script>\n  // Loads WeakMap polyfill needed by MutationObservers\n  System.import('core-js').then( function() {\n    // Imports MutationObserver polyfill\n    System.import('mutationobservers').then( function() {\n      // Ensures start of Aurelia when all required IE9 dependencies are loaded\n      System.import('aurelia-bootstrapper');\n    })\n  });\n</script>\n```\n\n> Note: Aurelia 本身不需要 WeakMap，但是上面的 MutationObserver ployfill 会用到。 \n\n## Startup & Configuration\n\n大多数的平台都为代码执行设置有一个 \"main\" 或者入口点，Aurelia 也不例外。如果你已经看过了 [Get Started](http://aurelia.io/get-started.html)，你会发现这个 `aurelia-app` 属性。把它简单的放到一个 HTML 元素中，Aurelia 的引导器会加载一个 `app.js` 和 `app.html`，将他们通过数据绑定在一起，然后将他们注册到 `aurelia-app` 属性放置的地方。\n\n有时，我们想要配置框架，或者在向用户展示信息之前优先跑些代码，又或者，在项目进行中时，向需要 startup 配置的方向发展。因此，我们可以给 `aurelia-app` 一个值，这个值指向一个配置模块。该模块 export 一个单独的函数 `configure`。Aurelia 引用 `configure` 函数，向他传入 Aurelia 对象，之后我们可以用来 配置框架的这些那些东西 : ) 。\n\n实例：\n```\nimport {LogManager} from 'aurelia-framework';\nimport {ConsoleAppender} from 'aurelia-logging-console';\n\nLogManager.addAppender(new ConsoleAppender());\nLogManager.setLevel(LogManager.logLevel.debug);\n\nexport function configure(aurelia) {\n  aurelia.use\n    .defaultBindingLanguage()\n    .defaultResources()\n    .router()\n    .eventAggregator()\n    .plugin('./path/to/plugin');\n\n  aurelia.start().then(a => a.setRoot('app', document.body));\n}\n```\n\n除了自定义插件的代码，以上的代码都是 `aurelia-app` 默认会帮你完成的工作。如果你使用配置文件的方法，你需要自己配置这些文件，但是你也可以安装自定义的插件，用一些 services 设置依赖注入的 container，安装视图模版中用到的全局资源等。\n\n如果你使用配置文件的方法，你可以只写一个简单的文件，他包含了所有我们上面栗子的标准选项，然后这么写：\n```\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging();\n\n  aurelia.start().then(a => a.setRoot());\n}\n```\n\n### Logging\n\nAurelia 框架有一个简单的 logging abstraction，默认是无操作的。上面的配置展示了如何安装一个附件( appender )来向控制台 console 输出 log 数据。我们还可以设置 log level，`logLevel` 的值可以为：`none`, `error`, `warn`, `info` and `debug`。\n\n你可以简单的创建自己的 `appender`。配合 appender 接口来实现一个 类。最好的栗子是看源码：[console log appender's source](https://github.com/aurelia/logging-console/blob/master/src/index.js)\n\n### Plugins\n\n**插件** 是只有一个 exported `configure` 函数的  module 。当启动时，Aurelia 会 load 所有插件模块 ，将 Aurelia 的实例传入插件们的 `configure` 函数并执行。\n\n插件可从 配置函数 返回一个 `Promise` 来完成异步的配置任务。在写插件时，要确保明确的提供所有的 metadata，包括给 Custom Elements 使用的 View Strategy。\n\n为了 配置你的插件的来源，在 app 中你可以设置一个函数或者对象作为配置函数的第二个参数，在插件中可以用到，你的插件的使用者可以这么用：\n\n```\naurelia.use.plugin('./path/to/plugin', config => { /* configuration work */ });\n```\n\n> Note:  插件不能依赖 Aurelia 的命名约定。因为 Aurelia 的命名约定是可配置的，所以第三方插件应该明确，确保在不同的上下文环境下函数的执行。\n\n#### Promises\n\nAurelia 默认使用 ES6 原生的 Promises 或者 polyfill。你也可以使用这个不错的 Promise 库 [Bluebird](https://github.com/petkaantonov/bluebird) 来替换。使用它只需要将它放到页面上其他引用的脚本前面，他回使用自己标准的 Promise 实现，这个方法比原生的 Promise 要快，并且拥有更好的 debugging 支持。另外，在使用 Babel 编译器的时候，可以使用 [coroutines](http://babeljs.io/docs/usage/transformers/other/bluebird-coroutines/) 来改进异步代码的书写。\n\n### The Aurelia Object\n\n因为自定义配置模块和插件都需要用到 Aurelia Object，下面是一个简单的 API 的解释：\n\n```\nexport class Aurelia {\n  loader:Loader; //the module loader\n  container:Container; //the app-level dependency injection container\n  use:Plugins; //the plugins api (see above)\n\n  withInstance(type, instance):Aurelia; //DI helper method (pass through to container)\n  withSingleton(type, implementation):Aurelia; //DI helper method (pass through to container)\n  globalizeResources(...resourcePaths):Aurelia; //module ids of resources relative to the configuration/plugin module\n  renameGlobalResource(resourcePath, newName); //renames a globally available resource to avoid naming conflicts\n\n  start():Promise; //starts the framework, causing plugins to be installed and resources to be loaded\n  setRoot(root, applicationHost):Promise; //set your \"root\" or \"app\" view-model and display it\n}\n```\n\n## Views and View Models\n\n在 Aurelia 中，用户交互元素由 View 和 View-model 对来实现。View 由 HTML 完成，会被渲染到 DOM 中，View-model 由 JavaScript 完成， 向 View 提供数据和交互行为。模版引擎和 DI（依赖注入）负责创建配对之间的联系，并且为进程执行一个可预言的生命周期？（不理解）\n\n在连接成功之后， Aurelia 强大的数据绑定就能将 View 和 View-model 的数据和视图联合起来，实现数据双向绑定。\n\n- 这样的分隔方法有利于 开发和设计 的合作: ) \n- 可维护性、灵活的架构、甚至代码控制……\n\n### Dependency Injection (DI)\n\nView-model 和其他的交互元素：Custom Elements、Customs Attributes，都被作为 类来创建，然后框架中使用依赖注入容器来实例化。 这种代码容易模块化和测试。\n\n你可以将需求拆分为小的对象，合作来完成一个目标，而不是写一个巨大的类。DI 可以配合完成拼接。\n\n使用 DI时，在你的 类中的 constructor 中传入，下面是栗子：\n```\nimport {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n\n```\n\n在 ES7 或者 TypeScript 中可以使用 Decrators，这时你只需要加一个 `inject` decorator，每注入一个类型传一个参数。如果你使用的语法没有支持 Decrators，或者是不想用，也可以添加一个叫 `inject` 的静态属性或者方法到你的类中。这样必须返回一个可注入的类型数组（array of injectable types）。下面是一个在 CoffeeScript 结合 CommomJS 模块的栗子：\n\n```\nHttpClient = require('aurelia-http-client').HttpClient;\n\nclass Flickr\n  constructor: (@http) ->\n  @inject:[HttpClient]\n```\n\n如果你正在使用　TypeScript 开发，可以用 `--emitDecoratorMetadata` 编译标识配合 Aurelia 的 `autoinject()` decorator 来让框架读取标准 TS 类型信息。这样做之后，就不需要去复制类型了。代码实例：\n\n```\nimport {autoinject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@autoinject()\nexport class CustomerDetail{\n    constructor(http:HttpClient){\n        this.http = http;\n    }\n}\n```\n\n> Note: TypeScript 实现这个编译选项的方式中有个有趣的细节，他适用于任何decorator。所以，如果你在自己的 TS 类中拿到一些其他的 Decorator ，就不需要引入 `autoinject` decorator，那些 Type information 仍然能被 Aurelia 的依赖注入框架发现。\n\n当明确的声明依赖时，他们不一定非得是 constructor types，还可以是 resolvers 的实例。例如：\n\n```\nimport {Lazy, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@inject(Lazy.of(HttpClient))\nexport class CustomerDetail{\n    constructor(getHTTP){\n        this.getHTTP = getHTTP;\n    }\n}\n```\n\n这样的 `Lazy` resolver 实际上没有提供一个 `HttpClient` 的实例，它提供一个可以随时返回 `HttpClient` 实例的函数。你可以通过写个类继承 Resolver 来创建 resolvers，或者使用我们提供的一些方便的 resolvers：\n\n-  `lazy` -  Injects a function for lazily evaluating the dependency.\n\t- ex . `Lazy.of(HttpClient)`\n- `All` - Injects an array of all services registered with the provided key\n\t- ex. `All.of(Plugin)`\n- `Optional` -  Injects an instance of a class only if it already exists in the container; null otherwise.\n\t- ex. `Optional.of(LoggedInUser)`\n\n另外关于 resolvers，你也可以用 `Registration` decorators 来指定一个默认的注册(registration)，或者一个实例的生命周期。默认情况下，DI 容器假设每个实例都是单例？（everything is a singleton instance）one instance for the app。但是你可以用一个registration decorator 来修改，示例：\n\n```\nimport {transient, inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\n\n@transient()\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n```\n\n如上所写，每次请求 DI 容器返回 CustomerDetail 的时候会返回一个新的实例，而不是一个 singleton。`singleton` 和 `transient` registrations 都提供给外部使用，但是你也可以通过构建一个实现 `register(container, key, fn)` 函数的类，来创建 registration 。之后，就可以简单了用 `registration` decorator 来把它的实例添加到你的类中。\n\n如果你不能或不想用 decorators。don't worry! 我们准备了后备方案。只要提供一个静态的 `decorators` 属性或方法，然后使用我们 链式的 `Decorators` helper。 这位 helper 有对应我们所有 decorators 的方法。So，无论你使用何种语言都十分简单使用。下面是 CoffeeScript 的实例：\n\n```\nHttpClient = require('aurelia-http-client').HttpClient;\nDecorators = require('aurelia-framework').Decorators;\n\nclass CustomerDetail\n  constructor: (@http) ->\n  @decorators:Decorators.transient().inject(HttpClient);\n```\n\n### Parent View Models\n\nBy default a View-model's access is limited to injected objects as well as children of the class. Sometimes it may be desirable to refer to objects and methods on a parent View-model, which can be achieved by storing the parent during the bind method of the view lifecycle:\n\n```\nclass ChildViewModel {\n  bind(bindingContext) {\n    this.$parent = bindingContext;\n  }\n}\n```\n\n## Tamplating\n\nAurelia 的模版引擎负责加载视图和他们所需要的资源，以及完美编译 HTML 和渲染 UI 到屏幕上。创建一个视图，你仅仅需要一个HTML文件，在里面加上`HTMLTemplate` 即可，下面是个简单的视图：\n\n```\n<template>\n    <div>Hello World!</div>\n</template>\n```\n\n所有在 `template` 标签中的内容都由 Aurelia 管理。但是，因为 Aurelia 使用 HTMLImport 技术来加载视图，所以你也可以写入 `links` ，他们也会被正确的加载，还可以用相对路径的写法哦，具体是指：\n\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"./hello.css\">\n\n<template>\n    <div class=\"hello\">Hello World!</div>\n</template>\n```\n\n这样你就可以为每个视图选择需要加载的样式，还可以使用 Web components on the fly。\n\n当你需要引入一个 Aurelia 特制 (Aurelia-specific) 的资源时，比如一个 Aurelia Custom Element，Custom Attribute or Value Converter，你会在视图中用到一个 `require` 元素。栗子：\n\n```\n<template>\n  <require from='./nav-bar'></require>\n\n  <nav-bar router.bind=\"router\"></nav-bar>\n\n  <div class=\"page-host\">\n    <router-view></router-view>\n  </div>\n</template>\n\n```\n\n在这个例子中 `nav-bar` 是一个我们需要使用的 Aurelia Custom Element。在 我们使用 `require` element 时，框架的资源管道会处理输入的元件。这么做有以下好处：\n- 去重 - 资源只会在 app 中被 download 一次，即使其他的视图需要相同的元素，也只会被下载一次。\n- 一次编译 - 模版中这样引入自定义元素在整个应用周期只会被编译一次\n- Local Scope( 本地作用域？ ) - 引入的资源只能在引入他的视图中可见，通过这样排除全局作用域的方法，可以有效减少命名冲突的可能性、加强可维护性和易懂性\n- 重命名 - 资源可以被重命名，这样当你在同一视图，引入两个名字相同或相似的第三方资源时，就可以使用这个特性\n\t- ex. `<require from=\"./nav-bar\" as=\"foo-bar\"></require>` - 现在你可以使用 `foo-bar` 元素来替代 `nav-bar` 元素。（这是基于 ES6 的import 语法，重命名被认为是代替 Alias 的方法，因为他完全的重命名了type ）\n- 包 - require 可以指向一个包括多资源的模块，包中的所有的资源会被导入同个视图\n- 可扩展性 - 我们可以定义新的资源类型，You can define new types of resources which, when required in this way, can execute custom loading (async one-time) and registration (once per-view). This is a declarative, extensible resource loading pipeline.\n- ES6 - 代码是由 ES6 loader 加载而不是 HTMLImport 机制， enabling all the features and extensibility of your loader。这么设计完全统一了所有app资源的加载方法，无论是 JS 还是 HTML\n\n在你的视图中，你会用到上面提到的各种不同的资源以及数据绑定\n\n>Note: 你可能会觉得每个视图中都要引入东西很无聊╮(╯▽╰)╭。Remember ，在引导（ bootstrapping）阶段，你可以配置 Aurelia 可以让所有视图使用的全局资源。Just use `aurelia.globalizeResources(...resourcePaths)`。\n\nAurelia  polyfills browsers 不包括支持 templates。但是，模版的一些特性可以被 polyfilled ，需要 workarounds。特别当 `template` 元素在 `select` 和 `table` 元素中时，下面的代码在不原生支持 templates 的浏览器中不能实现：\n\n```\n  <table>\n    <template repeat.for=\"customer of customers\">\n      <tr>\n        <td>${customer.fullName}</td>\n      </tr>\n    </template>\n  </table>\n```\n\n为了重复输出 `tr` 元素，可以简单的修改为：\n\n```\n  <table>\n    <tr repeat.for=\"customer of customers\">\n      <td>${customer.fullName}</td>\n    </tr>\n  </table>\n\n```\n\n### Databinding\n\n数据绑定让你可以将一个 JS 对象中的状态和行为连接到 HTML 视图中。当连接建立之后，任何的连接的属性改动都会在一个或两个方向上同步。\n\nJS 对象中的改变能反应在视图上，视图上的修改能映射到 JS 对象中。\n\n要建立这样连接，可以在 HTML 中利用 `binding commands` 。通过使用一个绑定操作符 `.` 来声明绑定命令。当 HTML 的属性中包含一个 `.`，编译器会将属性的名字和值传到绑定语言（binding language）来编译，当视图被创建时，通过建立的连接，我们就能使用一个或更多的绑定表达式了。\n\n可以自己扩展绑定命令，但是 Aurelia 提供了一个覆盖大多数常用使用案例的命令集合。\n\n#### bind, one-way, two-way & one-time\n\n最常用的绑定命令是 `.bind`。这样会让所有的属性使用单向绑定来绑定，而元素的值使用双向绑定。\n\n这意味着神马呢？\n\n**单向绑定**是说改变JS 的 view-models 会反映到 view 上，而反方向不会反应。\n**双向绑定**是指每个方向改变都会影响到对方。\n\n`.bind` 会假设你在绑定表单元素的时候会希望 view 上的 form 改变反应到 view-model 上，而其他的情况下就使用单向绑定，这是因为，在许多的时候，双向绑定到一个非表单元素上是无意义的。下面是 `.bind` 的小栗子：\n\n```\n<input type=\"text\" value.bind=\"firstName\">\n<a href.bind=\"url\">Aurelia</a>\n```\n\n在上面的例子中，`input` 元素会将他的值绑定到 view-model 的 `firstName` 属性上。改变 `firstName` 的属性会更新 `input.value` ，而改变 `input.value` 会更新 `firstName` 的值。另一边，`a` 标签的 `href` 属性绑在了 view-model 的 `url` 属性上。只有改变 `url` 的值会影响 `href`，反方向则不通。\n\n我们也可以明确的使用 `.one-way` 或者 `.two-way` 来代替 `.bind`。举一个常见的栗子：当需要引入一个 Web Components 作为输入类型的控件时，你可以这样使用：\n\n```\n<markdown-editor value.two-way=\"markdown\"></markdown-editor>\n```\n\n为了优化性能和最小化 CPU 与内存的使用，你可以选择利用 `.one-time` 绑定命令来在初始绑定阶段，将 View-model 的数据“一次性”输出到 view，这之后就不会再有任何同步行为了。\n\n#### delegate, trigger & call\n\n绑定命令不只是能连接 View-model 和 view 的属性，还可以触发行为操作。例如，如果你想要在点击按钮的时候执行一个方法，你可以像这么使用 `trigger` 命令：\n\n```\n<button click.trigger=\"sayHello()\">Say Hello</button>\n```\n\n当按钮被点击之后， view-model 的 `sayhello` 方法就会被执行。即便如此，像这样往每个单独的元素中绑定事件控制器并不是很有效率，所以通常你会比较倾向于使用事件委托。我们可以用 `.delegate` 命令来使用事件委托。例子如下：\n\n```\n<button click.delegate=\"sayHello()\">Say Hello</button>\n```\n\n当你需要访问事件对象时，`$event` 可以作为参数传到 delegate/trigger 的函数中。\n\n```\n<button click.delegate=\"sayHello($event)\">Say Hello</button>\n```\n\n> Note: 事件委派，是一个使用 DOM 事件冒泡特性的技术。当使用 `.delegate`，一个单独的事件控制器被绑定到 document，而不是一个绑定到单独的元素。当元素的事件被触发，它沿着 DOM 冒泡到 有绑着控制器的 document。这是一个能更有效利用内存来处理事件的方式，默认机制中推荐使用这个方法。\n\nAll of this works against DOM events in some way or another. 有时，你在用 Aurelia Custom Attribute or Element 时，会想要一个函数直接的引用，然后在之后什么时候手动的执行它。用 `.call` 绑定可以传一个函数引用（since the attribute will call it later）：\n\n```\n<button touch.call=\"sayHello()\">Say Hello</button>\n```\n\n如上，Custom Attribute `touch` 会获得一个函数，他可以执行你的 `sayhello()` 代码。依赖于 implementor 的特性，你也可以从 caller 得到传值。就像从 trigger/delegate 传 `$event` 对象。\n\n#### string interpolation\n\n有时你需要将属性直接绑定到 document 的内容中或插入属性值中。这时，你可以使用 string interpolation 语法 `${expression}`。 String interpolation 是单向绑定，他的输出被转化为字符串，这时例子：\n\n```\n<span>${fullName}</span>\n```\n\n`fullName` 属性会直接被插入 span 的内容。你还可以将这个用在 css class 的绑定上：\n\n```\n<div class=\"dot ${color} ${isHappy ? 'green' : 'red'}\"></div>\n```\n\n在上面例子中，“dot” 是一个静态的类，`isHappy` 为 true 时是 “green”，false 时是 “red”。还有 `color` 的值会被作为一个类被加入。\n\n> Note: 你可以在绑定中使用简单的表达式。但是不要试图做其他的更多的，因为在试图中最好不要涉及过多代码。你应该只想建立 view 和 view-model 的链接。\n\n#### ref\n\n绑定语言还识别一个特别属性的用法：`ref`。使用 `ref` 你可以为一个元素创建 local name，然后可以在其他绑定表达式中使用。他也可以设置为 view-model 的属性，之后你就能在代码中访问到。\n\n```\n<input type=\"text\" ref=\"name\"> ${name.value}\n```\n\nYou can also use ref as a binding command to get the view-model instance that backs an Aurelia Custom Element or Custom Attribute. By using this technique, you can connect different components to each other:\n通过这个技术，可以将不同的组件联系在一起：\n\n```\n<producer producer.ref=\"producerVM\"></producer>\n<consumer input.bind=\"producerVM.output\"></consumer>\n```\n\n`producer.ref = \"producerVM\"` 为 view-model 的 `producer` custom element 创建个假名，然后在别的地方用。下面是一些 `ref` 的用法：\n\n- `attribute-name.ref=\"someIndetifier\"` - 给 custom attribute 类的实例创建引用\n\n- `element-name.ref=\"someIndetifier\"` - 给 custom element 类实例创建引用\n\n- `ref=\"someIndetifier\"` - 给 DOM 中的 HTMLElement\n创建一个引用\n\n\n#### select elements\n\nHTMLSelectElement( HTML select 元素 ) 上的 `value.bind` 有一个特别的操作来支持单选或多选模式。\n\n经典的 select 元素使用一个 `value.bind` 和 `repeat` 结合来渲染时，可以这么写：\n\n```\n<select value.bind=\"favoriteColor\">\n    <option>Select A Color</option>\n    <option repeat.for=\"color of colors\" value.bind=\"color\">${color}</option>\n</select>\n```\n\n但是，有时你想用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 select 元素的栗子：\n\n```\n<select value.bind=\"employeeOfTheMonth\">\n  <option>Select An Employee</option>\n  <option repeat.for=\"employee of employees\" model.bind=\"employee\">${employee.fullName}</option>\n</select>\n```\n\n与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 `model` 中，而不是只能接受字符串的 `value`。\n\n#### multi select elements\n\n在多选情景下，你可以将 select 元素的值绑定到一个数组。下面的栗子展示了如何绑定一个字符串数组 `favoriteColors`：\n\n```\n<select value.bind=\"favoriteColors\" multiple>\n    <option repeat.for=\"color of colors\" value.bind=\"color\">${color}</option>\n</select>\n```\n\n同样适用于对象数组：\n\n```\n<select value.bind=\"favoriteEmployees\" multiple>\n  <option repeat.for=\"employee of employees\" model.bind=\"employee\">${employee.fullName}</option>\n</select>\n```\n\n#### radio\n\n在 HTMLInputElement （HTML input 元素）中使用  `checked.bind` 也有特殊的用法来支持绑定字符串或是对象这样的非 boolean 值。\n\n一个经典的 radio 按钮组渲染栗子：\n\n```\n<label repeat.for=\"color of colors\">\n  <input type=\"radio\" name=\"clrs\" value.bind=\"color\" checked.bind=\"$parent.favoriteColor\" />\n  ${color}\n</label>\n```\n\n但是，有时你想使用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 radio 按钮组的栗子：\n\n```\n<label repeat.for=\"employee of employees\">\n  <input type=\"radio\" name=\"emps\" model.bind=\"employee\" checked.bind=\"$parent.employeeOfTheMonth\" />\n  ${employee.fullName}\n</label>\n```\n\n与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 `model` 中，而不是只能接受字符串的 `value`。\n\n你也可以将 boolean 属性绑定到一个 radio 组。\n\n```\n<label><input type=\"radio\" name=\"tacos\" model.bind=\"null\" checked.bind=\"likesTacos\" />Unanswered</label>\n<label><input type=\"radio\" name=\"tacos\" model.bind=\"true\" checked.bind=\"likesTacos\" />Yes</label>\n<label><input type=\"radio\" name=\"tacos\" model.bind=\"false\" checked.bind=\"likesTacos\" />No</label>\n```\n\n#### checkboxes\n\n为了更好支持 多选 的情景，Aurelia 可以将 input 元素的 checked 属性绑定到数组。 下面是如果绑定字符串数组 `favoriteColors`:\n\n```\n<label repeat.for=\"color of colors\">\n  <input type=\"checkbox\" value.bind=\"color\" checked.bind=\"$parent.favoriteColors\" />\n  ${color}\n</label>\n```\n\n同样可以绑定对象数组：\n\n```\n<label repeat.for=\"employee of employees\">\n  <input type=\"checkbox\" model.bind=\"employee\" checked.bind=\"$parent.favoriteEmployees\" />\n  ${employee.fullName}\n</label>\n```\n\n还可以绑定 boolean 类型的属性：\n\n```\n<li><label><input type=\"checkbox\" checked.bind=\"wantsFudge\" />Fudge</label></li>\n<li><label><input type=\"checkbox\" checked.bind=\"wantsSprinkles\" />Sprinkles</label></li>\n<li><label><input type=\"checkbox\" checked.bind=\"wantsCherry\" />Cherry</label></li>\n```\n\n#### innerHTML\n\n你还可以用 `innerhtml` 属性绑定元素的 `innerHTML` 值：\n\n```\n<div innerhtml.bind=\"htmlProperty\"></div>\n<div innerhtml=\"${htmlProperty}\"></div>\n```\n\nAurelia 提供一个简单的 html sanitization 转化器：\n\n```\n<div innerhtml.bind=\"htmlProperty | sanitizeHtml\"></div>\n<div innerhtml=\"${htmlProperty | sanitizeHtml}\"></div>\n```\n\n我们鼓励你使用一个更加完善的 html sanitizer 就像 [sanitize-html](https://www.npmjs.com/package/sanitize-html)。下面是使用这个包创建一个转换器的用法：\n\n```\njspm install npm:sanitize-html\n```\n\n```\nimport sanitizeHtml from 'sanitize-html';\n\nexport class MySanitizeHtmlValueConverter {\n  toView(untrustedHtml) {\n    return sanitizeHtml(untrustedHtml);\n  }\n}\n```\n\n> Note: 使用 `innerhtml` 属性绑定仅仅是设置了元素的 `innerHTML` 属性。这些 HTML 标签不会传到 Aurelia 的模版系统。 Binding expressions and require elements will not be evaluated. 已经有一个问题在 track 这个问题了 [aurelia/templating#35](https://github.com/aurelia/templating/issues/35)。\n\n#### textContent\n\n我们可以用 `textcontent` 属性绑定 元素的 `textContent`：\n\n```\n<div textcontent.bind=\"stringProperty\"></div>\n<div textcontent=\"${stringProperty}\"></div>\n```\n\n双向绑定可以用在 `contenteditable` 元素上：\n\n```\n<div textcontent.bind=\"stringProperty\" contenteditable=\"true\"></div>\n```\n\n#### style\n\n我们可以还可以绑定 css 字符串或对象到一个元素的 `style` 属性：\n\n```\nexport class Foo {\n  constructor() {\n    this.styleString = 'color: red; background-color: blue';\n\n    this.styleObject = {\n      color: 'red',\n      'background-color': 'blue'\n    };\n  }\n}\n```\n\n```\n<div style.bind=\"styleString\"></div>\n<div style.bind=\"styleObject\"></div>\n```\n\n当使用插值语法时，为了兼容 IE 可以使用 `style` 属性的别名`css` 来替代：\n\n```\n<!-- good: -->\n<div css=\"width: ${width}px; height: ${height}px;\"></div>\n\n<!-- incompatible with Internet Explorer: -->\n<div style=\"width: ${width}px; height: ${height}px;\"></div>\n```\n\n#### Adaptive Binding\n\nAurelia 有一个可适应绑定（adaptive binding） 系统，当需要决定如何最有效的观察变化时，他会从大量的策略中选择一个。更多关于这个系统如何运作的信息请看[这篇文章](http://blog.durandal.io/2015/04/03/aurelia-adaptive-binding/)。大多时候你都不需要考虑这些繁枝细节，然而了解他将有助于你了解使用绑定系统时应该避免的一些低效的方法。\n\n**首先需要了解：computed properties ( properties with getter functions ) 使用脏检查来观察变化。** 更有效的策略，例如：Object.observe 和 property rewriting （属性重写）并不适用于 computed property 类型。\n\n当前的浏览器环境下，脏检查是一个必要的麻烦（necessary evil）。在写这边文章时，只有极少浏览器支持 Object.observe 。Aurelia 的脏检查机制与 [Polymer](https://www.polymer-project.org/)使用的很相似。他利用 Aurelia 的 micro-task-queue 来处理更新的DOM 是蛮有效的。\n\n在你的应用中有一些绑定使用脏检查时并不会造成性能问题，大量使用才会有问题。幸运的是，我们有个方法可以避免脏值检查简单的 computed properties。来看看下面的 `fullName` 属性：\n\n```\nexport class Person {\n  firstName = 'John';\n  lastName = 'Doe';\n\n  @computedFrom('firstName', 'lastName')\n  get fullName(){\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n```\n\n我们使用 `@computedFrom` decorator 来向 Aurelia 绑定系统供一个提示，这时系统就知道只有 `firstName` 或 `lastName` 改变时，`fullName` 才会改变。\n\n留意脏检查是怎么工作的也是很重要的。当一个属性使用了脏检查，绑定系统就定期检查现在属性值是否与原来的观察值有所不同。检测时间差默认为 120 毫秒。这就意味着你的属性的 getter 函数有可能被十分频繁的调用，也就不能尽可能的高效了。我们还需要避免不必要的返回对象或者数组的新实例，例如下面：\n\n```\n<template>\n  <label for=\"search\">Search Issues:</label>\n  <input id=\"search\" type=\"text\" value.bind=\"searchText\" />\n  <ul>\n    <li repeat.for=\"issue of filteredIssues\">${issue.abstract}</li>\n  </ul>\n</template>\n```\n\n原生的视图模型实现：\n\n```\nexport class IssueSearch {\n  searchText = '';\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  // this returns a new array instance on every call which will in-turn result in a lot of DOM updates.\n  get filteredIssues() {\n    if (this.searchText === '')\n      return [];\n    return this.allIssues.filter(x => x.abstract.indexOf(this.searchText) !== -1);\n  }\n}\n```\n\n改进的视图模型实现：\n\n```\nexport class IssueSearch {\n  filteredIssues = [];\n  _searchText = '';\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n  set searchText(newValue) {\n    this._searchText = newValue;\n    if (newValue === '') {\n      this.filteredIssues = [];\n    } else {\n      this.filteredIssues = this.allIssues.filter(x => x.abstract.indexOf(this.searchText) !== -1);\n    }\n  }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Aurelia-文档小翻译","published":1,"updated":"2015-06-11T09:02:49.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphh001aok1va0tjnrr8","content":"<p>##Browser Support</p>\n<p>Aurelia 支持现代浏览器，包括 Chrome，Firefox，IE11，Safari 8。但是我们也提供兼容 IE9 及以上的方法。</p>\n<p>为了需要兼容 IE9 及以上，我们需要为 MutationObservers 添加一个额外的 polyfill。实现方法，用 <code>jspm</code> 安装 <code>github:polymer/mutationobservers</code>。接着在 <code>aurelia-bootstrapper</code> 的外层这样调用它：</p>\n<pre><code>&lt;script src=&quot;jspm_packages/github/polymer/mutationobservers@0.4.2/MutationObserver.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;jspm_packages/system.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;config.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  // Loads WeakMap polyfill needed by MutationObservers\n  System.import(&#39;core-js&#39;).then( function() {\n    // Imports MutationObserver polyfill\n    System.import(&#39;mutationobservers&#39;).then( function() {\n      // Ensures start of Aurelia when all required IE9 dependencies are loaded\n      System.import(&#39;aurelia-bootstrapper&#39;);\n    })\n  });\n&lt;/script&gt;\n</code></pre><blockquote>\n<p>Note: Aurelia 本身不需要 WeakMap，但是上面的 MutationObserver ployfill 会用到。 </p>\n</blockquote>\n<h2 id=\"Startup-amp-Configuration\"><a href=\"#Startup-amp-Configuration\" class=\"headerlink\" title=\"Startup &amp; Configuration\"></a>Startup &amp; Configuration</h2><p>大多数的平台都为代码执行设置有一个 “main” 或者入口点，Aurelia 也不例外。如果你已经看过了 <a href=\"http://aurelia.io/get-started.html\" target=\"_blank\" rel=\"external\">Get Started</a>，你会发现这个 <code>aurelia-app</code> 属性。把它简单的放到一个 HTML 元素中，Aurelia 的引导器会加载一个 <code>app.js</code> 和 <code>app.html</code>，将他们通过数据绑定在一起，然后将他们注册到 <code>aurelia-app</code> 属性放置的地方。</p>\n<p>有时，我们想要配置框架，或者在向用户展示信息之前优先跑些代码，又或者，在项目进行中时，向需要 startup 配置的方向发展。因此，我们可以给 <code>aurelia-app</code> 一个值，这个值指向一个配置模块。该模块 export 一个单独的函数 <code>configure</code>。Aurelia 引用 <code>configure</code> 函数，向他传入 Aurelia 对象，之后我们可以用来 配置框架的这些那些东西 : ) 。</p>\n<p>实例：</p>\n<pre><code>import {LogManager} from &#39;aurelia-framework&#39;;\nimport {ConsoleAppender} from &#39;aurelia-logging-console&#39;;\n\nLogManager.addAppender(new ConsoleAppender());\nLogManager.setLevel(LogManager.logLevel.debug);\n\nexport function configure(aurelia) {\n  aurelia.use\n    .defaultBindingLanguage()\n    .defaultResources()\n    .router()\n    .eventAggregator()\n    .plugin(&#39;./path/to/plugin&#39;);\n\n  aurelia.start().then(a =&gt; a.setRoot(&#39;app&#39;, document.body));\n}\n</code></pre><p>除了自定义插件的代码，以上的代码都是 <code>aurelia-app</code> 默认会帮你完成的工作。如果你使用配置文件的方法，你需要自己配置这些文件，但是你也可以安装自定义的插件，用一些 services 设置依赖注入的 container，安装视图模版中用到的全局资源等。</p>\n<p>如果你使用配置文件的方法，你可以只写一个简单的文件，他包含了所有我们上面栗子的标准选项，然后这么写：</p>\n<pre><code>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging();\n\n  aurelia.start().then(a =&gt; a.setRoot());\n}\n</code></pre><h3 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h3><p>Aurelia 框架有一个简单的 logging abstraction，默认是无操作的。上面的配置展示了如何安装一个附件( appender )来向控制台 console 输出 log 数据。我们还可以设置 log level，<code>logLevel</code> 的值可以为：<code>none</code>, <code>error</code>, <code>warn</code>, <code>info</code> and <code>debug</code>。</p>\n<p>你可以简单的创建自己的 <code>appender</code>。配合 appender 接口来实现一个 类。最好的栗子是看源码：<a href=\"https://github.com/aurelia/logging-console/blob/master/src/index.js\" target=\"_blank\" rel=\"external\">console log appender’s source</a></p>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p><strong>插件</strong> 是只有一个 exported <code>configure</code> 函数的  module 。当启动时，Aurelia 会 load 所有插件模块 ，将 Aurelia 的实例传入插件们的 <code>configure</code> 函数并执行。</p>\n<p>插件可从 配置函数 返回一个 <code>Promise</code> 来完成异步的配置任务。在写插件时，要确保明确的提供所有的 metadata，包括给 Custom Elements 使用的 View Strategy。</p>\n<p>为了 配置你的插件的来源，在 app 中你可以设置一个函数或者对象作为配置函数的第二个参数，在插件中可以用到，你的插件的使用者可以这么用：</p>\n<pre><code>aurelia.use.plugin(&#39;./path/to/plugin&#39;, config =&gt; { /* configuration work */ });\n</code></pre><blockquote>\n<p>Note:  插件不能依赖 Aurelia 的命名约定。因为 Aurelia 的命名约定是可配置的，所以第三方插件应该明确，确保在不同的上下文环境下函数的执行。</p>\n</blockquote>\n<h4 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h4><p>Aurelia 默认使用 ES6 原生的 Promises 或者 polyfill。你也可以使用这个不错的 Promise 库 <a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"external\">Bluebird</a> 来替换。使用它只需要将它放到页面上其他引用的脚本前面，他回使用自己标准的 Promise 实现，这个方法比原生的 Promise 要快，并且拥有更好的 debugging 支持。另外，在使用 Babel 编译器的时候，可以使用 <a href=\"http://babeljs.io/docs/usage/transformers/other/bluebird-coroutines/\" target=\"_blank\" rel=\"external\">coroutines</a> 来改进异步代码的书写。</p>\n<h3 id=\"The-Aurelia-Object\"><a href=\"#The-Aurelia-Object\" class=\"headerlink\" title=\"The Aurelia Object\"></a>The Aurelia Object</h3><p>因为自定义配置模块和插件都需要用到 Aurelia Object，下面是一个简单的 API 的解释：</p>\n<pre><code>export class Aurelia {\n  loader:Loader; //the module loader\n  container:Container; //the app-level dependency injection container\n  use:Plugins; //the plugins api (see above)\n\n  withInstance(type, instance):Aurelia; //DI helper method (pass through to container)\n  withSingleton(type, implementation):Aurelia; //DI helper method (pass through to container)\n  globalizeResources(...resourcePaths):Aurelia; //module ids of resources relative to the configuration/plugin module\n  renameGlobalResource(resourcePath, newName); //renames a globally available resource to avoid naming conflicts\n\n  start():Promise; //starts the framework, causing plugins to be installed and resources to be loaded\n  setRoot(root, applicationHost):Promise; //set your &quot;root&quot; or &quot;app&quot; view-model and display it\n}\n</code></pre><h2 id=\"Views-and-View-Models\"><a href=\"#Views-and-View-Models\" class=\"headerlink\" title=\"Views and View Models\"></a>Views and View Models</h2><p>在 Aurelia 中，用户交互元素由 View 和 View-model 对来实现。View 由 HTML 完成，会被渲染到 DOM 中，View-model 由 JavaScript 完成， 向 View 提供数据和交互行为。模版引擎和 DI（依赖注入）负责创建配对之间的联系，并且为进程执行一个可预言的生命周期？（不理解）</p>\n<p>在连接成功之后， Aurelia 强大的数据绑定就能将 View 和 View-model 的数据和视图联合起来，实现数据双向绑定。</p>\n<ul>\n<li>这样的分隔方法有利于 开发和设计 的合作: ) </li>\n<li>可维护性、灵活的架构、甚至代码控制……</li>\n</ul>\n<h3 id=\"Dependency-Injection-DI\"><a href=\"#Dependency-Injection-DI\" class=\"headerlink\" title=\"Dependency Injection (DI)\"></a>Dependency Injection (DI)</h3><p>View-model 和其他的交互元素：Custom Elements、Customs Attributes，都被作为 类来创建，然后框架中使用依赖注入容器来实例化。 这种代码容易模块化和测试。</p>\n<p>你可以将需求拆分为小的对象，合作来完成一个目标，而不是写一个巨大的类。DI 可以配合完成拼接。</p>\n<p>使用 DI时，在你的 类中的 constructor 中传入，下面是栗子：</p>\n<pre><code>import {inject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n</code></pre><p>在 ES7 或者 TypeScript 中可以使用 Decrators，这时你只需要加一个 <code>inject</code> decorator，每注入一个类型传一个参数。如果你使用的语法没有支持 Decrators，或者是不想用，也可以添加一个叫 <code>inject</code> 的静态属性或者方法到你的类中。这样必须返回一个可注入的类型数组（array of injectable types）。下面是一个在 CoffeeScript 结合 CommomJS 模块的栗子：</p>\n<pre><code>HttpClient = require(&#39;aurelia-http-client&#39;).HttpClient;\n\nclass Flickr\n  constructor: (@http) -&gt;\n  @inject:[HttpClient]\n</code></pre><p>如果你正在使用　TypeScript 开发，可以用 <code>--emitDecoratorMetadata</code> 编译标识配合 Aurelia 的 <code>autoinject()</code> decorator 来让框架读取标准 TS 类型信息。这样做之后，就不需要去复制类型了。代码实例：</p>\n<pre><code>import {autoinject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@autoinject()\nexport class CustomerDetail{\n    constructor(http:HttpClient){\n        this.http = http;\n    }\n}\n</code></pre><blockquote>\n<p>Note: TypeScript 实现这个编译选项的方式中有个有趣的细节，他适用于任何decorator。所以，如果你在自己的 TS 类中拿到一些其他的 Decorator ，就不需要引入 <code>autoinject</code> decorator，那些 Type information 仍然能被 Aurelia 的依赖注入框架发现。</p>\n</blockquote>\n<p>当明确的声明依赖时，他们不一定非得是 constructor types，还可以是 resolvers 的实例。例如：</p>\n<pre><code>import {Lazy, inject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@inject(Lazy.of(HttpClient))\nexport class CustomerDetail{\n    constructor(getHTTP){\n        this.getHTTP = getHTTP;\n    }\n}\n</code></pre><p>这样的 <code>Lazy</code> resolver 实际上没有提供一个 <code>HttpClient</code> 的实例，它提供一个可以随时返回 <code>HttpClient</code> 实例的函数。你可以通过写个类继承 Resolver 来创建 resolvers，或者使用我们提供的一些方便的 resolvers：</p>\n<ul>\n<li><code>lazy</code> -  Injects a function for lazily evaluating the dependency.<ul>\n<li>ex . <code>Lazy.of(HttpClient)</code></li>\n</ul>\n</li>\n<li><code>All</code> - Injects an array of all services registered with the provided key<ul>\n<li>ex. <code>All.of(Plugin)</code></li>\n</ul>\n</li>\n<li><code>Optional</code> -  Injects an instance of a class only if it already exists in the container; null otherwise.<ul>\n<li>ex. <code>Optional.of(LoggedInUser)</code></li>\n</ul>\n</li>\n</ul>\n<p>另外关于 resolvers，你也可以用 <code>Registration</code> decorators 来指定一个默认的注册(registration)，或者一个实例的生命周期。默认情况下，DI 容器假设每个实例都是单例？（everything is a singleton instance）one instance for the app。但是你可以用一个registration decorator 来修改，示例：</p>\n<pre><code>import {transient, inject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@transient()\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n</code></pre><p>如上所写，每次请求 DI 容器返回 CustomerDetail 的时候会返回一个新的实例，而不是一个 singleton。<code>singleton</code> 和 <code>transient</code> registrations 都提供给外部使用，但是你也可以通过构建一个实现 <code>register(container, key, fn)</code> 函数的类，来创建 registration 。之后，就可以简单了用 <code>registration</code> decorator 来把它的实例添加到你的类中。</p>\n<p>如果你不能或不想用 decorators。don’t worry! 我们准备了后备方案。只要提供一个静态的 <code>decorators</code> 属性或方法，然后使用我们 链式的 <code>Decorators</code> helper。 这位 helper 有对应我们所有 decorators 的方法。So，无论你使用何种语言都十分简单使用。下面是 CoffeeScript 的实例：</p>\n<pre><code>HttpClient = require(&#39;aurelia-http-client&#39;).HttpClient;\nDecorators = require(&#39;aurelia-framework&#39;).Decorators;\n\nclass CustomerDetail\n  constructor: (@http) -&gt;\n  @decorators:Decorators.transient().inject(HttpClient);\n</code></pre><h3 id=\"Parent-View-Models\"><a href=\"#Parent-View-Models\" class=\"headerlink\" title=\"Parent View Models\"></a>Parent View Models</h3><p>By default a View-model’s access is limited to injected objects as well as children of the class. Sometimes it may be desirable to refer to objects and methods on a parent View-model, which can be achieved by storing the parent during the bind method of the view lifecycle:</p>\n<pre><code>class ChildViewModel {\n  bind(bindingContext) {\n    this.$parent = bindingContext;\n  }\n}\n</code></pre><h2 id=\"Tamplating\"><a href=\"#Tamplating\" class=\"headerlink\" title=\"Tamplating\"></a>Tamplating</h2><p>Aurelia 的模版引擎负责加载视图和他们所需要的资源，以及完美编译 HTML 和渲染 UI 到屏幕上。创建一个视图，你仅仅需要一个HTML文件，在里面加上<code>HTMLTemplate</code> 即可，下面是个简单的视图：</p>\n<pre><code>&lt;template&gt;\n    &lt;div&gt;Hello World!&lt;/div&gt;\n&lt;/template&gt;\n</code></pre><p>所有在 <code>template</code> 标签中的内容都由 Aurelia 管理。但是，因为 Aurelia 使用 HTMLImport 技术来加载视图，所以你也可以写入 <code>links</code> ，他们也会被正确的加载，还可以用相对路径的写法哦，具体是指：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./hello.css&quot;&gt;\n\n&lt;template&gt;\n    &lt;div class=&quot;hello&quot;&gt;Hello World!&lt;/div&gt;\n&lt;/template&gt;\n</code></pre><p>这样你就可以为每个视图选择需要加载的样式，还可以使用 Web components on the fly。</p>\n<p>当你需要引入一个 Aurelia 特制 (Aurelia-specific) 的资源时，比如一个 Aurelia Custom Element，Custom Attribute or Value Converter，你会在视图中用到一个 <code>require</code> 元素。栗子：</p>\n<pre><code>&lt;template&gt;\n  &lt;require from=&#39;./nav-bar&#39;&gt;&lt;/require&gt;\n\n  &lt;nav-bar router.bind=&quot;router&quot;&gt;&lt;/nav-bar&gt;\n\n  &lt;div class=&quot;page-host&quot;&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre><p>在这个例子中 <code>nav-bar</code> 是一个我们需要使用的 Aurelia Custom Element。在 我们使用 <code>require</code> element 时，框架的资源管道会处理输入的元件。这么做有以下好处：</p>\n<ul>\n<li>去重 - 资源只会在 app 中被 download 一次，即使其他的视图需要相同的元素，也只会被下载一次。</li>\n<li>一次编译 - 模版中这样引入自定义元素在整个应用周期只会被编译一次</li>\n<li>Local Scope( 本地作用域？ ) - 引入的资源只能在引入他的视图中可见，通过这样排除全局作用域的方法，可以有效减少命名冲突的可能性、加强可维护性和易懂性</li>\n<li>重命名 - 资源可以被重命名，这样当你在同一视图，引入两个名字相同或相似的第三方资源时，就可以使用这个特性<ul>\n<li>ex. <code>&lt;require from=&quot;./nav-bar&quot; as=&quot;foo-bar&quot;&gt;&lt;/require&gt;</code> - 现在你可以使用 <code>foo-bar</code> 元素来替代 <code>nav-bar</code> 元素。（这是基于 ES6 的import 语法，重命名被认为是代替 Alias 的方法，因为他完全的重命名了type ）</li>\n</ul>\n</li>\n<li>包 - require 可以指向一个包括多资源的模块，包中的所有的资源会被导入同个视图</li>\n<li>可扩展性 - 我们可以定义新的资源类型，You can define new types of resources which, when required in this way, can execute custom loading (async one-time) and registration (once per-view). This is a declarative, extensible resource loading pipeline.</li>\n<li>ES6 - 代码是由 ES6 loader 加载而不是 HTMLImport 机制， enabling all the features and extensibility of your loader。这么设计完全统一了所有app资源的加载方法，无论是 JS 还是 HTML</li>\n</ul>\n<p>在你的视图中，你会用到上面提到的各种不同的资源以及数据绑定</p>\n<blockquote>\n<p>Note: 你可能会觉得每个视图中都要引入东西很无聊╮(╯▽╰)╭。Remember ，在引导（ bootstrapping）阶段，你可以配置 Aurelia 可以让所有视图使用的全局资源。Just use <code>aurelia.globalizeResources(...resourcePaths)</code>。</p>\n</blockquote>\n<p>Aurelia  polyfills browsers 不包括支持 templates。但是，模版的一些特性可以被 polyfilled ，需要 workarounds。特别当 <code>template</code> 元素在 <code>select</code> 和 <code>table</code> 元素中时，下面的代码在不原生支持 templates 的浏览器中不能实现：</p>\n<pre><code>  &lt;table&gt;\n    &lt;template repeat.for=&quot;customer of customers&quot;&gt;\n      &lt;tr&gt;\n        &lt;td&gt;${customer.fullName}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/template&gt;\n  &lt;/table&gt;\n</code></pre><p>为了重复输出 <code>tr</code> 元素，可以简单的修改为：</p>\n<pre><code>  &lt;table&gt;\n    &lt;tr repeat.for=&quot;customer of customers&quot;&gt;\n      &lt;td&gt;${customer.fullName}&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;\n</code></pre><h3 id=\"Databinding\"><a href=\"#Databinding\" class=\"headerlink\" title=\"Databinding\"></a>Databinding</h3><p>数据绑定让你可以将一个 JS 对象中的状态和行为连接到 HTML 视图中。当连接建立之后，任何的连接的属性改动都会在一个或两个方向上同步。</p>\n<p>JS 对象中的改变能反应在视图上，视图上的修改能映射到 JS 对象中。</p>\n<p>要建立这样连接，可以在 HTML 中利用 <code>binding commands</code> 。通过使用一个绑定操作符 <code>.</code> 来声明绑定命令。当 HTML 的属性中包含一个 <code>.</code>，编译器会将属性的名字和值传到绑定语言（binding language）来编译，当视图被创建时，通过建立的连接，我们就能使用一个或更多的绑定表达式了。</p>\n<p>可以自己扩展绑定命令，但是 Aurelia 提供了一个覆盖大多数常用使用案例的命令集合。</p>\n<h4 id=\"bind-one-way-two-way-amp-one-time\"><a href=\"#bind-one-way-two-way-amp-one-time\" class=\"headerlink\" title=\"bind, one-way, two-way &amp; one-time\"></a>bind, one-way, two-way &amp; one-time</h4><p>最常用的绑定命令是 <code>.bind</code>。这样会让所有的属性使用单向绑定来绑定，而元素的值使用双向绑定。</p>\n<p>这意味着神马呢？</p>\n<p><strong>单向绑定</strong>是说改变JS 的 view-models 会反映到 view 上，而反方向不会反应。<br><strong>双向绑定</strong>是指每个方向改变都会影响到对方。</p>\n<p><code>.bind</code> 会假设你在绑定表单元素的时候会希望 view 上的 form 改变反应到 view-model 上，而其他的情况下就使用单向绑定，这是因为，在许多的时候，双向绑定到一个非表单元素上是无意义的。下面是 <code>.bind</code> 的小栗子：</p>\n<pre><code>&lt;input type=&quot;text&quot; value.bind=&quot;firstName&quot;&gt;\n&lt;a href.bind=&quot;url&quot;&gt;Aurelia&lt;/a&gt;\n</code></pre><p>在上面的例子中，<code>input</code> 元素会将他的值绑定到 view-model 的 <code>firstName</code> 属性上。改变 <code>firstName</code> 的属性会更新 <code>input.value</code> ，而改变 <code>input.value</code> 会更新 <code>firstName</code> 的值。另一边，<code>a</code> 标签的 <code>href</code> 属性绑在了 view-model 的 <code>url</code> 属性上。只有改变 <code>url</code> 的值会影响 <code>href</code>，反方向则不通。</p>\n<p>我们也可以明确的使用 <code>.one-way</code> 或者 <code>.two-way</code> 来代替 <code>.bind</code>。举一个常见的栗子：当需要引入一个 Web Components 作为输入类型的控件时，你可以这样使用：</p>\n<pre><code>&lt;markdown-editor value.two-way=&quot;markdown&quot;&gt;&lt;/markdown-editor&gt;\n</code></pre><p>为了优化性能和最小化 CPU 与内存的使用，你可以选择利用 <code>.one-time</code> 绑定命令来在初始绑定阶段，将 View-model 的数据“一次性”输出到 view，这之后就不会再有任何同步行为了。</p>\n<h4 id=\"delegate-trigger-amp-call\"><a href=\"#delegate-trigger-amp-call\" class=\"headerlink\" title=\"delegate, trigger &amp; call\"></a>delegate, trigger &amp; call</h4><p>绑定命令不只是能连接 View-model 和 view 的属性，还可以触发行为操作。例如，如果你想要在点击按钮的时候执行一个方法，你可以像这么使用 <code>trigger</code> 命令：</p>\n<pre><code>&lt;button click.trigger=&quot;sayHello()&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><p>当按钮被点击之后， view-model 的 <code>sayhello</code> 方法就会被执行。即便如此，像这样往每个单独的元素中绑定事件控制器并不是很有效率，所以通常你会比较倾向于使用事件委托。我们可以用 <code>.delegate</code> 命令来使用事件委托。例子如下：</p>\n<pre><code>&lt;button click.delegate=&quot;sayHello()&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><p>当你需要访问事件对象时，<code>$event</code> 可以作为参数传到 delegate/trigger 的函数中。</p>\n<pre><code>&lt;button click.delegate=&quot;sayHello($event)&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><blockquote>\n<p>Note: 事件委派，是一个使用 DOM 事件冒泡特性的技术。当使用 <code>.delegate</code>，一个单独的事件控制器被绑定到 document，而不是一个绑定到单独的元素。当元素的事件被触发，它沿着 DOM 冒泡到 有绑着控制器的 document。这是一个能更有效利用内存来处理事件的方式，默认机制中推荐使用这个方法。</p>\n</blockquote>\n<p>All of this works against DOM events in some way or another. 有时，你在用 Aurelia Custom Attribute or Element 时，会想要一个函数直接的引用，然后在之后什么时候手动的执行它。用 <code>.call</code> 绑定可以传一个函数引用（since the attribute will call it later）：</p>\n<pre><code>&lt;button touch.call=&quot;sayHello()&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><p>如上，Custom Attribute <code>touch</code> 会获得一个函数，他可以执行你的 <code>sayhello()</code> 代码。依赖于 implementor 的特性，你也可以从 caller 得到传值。就像从 trigger/delegate 传 <code>$event</code> 对象。</p>\n<h4 id=\"string-interpolation\"><a href=\"#string-interpolation\" class=\"headerlink\" title=\"string interpolation\"></a>string interpolation</h4><p>有时你需要将属性直接绑定到 document 的内容中或插入属性值中。这时，你可以使用 string interpolation 语法 <code>${expression}</code>。 String interpolation 是单向绑定，他的输出被转化为字符串，这时例子：</p>\n<pre><code>&lt;span&gt;${fullName}&lt;/span&gt;\n</code></pre><p><code>fullName</code> 属性会直接被插入 span 的内容。你还可以将这个用在 css class 的绑定上：</p>\n<pre><code>&lt;div class=&quot;dot ${color} ${isHappy ? &#39;green&#39; : &#39;red&#39;}&quot;&gt;&lt;/div&gt;\n</code></pre><p>在上面例子中，“dot” 是一个静态的类，<code>isHappy</code> 为 true 时是 “green”，false 时是 “red”。还有 <code>color</code> 的值会被作为一个类被加入。</p>\n<blockquote>\n<p>Note: 你可以在绑定中使用简单的表达式。但是不要试图做其他的更多的，因为在试图中最好不要涉及过多代码。你应该只想建立 view 和 view-model 的链接。</p>\n</blockquote>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><p>绑定语言还识别一个特别属性的用法：<code>ref</code>。使用 <code>ref</code> 你可以为一个元素创建 local name，然后可以在其他绑定表达式中使用。他也可以设置为 view-model 的属性，之后你就能在代码中访问到。</p>\n<pre><code>&lt;input type=&quot;text&quot; ref=&quot;name&quot;&gt; ${name.value}\n</code></pre><p>You can also use ref as a binding command to get the view-model instance that backs an Aurelia Custom Element or Custom Attribute. By using this technique, you can connect different components to each other:<br>通过这个技术，可以将不同的组件联系在一起：</p>\n<pre><code>&lt;producer producer.ref=&quot;producerVM&quot;&gt;&lt;/producer&gt;\n&lt;consumer input.bind=&quot;producerVM.output&quot;&gt;&lt;/consumer&gt;\n</code></pre><p><code>producer.ref = &quot;producerVM&quot;</code> 为 view-model 的 <code>producer</code> custom element 创建个假名，然后在别的地方用。下面是一些 <code>ref</code> 的用法：</p>\n<ul>\n<li><p><code>attribute-name.ref=&quot;someIndetifier&quot;</code> - 给 custom attribute 类的实例创建引用</p>\n</li>\n<li><p><code>element-name.ref=&quot;someIndetifier&quot;</code> - 给 custom element 类实例创建引用</p>\n</li>\n<li><p><code>ref=&quot;someIndetifier&quot;</code> - 给 DOM 中的 HTMLElement<br>创建一个引用</p>\n</li>\n</ul>\n<h4 id=\"select-elements\"><a href=\"#select-elements\" class=\"headerlink\" title=\"select elements\"></a>select elements</h4><p>HTMLSelectElement( HTML select 元素 ) 上的 <code>value.bind</code> 有一个特别的操作来支持单选或多选模式。</p>\n<p>经典的 select 元素使用一个 <code>value.bind</code> 和 <code>repeat</code> 结合来渲染时，可以这么写：</p>\n<pre><code>&lt;select value.bind=&quot;favoriteColor&quot;&gt;\n    &lt;option&gt;Select A Color&lt;/option&gt;\n    &lt;option repeat.for=&quot;color of colors&quot; value.bind=&quot;color&quot;&gt;${color}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>但是，有时你想用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 select 元素的栗子：</p>\n<pre><code>&lt;select value.bind=&quot;employeeOfTheMonth&quot;&gt;\n  &lt;option&gt;Select An Employee&lt;/option&gt;\n  &lt;option repeat.for=&quot;employee of employees&quot; model.bind=&quot;employee&quot;&gt;${employee.fullName}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 <code>model</code> 中，而不是只能接受字符串的 <code>value</code>。</p>\n<h4 id=\"multi-select-elements\"><a href=\"#multi-select-elements\" class=\"headerlink\" title=\"multi select elements\"></a>multi select elements</h4><p>在多选情景下，你可以将 select 元素的值绑定到一个数组。下面的栗子展示了如何绑定一个字符串数组 <code>favoriteColors</code>：</p>\n<pre><code>&lt;select value.bind=&quot;favoriteColors&quot; multiple&gt;\n    &lt;option repeat.for=&quot;color of colors&quot; value.bind=&quot;color&quot;&gt;${color}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>同样适用于对象数组：</p>\n<pre><code>&lt;select value.bind=&quot;favoriteEmployees&quot; multiple&gt;\n  &lt;option repeat.for=&quot;employee of employees&quot; model.bind=&quot;employee&quot;&gt;${employee.fullName}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><h4 id=\"radio\"><a href=\"#radio\" class=\"headerlink\" title=\"radio\"></a>radio</h4><p>在 HTMLInputElement （HTML input 元素）中使用  <code>checked.bind</code> 也有特殊的用法来支持绑定字符串或是对象这样的非 boolean 值。</p>\n<p>一个经典的 radio 按钮组渲染栗子：</p>\n<pre><code>&lt;label repeat.for=&quot;color of colors&quot;&gt;\n  &lt;input type=&quot;radio&quot; name=&quot;clrs&quot; value.bind=&quot;color&quot; checked.bind=&quot;$parent.favoriteColor&quot; /&gt;\n  ${color}\n&lt;/label&gt;\n</code></pre><p>但是，有时你想使用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 radio 按钮组的栗子：</p>\n<pre><code>&lt;label repeat.for=&quot;employee of employees&quot;&gt;\n  &lt;input type=&quot;radio&quot; name=&quot;emps&quot; model.bind=&quot;employee&quot; checked.bind=&quot;$parent.employeeOfTheMonth&quot; /&gt;\n  ${employee.fullName}\n&lt;/label&gt;\n</code></pre><p>与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 <code>model</code> 中，而不是只能接受字符串的 <code>value</code>。</p>\n<p>你也可以将 boolean 属性绑定到一个 radio 组。</p>\n<pre><code>&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;tacos&quot; model.bind=&quot;null&quot; checked.bind=&quot;likesTacos&quot; /&gt;Unanswered&lt;/label&gt;\n&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;tacos&quot; model.bind=&quot;true&quot; checked.bind=&quot;likesTacos&quot; /&gt;Yes&lt;/label&gt;\n&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;tacos&quot; model.bind=&quot;false&quot; checked.bind=&quot;likesTacos&quot; /&gt;No&lt;/label&gt;\n</code></pre><h4 id=\"checkboxes\"><a href=\"#checkboxes\" class=\"headerlink\" title=\"checkboxes\"></a>checkboxes</h4><p>为了更好支持 多选 的情景，Aurelia 可以将 input 元素的 checked 属性绑定到数组。 下面是如果绑定字符串数组 <code>favoriteColors</code>:</p>\n<pre><code>&lt;label repeat.for=&quot;color of colors&quot;&gt;\n  &lt;input type=&quot;checkbox&quot; value.bind=&quot;color&quot; checked.bind=&quot;$parent.favoriteColors&quot; /&gt;\n  ${color}\n&lt;/label&gt;\n</code></pre><p>同样可以绑定对象数组：</p>\n<pre><code>&lt;label repeat.for=&quot;employee of employees&quot;&gt;\n  &lt;input type=&quot;checkbox&quot; model.bind=&quot;employee&quot; checked.bind=&quot;$parent.favoriteEmployees&quot; /&gt;\n  ${employee.fullName}\n&lt;/label&gt;\n</code></pre><p>还可以绑定 boolean 类型的属性：</p>\n<pre><code>&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked.bind=&quot;wantsFudge&quot; /&gt;Fudge&lt;/label&gt;&lt;/li&gt;\n&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked.bind=&quot;wantsSprinkles&quot; /&gt;Sprinkles&lt;/label&gt;&lt;/li&gt;\n&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked.bind=&quot;wantsCherry&quot; /&gt;Cherry&lt;/label&gt;&lt;/li&gt;\n</code></pre><h4 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h4><p>你还可以用 <code>innerhtml</code> 属性绑定元素的 <code>innerHTML</code> 值：</p>\n<pre><code>&lt;div innerhtml.bind=&quot;htmlProperty&quot;&gt;&lt;/div&gt;\n&lt;div innerhtml=&quot;${htmlProperty}&quot;&gt;&lt;/div&gt;\n</code></pre><p>Aurelia 提供一个简单的 html sanitization 转化器：</p>\n<pre><code>&lt;div innerhtml.bind=&quot;htmlProperty | sanitizeHtml&quot;&gt;&lt;/div&gt;\n&lt;div innerhtml=&quot;${htmlProperty | sanitizeHtml}&quot;&gt;&lt;/div&gt;\n</code></pre><p>我们鼓励你使用一个更加完善的 html sanitizer 就像 <a href=\"https://www.npmjs.com/package/sanitize-html\" target=\"_blank\" rel=\"external\">sanitize-html</a>。下面是使用这个包创建一个转换器的用法：</p>\n<pre><code>jspm install npm:sanitize-html\n</code></pre><pre><code>import sanitizeHtml from &#39;sanitize-html&#39;;\n\nexport class MySanitizeHtmlValueConverter {\n  toView(untrustedHtml) {\n    return sanitizeHtml(untrustedHtml);\n  }\n}\n</code></pre><blockquote>\n<p>Note: 使用 <code>innerhtml</code> 属性绑定仅仅是设置了元素的 <code>innerHTML</code> 属性。这些 HTML 标签不会传到 Aurelia 的模版系统。 Binding expressions and require elements will not be evaluated. 已经有一个问题在 track 这个问题了 <a href=\"https://github.com/aurelia/templating/issues/35\" target=\"_blank\" rel=\"external\">aurelia/templating#35</a>。</p>\n</blockquote>\n<h4 id=\"textContent\"><a href=\"#textContent\" class=\"headerlink\" title=\"textContent\"></a>textContent</h4><p>我们可以用 <code>textcontent</code> 属性绑定 元素的 <code>textContent</code>：</p>\n<pre><code>&lt;div textcontent.bind=&quot;stringProperty&quot;&gt;&lt;/div&gt;\n&lt;div textcontent=&quot;${stringProperty}&quot;&gt;&lt;/div&gt;\n</code></pre><p>双向绑定可以用在 <code>contenteditable</code> 元素上：</p>\n<pre><code>&lt;div textcontent.bind=&quot;stringProperty&quot; contenteditable=&quot;true&quot;&gt;&lt;/div&gt;\n</code></pre><h4 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h4><p>我们可以还可以绑定 css 字符串或对象到一个元素的 <code>style</code> 属性：</p>\n<pre><code>export class Foo {\n  constructor() {\n    this.styleString = &#39;color: red; background-color: blue&#39;;\n\n    this.styleObject = {\n      color: &#39;red&#39;,\n      &#39;background-color&#39;: &#39;blue&#39;\n    };\n  }\n}\n</code></pre><pre><code>&lt;div style.bind=&quot;styleString&quot;&gt;&lt;/div&gt;\n&lt;div style.bind=&quot;styleObject&quot;&gt;&lt;/div&gt;\n</code></pre><p>当使用插值语法时，为了兼容 IE 可以使用 <code>style</code> 属性的别名<code>css</code> 来替代：</p>\n<pre><code>&lt;!-- good: --&gt;\n&lt;div css=&quot;width: ${width}px; height: ${height}px;&quot;&gt;&lt;/div&gt;\n\n&lt;!-- incompatible with Internet Explorer: --&gt;\n&lt;div style=&quot;width: ${width}px; height: ${height}px;&quot;&gt;&lt;/div&gt;\n</code></pre><h4 id=\"Adaptive-Binding\"><a href=\"#Adaptive-Binding\" class=\"headerlink\" title=\"Adaptive Binding\"></a>Adaptive Binding</h4><p>Aurelia 有一个可适应绑定（adaptive binding） 系统，当需要决定如何最有效的观察变化时，他会从大量的策略中选择一个。更多关于这个系统如何运作的信息请看<a href=\"http://blog.durandal.io/2015/04/03/aurelia-adaptive-binding/\" target=\"_blank\" rel=\"external\">这篇文章</a>。大多时候你都不需要考虑这些繁枝细节，然而了解他将有助于你了解使用绑定系统时应该避免的一些低效的方法。</p>\n<p><strong>首先需要了解：computed properties ( properties with getter functions ) 使用脏检查来观察变化。</strong> 更有效的策略，例如：Object.observe 和 property rewriting （属性重写）并不适用于 computed property 类型。</p>\n<p>当前的浏览器环境下，脏检查是一个必要的麻烦（necessary evil）。在写这边文章时，只有极少浏览器支持 Object.observe 。Aurelia 的脏检查机制与 <a href=\"https://www.polymer-project.org/\" target=\"_blank\" rel=\"external\">Polymer</a>使用的很相似。他利用 Aurelia 的 micro-task-queue 来处理更新的DOM 是蛮有效的。</p>\n<p>在你的应用中有一些绑定使用脏检查时并不会造成性能问题，大量使用才会有问题。幸运的是，我们有个方法可以避免脏值检查简单的 computed properties。来看看下面的 <code>fullName</code> 属性：</p>\n<pre><code>export class Person {\n  firstName = &#39;John&#39;;\n  lastName = &#39;Doe&#39;;\n\n  @computedFrom(&#39;firstName&#39;, &#39;lastName&#39;)\n  get fullName(){\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n</code></pre><p>我们使用 <code>@computedFrom</code> decorator 来向 Aurelia 绑定系统供一个提示，这时系统就知道只有 <code>firstName</code> 或 <code>lastName</code> 改变时，<code>fullName</code> 才会改变。</p>\n<p>留意脏检查是怎么工作的也是很重要的。当一个属性使用了脏检查，绑定系统就定期检查现在属性值是否与原来的观察值有所不同。检测时间差默认为 120 毫秒。这就意味着你的属性的 getter 函数有可能被十分频繁的调用，也就不能尽可能的高效了。我们还需要避免不必要的返回对象或者数组的新实例，例如下面：</p>\n<pre><code>&lt;template&gt;\n  &lt;label for=&quot;search&quot;&gt;Search Issues:&lt;/label&gt;\n  &lt;input id=&quot;search&quot; type=&quot;text&quot; value.bind=&quot;searchText&quot; /&gt;\n  &lt;ul&gt;\n    &lt;li repeat.for=&quot;issue of filteredIssues&quot;&gt;${issue.abstract}&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n</code></pre><p>原生的视图模型实现：</p>\n<pre><code>export class IssueSearch {\n  searchText = &#39;&#39;;\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  // this returns a new array instance on every call which will in-turn result in a lot of DOM updates.\n  get filteredIssues() {\n    if (this.searchText === &#39;&#39;)\n      return [];\n    return this.allIssues.filter(x =&gt; x.abstract.indexOf(this.searchText) !== -1);\n  }\n}\n</code></pre><p>改进的视图模型实现：</p>\n<pre><code>export class IssueSearch {\n  filteredIssues = [];\n  _searchText = &#39;&#39;;\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n  set searchText(newValue) {\n    this._searchText = newValue;\n    if (newValue === &#39;&#39;) {\n      this.filteredIssues = [];\n    } else {\n      this.filteredIssues = this.allIssues.filter(x =&gt; x.abstract.indexOf(this.searchText) !== -1);\n    }\n  }\n}\n</code></pre>","excerpt":"","more":"<p>##Browser Support</p>\n<p>Aurelia 支持现代浏览器，包括 Chrome，Firefox，IE11，Safari 8。但是我们也提供兼容 IE9 及以上的方法。</p>\n<p>为了需要兼容 IE9 及以上，我们需要为 MutationObservers 添加一个额外的 polyfill。实现方法，用 <code>jspm</code> 安装 <code>github:polymer/mutationobservers</code>。接着在 <code>aurelia-bootstrapper</code> 的外层这样调用它：</p>\n<pre><code>&lt;script src=&quot;jspm_packages/github/polymer/mutationobservers@0.4.2/MutationObserver.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;jspm_packages/system.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;config.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  // Loads WeakMap polyfill needed by MutationObservers\n  System.import(&#39;core-js&#39;).then( function() {\n    // Imports MutationObserver polyfill\n    System.import(&#39;mutationobservers&#39;).then( function() {\n      // Ensures start of Aurelia when all required IE9 dependencies are loaded\n      System.import(&#39;aurelia-bootstrapper&#39;);\n    })\n  });\n&lt;/script&gt;\n</code></pre><blockquote>\n<p>Note: Aurelia 本身不需要 WeakMap，但是上面的 MutationObserver ployfill 会用到。 </p>\n</blockquote>\n<h2 id=\"Startup-amp-Configuration\"><a href=\"#Startup-amp-Configuration\" class=\"headerlink\" title=\"Startup &amp; Configuration\"></a>Startup &amp; Configuration</h2><p>大多数的平台都为代码执行设置有一个 “main” 或者入口点，Aurelia 也不例外。如果你已经看过了 <a href=\"http://aurelia.io/get-started.html\">Get Started</a>，你会发现这个 <code>aurelia-app</code> 属性。把它简单的放到一个 HTML 元素中，Aurelia 的引导器会加载一个 <code>app.js</code> 和 <code>app.html</code>，将他们通过数据绑定在一起，然后将他们注册到 <code>aurelia-app</code> 属性放置的地方。</p>\n<p>有时，我们想要配置框架，或者在向用户展示信息之前优先跑些代码，又或者，在项目进行中时，向需要 startup 配置的方向发展。因此，我们可以给 <code>aurelia-app</code> 一个值，这个值指向一个配置模块。该模块 export 一个单独的函数 <code>configure</code>。Aurelia 引用 <code>configure</code> 函数，向他传入 Aurelia 对象，之后我们可以用来 配置框架的这些那些东西 : ) 。</p>\n<p>实例：</p>\n<pre><code>import {LogManager} from &#39;aurelia-framework&#39;;\nimport {ConsoleAppender} from &#39;aurelia-logging-console&#39;;\n\nLogManager.addAppender(new ConsoleAppender());\nLogManager.setLevel(LogManager.logLevel.debug);\n\nexport function configure(aurelia) {\n  aurelia.use\n    .defaultBindingLanguage()\n    .defaultResources()\n    .router()\n    .eventAggregator()\n    .plugin(&#39;./path/to/plugin&#39;);\n\n  aurelia.start().then(a =&gt; a.setRoot(&#39;app&#39;, document.body));\n}\n</code></pre><p>除了自定义插件的代码，以上的代码都是 <code>aurelia-app</code> 默认会帮你完成的工作。如果你使用配置文件的方法，你需要自己配置这些文件，但是你也可以安装自定义的插件，用一些 services 设置依赖注入的 container，安装视图模版中用到的全局资源等。</p>\n<p>如果你使用配置文件的方法，你可以只写一个简单的文件，他包含了所有我们上面栗子的标准选项，然后这么写：</p>\n<pre><code>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging();\n\n  aurelia.start().then(a =&gt; a.setRoot());\n}\n</code></pre><h3 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h3><p>Aurelia 框架有一个简单的 logging abstraction，默认是无操作的。上面的配置展示了如何安装一个附件( appender )来向控制台 console 输出 log 数据。我们还可以设置 log level，<code>logLevel</code> 的值可以为：<code>none</code>, <code>error</code>, <code>warn</code>, <code>info</code> and <code>debug</code>。</p>\n<p>你可以简单的创建自己的 <code>appender</code>。配合 appender 接口来实现一个 类。最好的栗子是看源码：<a href=\"https://github.com/aurelia/logging-console/blob/master/src/index.js\">console log appender’s source</a></p>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p><strong>插件</strong> 是只有一个 exported <code>configure</code> 函数的  module 。当启动时，Aurelia 会 load 所有插件模块 ，将 Aurelia 的实例传入插件们的 <code>configure</code> 函数并执行。</p>\n<p>插件可从 配置函数 返回一个 <code>Promise</code> 来完成异步的配置任务。在写插件时，要确保明确的提供所有的 metadata，包括给 Custom Elements 使用的 View Strategy。</p>\n<p>为了 配置你的插件的来源，在 app 中你可以设置一个函数或者对象作为配置函数的第二个参数，在插件中可以用到，你的插件的使用者可以这么用：</p>\n<pre><code>aurelia.use.plugin(&#39;./path/to/plugin&#39;, config =&gt; { /* configuration work */ });\n</code></pre><blockquote>\n<p>Note:  插件不能依赖 Aurelia 的命名约定。因为 Aurelia 的命名约定是可配置的，所以第三方插件应该明确，确保在不同的上下文环境下函数的执行。</p>\n</blockquote>\n<h4 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h4><p>Aurelia 默认使用 ES6 原生的 Promises 或者 polyfill。你也可以使用这个不错的 Promise 库 <a href=\"https://github.com/petkaantonov/bluebird\">Bluebird</a> 来替换。使用它只需要将它放到页面上其他引用的脚本前面，他回使用自己标准的 Promise 实现，这个方法比原生的 Promise 要快，并且拥有更好的 debugging 支持。另外，在使用 Babel 编译器的时候，可以使用 <a href=\"http://babeljs.io/docs/usage/transformers/other/bluebird-coroutines/\">coroutines</a> 来改进异步代码的书写。</p>\n<h3 id=\"The-Aurelia-Object\"><a href=\"#The-Aurelia-Object\" class=\"headerlink\" title=\"The Aurelia Object\"></a>The Aurelia Object</h3><p>因为自定义配置模块和插件都需要用到 Aurelia Object，下面是一个简单的 API 的解释：</p>\n<pre><code>export class Aurelia {\n  loader:Loader; //the module loader\n  container:Container; //the app-level dependency injection container\n  use:Plugins; //the plugins api (see above)\n\n  withInstance(type, instance):Aurelia; //DI helper method (pass through to container)\n  withSingleton(type, implementation):Aurelia; //DI helper method (pass through to container)\n  globalizeResources(...resourcePaths):Aurelia; //module ids of resources relative to the configuration/plugin module\n  renameGlobalResource(resourcePath, newName); //renames a globally available resource to avoid naming conflicts\n\n  start():Promise; //starts the framework, causing plugins to be installed and resources to be loaded\n  setRoot(root, applicationHost):Promise; //set your &quot;root&quot; or &quot;app&quot; view-model and display it\n}\n</code></pre><h2 id=\"Views-and-View-Models\"><a href=\"#Views-and-View-Models\" class=\"headerlink\" title=\"Views and View Models\"></a>Views and View Models</h2><p>在 Aurelia 中，用户交互元素由 View 和 View-model 对来实现。View 由 HTML 完成，会被渲染到 DOM 中，View-model 由 JavaScript 完成， 向 View 提供数据和交互行为。模版引擎和 DI（依赖注入）负责创建配对之间的联系，并且为进程执行一个可预言的生命周期？（不理解）</p>\n<p>在连接成功之后， Aurelia 强大的数据绑定就能将 View 和 View-model 的数据和视图联合起来，实现数据双向绑定。</p>\n<ul>\n<li>这样的分隔方法有利于 开发和设计 的合作: ) </li>\n<li>可维护性、灵活的架构、甚至代码控制……</li>\n</ul>\n<h3 id=\"Dependency-Injection-DI\"><a href=\"#Dependency-Injection-DI\" class=\"headerlink\" title=\"Dependency Injection (DI)\"></a>Dependency Injection (DI)</h3><p>View-model 和其他的交互元素：Custom Elements、Customs Attributes，都被作为 类来创建，然后框架中使用依赖注入容器来实例化。 这种代码容易模块化和测试。</p>\n<p>你可以将需求拆分为小的对象，合作来完成一个目标，而不是写一个巨大的类。DI 可以配合完成拼接。</p>\n<p>使用 DI时，在你的 类中的 constructor 中传入，下面是栗子：</p>\n<pre><code>import {inject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n</code></pre><p>在 ES7 或者 TypeScript 中可以使用 Decrators，这时你只需要加一个 <code>inject</code> decorator，每注入一个类型传一个参数。如果你使用的语法没有支持 Decrators，或者是不想用，也可以添加一个叫 <code>inject</code> 的静态属性或者方法到你的类中。这样必须返回一个可注入的类型数组（array of injectable types）。下面是一个在 CoffeeScript 结合 CommomJS 模块的栗子：</p>\n<pre><code>HttpClient = require(&#39;aurelia-http-client&#39;).HttpClient;\n\nclass Flickr\n  constructor: (@http) -&gt;\n  @inject:[HttpClient]\n</code></pre><p>如果你正在使用　TypeScript 开发，可以用 <code>--emitDecoratorMetadata</code> 编译标识配合 Aurelia 的 <code>autoinject()</code> decorator 来让框架读取标准 TS 类型信息。这样做之后，就不需要去复制类型了。代码实例：</p>\n<pre><code>import {autoinject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@autoinject()\nexport class CustomerDetail{\n    constructor(http:HttpClient){\n        this.http = http;\n    }\n}\n</code></pre><blockquote>\n<p>Note: TypeScript 实现这个编译选项的方式中有个有趣的细节，他适用于任何decorator。所以，如果你在自己的 TS 类中拿到一些其他的 Decorator ，就不需要引入 <code>autoinject</code> decorator，那些 Type information 仍然能被 Aurelia 的依赖注入框架发现。</p>\n</blockquote>\n<p>当明确的声明依赖时，他们不一定非得是 constructor types，还可以是 resolvers 的实例。例如：</p>\n<pre><code>import {Lazy, inject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@inject(Lazy.of(HttpClient))\nexport class CustomerDetail{\n    constructor(getHTTP){\n        this.getHTTP = getHTTP;\n    }\n}\n</code></pre><p>这样的 <code>Lazy</code> resolver 实际上没有提供一个 <code>HttpClient</code> 的实例，它提供一个可以随时返回 <code>HttpClient</code> 实例的函数。你可以通过写个类继承 Resolver 来创建 resolvers，或者使用我们提供的一些方便的 resolvers：</p>\n<ul>\n<li><code>lazy</code> -  Injects a function for lazily evaluating the dependency.<ul>\n<li>ex . <code>Lazy.of(HttpClient)</code></li>\n</ul>\n</li>\n<li><code>All</code> - Injects an array of all services registered with the provided key<ul>\n<li>ex. <code>All.of(Plugin)</code></li>\n</ul>\n</li>\n<li><code>Optional</code> -  Injects an instance of a class only if it already exists in the container; null otherwise.<ul>\n<li>ex. <code>Optional.of(LoggedInUser)</code></li>\n</ul>\n</li>\n</ul>\n<p>另外关于 resolvers，你也可以用 <code>Registration</code> decorators 来指定一个默认的注册(registration)，或者一个实例的生命周期。默认情况下，DI 容器假设每个实例都是单例？（everything is a singleton instance）one instance for the app。但是你可以用一个registration decorator 来修改，示例：</p>\n<pre><code>import {transient, inject} from &#39;aurelia-framework&#39;;\nimport {HttpClient} from &#39;aurelia-http-client&#39;;\n\n@transient()\n@inject(HttpClient)\nexport class CustomerDetail{\n    constructor(http){\n        this.http = http;\n    }\n}\n</code></pre><p>如上所写，每次请求 DI 容器返回 CustomerDetail 的时候会返回一个新的实例，而不是一个 singleton。<code>singleton</code> 和 <code>transient</code> registrations 都提供给外部使用，但是你也可以通过构建一个实现 <code>register(container, key, fn)</code> 函数的类，来创建 registration 。之后，就可以简单了用 <code>registration</code> decorator 来把它的实例添加到你的类中。</p>\n<p>如果你不能或不想用 decorators。don’t worry! 我们准备了后备方案。只要提供一个静态的 <code>decorators</code> 属性或方法，然后使用我们 链式的 <code>Decorators</code> helper。 这位 helper 有对应我们所有 decorators 的方法。So，无论你使用何种语言都十分简单使用。下面是 CoffeeScript 的实例：</p>\n<pre><code>HttpClient = require(&#39;aurelia-http-client&#39;).HttpClient;\nDecorators = require(&#39;aurelia-framework&#39;).Decorators;\n\nclass CustomerDetail\n  constructor: (@http) -&gt;\n  @decorators:Decorators.transient().inject(HttpClient);\n</code></pre><h3 id=\"Parent-View-Models\"><a href=\"#Parent-View-Models\" class=\"headerlink\" title=\"Parent View Models\"></a>Parent View Models</h3><p>By default a View-model’s access is limited to injected objects as well as children of the class. Sometimes it may be desirable to refer to objects and methods on a parent View-model, which can be achieved by storing the parent during the bind method of the view lifecycle:</p>\n<pre><code>class ChildViewModel {\n  bind(bindingContext) {\n    this.$parent = bindingContext;\n  }\n}\n</code></pre><h2 id=\"Tamplating\"><a href=\"#Tamplating\" class=\"headerlink\" title=\"Tamplating\"></a>Tamplating</h2><p>Aurelia 的模版引擎负责加载视图和他们所需要的资源，以及完美编译 HTML 和渲染 UI 到屏幕上。创建一个视图，你仅仅需要一个HTML文件，在里面加上<code>HTMLTemplate</code> 即可，下面是个简单的视图：</p>\n<pre><code>&lt;template&gt;\n    &lt;div&gt;Hello World!&lt;/div&gt;\n&lt;/template&gt;\n</code></pre><p>所有在 <code>template</code> 标签中的内容都由 Aurelia 管理。但是，因为 Aurelia 使用 HTMLImport 技术来加载视图，所以你也可以写入 <code>links</code> ，他们也会被正确的加载，还可以用相对路径的写法哦，具体是指：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./hello.css&quot;&gt;\n\n&lt;template&gt;\n    &lt;div class=&quot;hello&quot;&gt;Hello World!&lt;/div&gt;\n&lt;/template&gt;\n</code></pre><p>这样你就可以为每个视图选择需要加载的样式，还可以使用 Web components on the fly。</p>\n<p>当你需要引入一个 Aurelia 特制 (Aurelia-specific) 的资源时，比如一个 Aurelia Custom Element，Custom Attribute or Value Converter，你会在视图中用到一个 <code>require</code> 元素。栗子：</p>\n<pre><code>&lt;template&gt;\n  &lt;require from=&#39;./nav-bar&#39;&gt;&lt;/require&gt;\n\n  &lt;nav-bar router.bind=&quot;router&quot;&gt;&lt;/nav-bar&gt;\n\n  &lt;div class=&quot;page-host&quot;&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre><p>在这个例子中 <code>nav-bar</code> 是一个我们需要使用的 Aurelia Custom Element。在 我们使用 <code>require</code> element 时，框架的资源管道会处理输入的元件。这么做有以下好处：</p>\n<ul>\n<li>去重 - 资源只会在 app 中被 download 一次，即使其他的视图需要相同的元素，也只会被下载一次。</li>\n<li>一次编译 - 模版中这样引入自定义元素在整个应用周期只会被编译一次</li>\n<li>Local Scope( 本地作用域？ ) - 引入的资源只能在引入他的视图中可见，通过这样排除全局作用域的方法，可以有效减少命名冲突的可能性、加强可维护性和易懂性</li>\n<li>重命名 - 资源可以被重命名，这样当你在同一视图，引入两个名字相同或相似的第三方资源时，就可以使用这个特性<ul>\n<li>ex. <code>&lt;require from=&quot;./nav-bar&quot; as=&quot;foo-bar&quot;&gt;&lt;/require&gt;</code> - 现在你可以使用 <code>foo-bar</code> 元素来替代 <code>nav-bar</code> 元素。（这是基于 ES6 的import 语法，重命名被认为是代替 Alias 的方法，因为他完全的重命名了type ）</li>\n</ul>\n</li>\n<li>包 - require 可以指向一个包括多资源的模块，包中的所有的资源会被导入同个视图</li>\n<li>可扩展性 - 我们可以定义新的资源类型，You can define new types of resources which, when required in this way, can execute custom loading (async one-time) and registration (once per-view). This is a declarative, extensible resource loading pipeline.</li>\n<li>ES6 - 代码是由 ES6 loader 加载而不是 HTMLImport 机制， enabling all the features and extensibility of your loader。这么设计完全统一了所有app资源的加载方法，无论是 JS 还是 HTML</li>\n</ul>\n<p>在你的视图中，你会用到上面提到的各种不同的资源以及数据绑定</p>\n<blockquote>\n<p>Note: 你可能会觉得每个视图中都要引入东西很无聊╮(╯▽╰)╭。Remember ，在引导（ bootstrapping）阶段，你可以配置 Aurelia 可以让所有视图使用的全局资源。Just use <code>aurelia.globalizeResources(...resourcePaths)</code>。</p>\n</blockquote>\n<p>Aurelia  polyfills browsers 不包括支持 templates。但是，模版的一些特性可以被 polyfilled ，需要 workarounds。特别当 <code>template</code> 元素在 <code>select</code> 和 <code>table</code> 元素中时，下面的代码在不原生支持 templates 的浏览器中不能实现：</p>\n<pre><code>  &lt;table&gt;\n    &lt;template repeat.for=&quot;customer of customers&quot;&gt;\n      &lt;tr&gt;\n        &lt;td&gt;${customer.fullName}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/template&gt;\n  &lt;/table&gt;\n</code></pre><p>为了重复输出 <code>tr</code> 元素，可以简单的修改为：</p>\n<pre><code>  &lt;table&gt;\n    &lt;tr repeat.for=&quot;customer of customers&quot;&gt;\n      &lt;td&gt;${customer.fullName}&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;\n</code></pre><h3 id=\"Databinding\"><a href=\"#Databinding\" class=\"headerlink\" title=\"Databinding\"></a>Databinding</h3><p>数据绑定让你可以将一个 JS 对象中的状态和行为连接到 HTML 视图中。当连接建立之后，任何的连接的属性改动都会在一个或两个方向上同步。</p>\n<p>JS 对象中的改变能反应在视图上，视图上的修改能映射到 JS 对象中。</p>\n<p>要建立这样连接，可以在 HTML 中利用 <code>binding commands</code> 。通过使用一个绑定操作符 <code>.</code> 来声明绑定命令。当 HTML 的属性中包含一个 <code>.</code>，编译器会将属性的名字和值传到绑定语言（binding language）来编译，当视图被创建时，通过建立的连接，我们就能使用一个或更多的绑定表达式了。</p>\n<p>可以自己扩展绑定命令，但是 Aurelia 提供了一个覆盖大多数常用使用案例的命令集合。</p>\n<h4 id=\"bind-one-way-two-way-amp-one-time\"><a href=\"#bind-one-way-two-way-amp-one-time\" class=\"headerlink\" title=\"bind, one-way, two-way &amp; one-time\"></a>bind, one-way, two-way &amp; one-time</h4><p>最常用的绑定命令是 <code>.bind</code>。这样会让所有的属性使用单向绑定来绑定，而元素的值使用双向绑定。</p>\n<p>这意味着神马呢？</p>\n<p><strong>单向绑定</strong>是说改变JS 的 view-models 会反映到 view 上，而反方向不会反应。<br><strong>双向绑定</strong>是指每个方向改变都会影响到对方。</p>\n<p><code>.bind</code> 会假设你在绑定表单元素的时候会希望 view 上的 form 改变反应到 view-model 上，而其他的情况下就使用单向绑定，这是因为，在许多的时候，双向绑定到一个非表单元素上是无意义的。下面是 <code>.bind</code> 的小栗子：</p>\n<pre><code>&lt;input type=&quot;text&quot; value.bind=&quot;firstName&quot;&gt;\n&lt;a href.bind=&quot;url&quot;&gt;Aurelia&lt;/a&gt;\n</code></pre><p>在上面的例子中，<code>input</code> 元素会将他的值绑定到 view-model 的 <code>firstName</code> 属性上。改变 <code>firstName</code> 的属性会更新 <code>input.value</code> ，而改变 <code>input.value</code> 会更新 <code>firstName</code> 的值。另一边，<code>a</code> 标签的 <code>href</code> 属性绑在了 view-model 的 <code>url</code> 属性上。只有改变 <code>url</code> 的值会影响 <code>href</code>，反方向则不通。</p>\n<p>我们也可以明确的使用 <code>.one-way</code> 或者 <code>.two-way</code> 来代替 <code>.bind</code>。举一个常见的栗子：当需要引入一个 Web Components 作为输入类型的控件时，你可以这样使用：</p>\n<pre><code>&lt;markdown-editor value.two-way=&quot;markdown&quot;&gt;&lt;/markdown-editor&gt;\n</code></pre><p>为了优化性能和最小化 CPU 与内存的使用，你可以选择利用 <code>.one-time</code> 绑定命令来在初始绑定阶段，将 View-model 的数据“一次性”输出到 view，这之后就不会再有任何同步行为了。</p>\n<h4 id=\"delegate-trigger-amp-call\"><a href=\"#delegate-trigger-amp-call\" class=\"headerlink\" title=\"delegate, trigger &amp; call\"></a>delegate, trigger &amp; call</h4><p>绑定命令不只是能连接 View-model 和 view 的属性，还可以触发行为操作。例如，如果你想要在点击按钮的时候执行一个方法，你可以像这么使用 <code>trigger</code> 命令：</p>\n<pre><code>&lt;button click.trigger=&quot;sayHello()&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><p>当按钮被点击之后， view-model 的 <code>sayhello</code> 方法就会被执行。即便如此，像这样往每个单独的元素中绑定事件控制器并不是很有效率，所以通常你会比较倾向于使用事件委托。我们可以用 <code>.delegate</code> 命令来使用事件委托。例子如下：</p>\n<pre><code>&lt;button click.delegate=&quot;sayHello()&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><p>当你需要访问事件对象时，<code>$event</code> 可以作为参数传到 delegate/trigger 的函数中。</p>\n<pre><code>&lt;button click.delegate=&quot;sayHello($event)&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><blockquote>\n<p>Note: 事件委派，是一个使用 DOM 事件冒泡特性的技术。当使用 <code>.delegate</code>，一个单独的事件控制器被绑定到 document，而不是一个绑定到单独的元素。当元素的事件被触发，它沿着 DOM 冒泡到 有绑着控制器的 document。这是一个能更有效利用内存来处理事件的方式，默认机制中推荐使用这个方法。</p>\n</blockquote>\n<p>All of this works against DOM events in some way or another. 有时，你在用 Aurelia Custom Attribute or Element 时，会想要一个函数直接的引用，然后在之后什么时候手动的执行它。用 <code>.call</code> 绑定可以传一个函数引用（since the attribute will call it later）：</p>\n<pre><code>&lt;button touch.call=&quot;sayHello()&quot;&gt;Say Hello&lt;/button&gt;\n</code></pre><p>如上，Custom Attribute <code>touch</code> 会获得一个函数，他可以执行你的 <code>sayhello()</code> 代码。依赖于 implementor 的特性，你也可以从 caller 得到传值。就像从 trigger/delegate 传 <code>$event</code> 对象。</p>\n<h4 id=\"string-interpolation\"><a href=\"#string-interpolation\" class=\"headerlink\" title=\"string interpolation\"></a>string interpolation</h4><p>有时你需要将属性直接绑定到 document 的内容中或插入属性值中。这时，你可以使用 string interpolation 语法 <code>${expression}</code>。 String interpolation 是单向绑定，他的输出被转化为字符串，这时例子：</p>\n<pre><code>&lt;span&gt;${fullName}&lt;/span&gt;\n</code></pre><p><code>fullName</code> 属性会直接被插入 span 的内容。你还可以将这个用在 css class 的绑定上：</p>\n<pre><code>&lt;div class=&quot;dot ${color} ${isHappy ? &#39;green&#39; : &#39;red&#39;}&quot;&gt;&lt;/div&gt;\n</code></pre><p>在上面例子中，“dot” 是一个静态的类，<code>isHappy</code> 为 true 时是 “green”，false 时是 “red”。还有 <code>color</code> 的值会被作为一个类被加入。</p>\n<blockquote>\n<p>Note: 你可以在绑定中使用简单的表达式。但是不要试图做其他的更多的，因为在试图中最好不要涉及过多代码。你应该只想建立 view 和 view-model 的链接。</p>\n</blockquote>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><p>绑定语言还识别一个特别属性的用法：<code>ref</code>。使用 <code>ref</code> 你可以为一个元素创建 local name，然后可以在其他绑定表达式中使用。他也可以设置为 view-model 的属性，之后你就能在代码中访问到。</p>\n<pre><code>&lt;input type=&quot;text&quot; ref=&quot;name&quot;&gt; ${name.value}\n</code></pre><p>You can also use ref as a binding command to get the view-model instance that backs an Aurelia Custom Element or Custom Attribute. By using this technique, you can connect different components to each other:<br>通过这个技术，可以将不同的组件联系在一起：</p>\n<pre><code>&lt;producer producer.ref=&quot;producerVM&quot;&gt;&lt;/producer&gt;\n&lt;consumer input.bind=&quot;producerVM.output&quot;&gt;&lt;/consumer&gt;\n</code></pre><p><code>producer.ref = &quot;producerVM&quot;</code> 为 view-model 的 <code>producer</code> custom element 创建个假名，然后在别的地方用。下面是一些 <code>ref</code> 的用法：</p>\n<ul>\n<li><p><code>attribute-name.ref=&quot;someIndetifier&quot;</code> - 给 custom attribute 类的实例创建引用</p>\n</li>\n<li><p><code>element-name.ref=&quot;someIndetifier&quot;</code> - 给 custom element 类实例创建引用</p>\n</li>\n<li><p><code>ref=&quot;someIndetifier&quot;</code> - 给 DOM 中的 HTMLElement<br>创建一个引用</p>\n</li>\n</ul>\n<h4 id=\"select-elements\"><a href=\"#select-elements\" class=\"headerlink\" title=\"select elements\"></a>select elements</h4><p>HTMLSelectElement( HTML select 元素 ) 上的 <code>value.bind</code> 有一个特别的操作来支持单选或多选模式。</p>\n<p>经典的 select 元素使用一个 <code>value.bind</code> 和 <code>repeat</code> 结合来渲染时，可以这么写：</p>\n<pre><code>&lt;select value.bind=&quot;favoriteColor&quot;&gt;\n    &lt;option&gt;Select A Color&lt;/option&gt;\n    &lt;option repeat.for=&quot;color of colors&quot; value.bind=&quot;color&quot;&gt;${color}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>但是，有时你想用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 select 元素的栗子：</p>\n<pre><code>&lt;select value.bind=&quot;employeeOfTheMonth&quot;&gt;\n  &lt;option&gt;Select An Employee&lt;/option&gt;\n  &lt;option repeat.for=&quot;employee of employees&quot; model.bind=&quot;employee&quot;&gt;${employee.fullName}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 <code>model</code> 中，而不是只能接受字符串的 <code>value</code>。</p>\n<h4 id=\"multi-select-elements\"><a href=\"#multi-select-elements\" class=\"headerlink\" title=\"multi select elements\"></a>multi select elements</h4><p>在多选情景下，你可以将 select 元素的值绑定到一个数组。下面的栗子展示了如何绑定一个字符串数组 <code>favoriteColors</code>：</p>\n<pre><code>&lt;select value.bind=&quot;favoriteColors&quot; multiple&gt;\n    &lt;option repeat.for=&quot;color of colors&quot; value.bind=&quot;color&quot;&gt;${color}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>同样适用于对象数组：</p>\n<pre><code>&lt;select value.bind=&quot;favoriteEmployees&quot; multiple&gt;\n  &lt;option repeat.for=&quot;employee of employees&quot; model.bind=&quot;employee&quot;&gt;${employee.fullName}&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><h4 id=\"radio\"><a href=\"#radio\" class=\"headerlink\" title=\"radio\"></a>radio</h4><p>在 HTMLInputElement （HTML input 元素）中使用  <code>checked.bind</code> 也有特殊的用法来支持绑定字符串或是对象这样的非 boolean 值。</p>\n<p>一个经典的 radio 按钮组渲染栗子：</p>\n<pre><code>&lt;label repeat.for=&quot;color of colors&quot;&gt;\n  &lt;input type=&quot;radio&quot; name=&quot;clrs&quot; value.bind=&quot;color&quot; checked.bind=&quot;$parent.favoriteColor&quot; /&gt;\n  ${color}\n&lt;/label&gt;\n</code></pre><p>但是，有时你想使用对象实例而不是字符串。下面是用一个假设的雇员数组来构建 radio 按钮组的栗子：</p>\n<pre><code>&lt;label repeat.for=&quot;employee of employees&quot;&gt;\n  &lt;input type=&quot;radio&quot; name=&quot;emps&quot; model.bind=&quot;employee&quot; checked.bind=&quot;$parent.employeeOfTheMonth&quot; /&gt;\n  ${employee.fullName}\n&lt;/label&gt;\n</code></pre><p>与前个栗子主要的区别在于，我们将 option 的值储存在一个特别的属性 <code>model</code> 中，而不是只能接受字符串的 <code>value</code>。</p>\n<p>你也可以将 boolean 属性绑定到一个 radio 组。</p>\n<pre><code>&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;tacos&quot; model.bind=&quot;null&quot; checked.bind=&quot;likesTacos&quot; /&gt;Unanswered&lt;/label&gt;\n&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;tacos&quot; model.bind=&quot;true&quot; checked.bind=&quot;likesTacos&quot; /&gt;Yes&lt;/label&gt;\n&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;tacos&quot; model.bind=&quot;false&quot; checked.bind=&quot;likesTacos&quot; /&gt;No&lt;/label&gt;\n</code></pre><h4 id=\"checkboxes\"><a href=\"#checkboxes\" class=\"headerlink\" title=\"checkboxes\"></a>checkboxes</h4><p>为了更好支持 多选 的情景，Aurelia 可以将 input 元素的 checked 属性绑定到数组。 下面是如果绑定字符串数组 <code>favoriteColors</code>:</p>\n<pre><code>&lt;label repeat.for=&quot;color of colors&quot;&gt;\n  &lt;input type=&quot;checkbox&quot; value.bind=&quot;color&quot; checked.bind=&quot;$parent.favoriteColors&quot; /&gt;\n  ${color}\n&lt;/label&gt;\n</code></pre><p>同样可以绑定对象数组：</p>\n<pre><code>&lt;label repeat.for=&quot;employee of employees&quot;&gt;\n  &lt;input type=&quot;checkbox&quot; model.bind=&quot;employee&quot; checked.bind=&quot;$parent.favoriteEmployees&quot; /&gt;\n  ${employee.fullName}\n&lt;/label&gt;\n</code></pre><p>还可以绑定 boolean 类型的属性：</p>\n<pre><code>&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked.bind=&quot;wantsFudge&quot; /&gt;Fudge&lt;/label&gt;&lt;/li&gt;\n&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked.bind=&quot;wantsSprinkles&quot; /&gt;Sprinkles&lt;/label&gt;&lt;/li&gt;\n&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked.bind=&quot;wantsCherry&quot; /&gt;Cherry&lt;/label&gt;&lt;/li&gt;\n</code></pre><h4 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h4><p>你还可以用 <code>innerhtml</code> 属性绑定元素的 <code>innerHTML</code> 值：</p>\n<pre><code>&lt;div innerhtml.bind=&quot;htmlProperty&quot;&gt;&lt;/div&gt;\n&lt;div innerhtml=&quot;${htmlProperty}&quot;&gt;&lt;/div&gt;\n</code></pre><p>Aurelia 提供一个简单的 html sanitization 转化器：</p>\n<pre><code>&lt;div innerhtml.bind=&quot;htmlProperty | sanitizeHtml&quot;&gt;&lt;/div&gt;\n&lt;div innerhtml=&quot;${htmlProperty | sanitizeHtml}&quot;&gt;&lt;/div&gt;\n</code></pre><p>我们鼓励你使用一个更加完善的 html sanitizer 就像 <a href=\"https://www.npmjs.com/package/sanitize-html\">sanitize-html</a>。下面是使用这个包创建一个转换器的用法：</p>\n<pre><code>jspm install npm:sanitize-html\n</code></pre><pre><code>import sanitizeHtml from &#39;sanitize-html&#39;;\n\nexport class MySanitizeHtmlValueConverter {\n  toView(untrustedHtml) {\n    return sanitizeHtml(untrustedHtml);\n  }\n}\n</code></pre><blockquote>\n<p>Note: 使用 <code>innerhtml</code> 属性绑定仅仅是设置了元素的 <code>innerHTML</code> 属性。这些 HTML 标签不会传到 Aurelia 的模版系统。 Binding expressions and require elements will not be evaluated. 已经有一个问题在 track 这个问题了 <a href=\"https://github.com/aurelia/templating/issues/35\">aurelia/templating#35</a>。</p>\n</blockquote>\n<h4 id=\"textContent\"><a href=\"#textContent\" class=\"headerlink\" title=\"textContent\"></a>textContent</h4><p>我们可以用 <code>textcontent</code> 属性绑定 元素的 <code>textContent</code>：</p>\n<pre><code>&lt;div textcontent.bind=&quot;stringProperty&quot;&gt;&lt;/div&gt;\n&lt;div textcontent=&quot;${stringProperty}&quot;&gt;&lt;/div&gt;\n</code></pre><p>双向绑定可以用在 <code>contenteditable</code> 元素上：</p>\n<pre><code>&lt;div textcontent.bind=&quot;stringProperty&quot; contenteditable=&quot;true&quot;&gt;&lt;/div&gt;\n</code></pre><h4 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h4><p>我们可以还可以绑定 css 字符串或对象到一个元素的 <code>style</code> 属性：</p>\n<pre><code>export class Foo {\n  constructor() {\n    this.styleString = &#39;color: red; background-color: blue&#39;;\n\n    this.styleObject = {\n      color: &#39;red&#39;,\n      &#39;background-color&#39;: &#39;blue&#39;\n    };\n  }\n}\n</code></pre><pre><code>&lt;div style.bind=&quot;styleString&quot;&gt;&lt;/div&gt;\n&lt;div style.bind=&quot;styleObject&quot;&gt;&lt;/div&gt;\n</code></pre><p>当使用插值语法时，为了兼容 IE 可以使用 <code>style</code> 属性的别名<code>css</code> 来替代：</p>\n<pre><code>&lt;!-- good: --&gt;\n&lt;div css=&quot;width: ${width}px; height: ${height}px;&quot;&gt;&lt;/div&gt;\n\n&lt;!-- incompatible with Internet Explorer: --&gt;\n&lt;div style=&quot;width: ${width}px; height: ${height}px;&quot;&gt;&lt;/div&gt;\n</code></pre><h4 id=\"Adaptive-Binding\"><a href=\"#Adaptive-Binding\" class=\"headerlink\" title=\"Adaptive Binding\"></a>Adaptive Binding</h4><p>Aurelia 有一个可适应绑定（adaptive binding） 系统，当需要决定如何最有效的观察变化时，他会从大量的策略中选择一个。更多关于这个系统如何运作的信息请看<a href=\"http://blog.durandal.io/2015/04/03/aurelia-adaptive-binding/\">这篇文章</a>。大多时候你都不需要考虑这些繁枝细节，然而了解他将有助于你了解使用绑定系统时应该避免的一些低效的方法。</p>\n<p><strong>首先需要了解：computed properties ( properties with getter functions ) 使用脏检查来观察变化。</strong> 更有效的策略，例如：Object.observe 和 property rewriting （属性重写）并不适用于 computed property 类型。</p>\n<p>当前的浏览器环境下，脏检查是一个必要的麻烦（necessary evil）。在写这边文章时，只有极少浏览器支持 Object.observe 。Aurelia 的脏检查机制与 <a href=\"https://www.polymer-project.org/\">Polymer</a>使用的很相似。他利用 Aurelia 的 micro-task-queue 来处理更新的DOM 是蛮有效的。</p>\n<p>在你的应用中有一些绑定使用脏检查时并不会造成性能问题，大量使用才会有问题。幸运的是，我们有个方法可以避免脏值检查简单的 computed properties。来看看下面的 <code>fullName</code> 属性：</p>\n<pre><code>export class Person {\n  firstName = &#39;John&#39;;\n  lastName = &#39;Doe&#39;;\n\n  @computedFrom(&#39;firstName&#39;, &#39;lastName&#39;)\n  get fullName(){\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n</code></pre><p>我们使用 <code>@computedFrom</code> decorator 来向 Aurelia 绑定系统供一个提示，这时系统就知道只有 <code>firstName</code> 或 <code>lastName</code> 改变时，<code>fullName</code> 才会改变。</p>\n<p>留意脏检查是怎么工作的也是很重要的。当一个属性使用了脏检查，绑定系统就定期检查现在属性值是否与原来的观察值有所不同。检测时间差默认为 120 毫秒。这就意味着你的属性的 getter 函数有可能被十分频繁的调用，也就不能尽可能的高效了。我们还需要避免不必要的返回对象或者数组的新实例，例如下面：</p>\n<pre><code>&lt;template&gt;\n  &lt;label for=&quot;search&quot;&gt;Search Issues:&lt;/label&gt;\n  &lt;input id=&quot;search&quot; type=&quot;text&quot; value.bind=&quot;searchText&quot; /&gt;\n  &lt;ul&gt;\n    &lt;li repeat.for=&quot;issue of filteredIssues&quot;&gt;${issue.abstract}&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n</code></pre><p>原生的视图模型实现：</p>\n<pre><code>export class IssueSearch {\n  searchText = &#39;&#39;;\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  // this returns a new array instance on every call which will in-turn result in a lot of DOM updates.\n  get filteredIssues() {\n    if (this.searchText === &#39;&#39;)\n      return [];\n    return this.allIssues.filter(x =&gt; x.abstract.indexOf(this.searchText) !== -1);\n  }\n}\n</code></pre><p>改进的视图模型实现：</p>\n<pre><code>export class IssueSearch {\n  filteredIssues = [];\n  _searchText = &#39;&#39;;\n\n  constructor(allIssues) {\n    this.allIssues = allIssues;\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n  set searchText(newValue) {\n    this._searchText = newValue;\n    if (newValue === &#39;&#39;) {\n      this.filteredIssues = [];\n    } else {\n      this.filteredIssues = this.allIssues.filter(x =&gt; x.abstract.indexOf(this.searchText) !== -1);\n    }\n  }\n}\n</code></pre>"},{"title":"Aurelia-文档小翻译（二）","date":"2015-06-13T06:07:27.000Z","description":"Aurelia 文档翻译下部分，from Routing part","_content":"\n\n## Routing\n\n你可能会需要创建许多不同的应用类型。从 navigation apps、dashboards，到 MDI interfaces，Aurelia 都能完全掌控。这些架构中大多数的关键组件都是一个客户端路由，用来将 url 解析到应用状态中。\n\n如果你读过了开始向导，你会知道完成路由需要两步。首先，在你的 view-model 中有一个 `Router`，我们通过添加一些路由信息和控制向导来配置他。之后，view 中 的一个 `router-view` 负责展示路由中定义的当前状态指向的模块。\n\n例子：\n\n```\nexport class App {\n  configureRouter(config, router){\n    this.router = router;\n\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'home'],       name: 'home',       moduleId: './home/index' },\n      { route: 'users',            name: 'users',      moduleId: './users/index',                      nav: true },\n      { route: 'users/:id/detail', name: 'userDetail', moduleId: './users/detail' },\n      { route: 'files*path',       name: 'files',      moduleId: './files/index',     href:'#files',   nav: true }\n    ]);\n  }\n}\n```\n\n我们开始先实现 `configureRouter` 方法。我们可以有选择的设置下 `title`，这个属性用来构建文档的标题，但是更重要的部分是设置路由。路由的 `map` 方法用一个简单的 JSON 数据来展示路由表。\n\n两个最重要的属性是 `route` （一个数组或字符串），定义 route pattern；`moduleId`，指向你的 view-model 的相对 module id 路径。你也可以设置 `name`属性，用来生成一个路由的链接，`title`属性用来生成文档的 title，`nav`属性表明了向导模型（navigation model）是否包含该路由，在向导模型中 `href`用来绑定。\n\n> Note: Any properties that you leave off will be conventionally determined by the framework based on what you have provided.\n\nSo，对于 route pattern 你有那些选择哪：\n\n- 静态路由\n\t- 例如：'home' - 直接匹配字符串\n- 有参数的路由\n\t- 例如：'users/:id/detail' - 匹配字符串并且解析一个 `id` 参数。你的 view-model 的 `activate` 回调会被调用，并将会传入一个带着 `id` 的对象，`id` 的值是从 url 中提取的\n- 通配符路由（wildcard routes）\n\t- 例如：'files*path' - 匹配字符串和其他符合他的。你的 view-model 的 `activate` 回调会被调用，且传入一个带着 `path` 属性的对象，`path` 的值是给通配符的值。\n\n所有的路由实际都有一个 `nav` 属性被组合进 `navigation` 数组。这使得用数据绑定来生成菜单结构变得很简单。另一个对绑定很重要的属性是 `isNavigating`。下面是一个简单的例子，向你展示如何使用上面的路由构建一个 view：\n\n```\n<template>\n  <ul>\n    <li class=\"loader\" if.bind=\"router.isNavigating\">\n      <i class=\"fa fa-spinner fa-spin fa-2x\"></i>\n    </li>\n    <li repeat.for=\"item of router.navigation\">\n      <a href.bind=\"item.href\">${item.title}</a>\n    </li>\n  </ul>\n\n  <router-view></router-view>\n</template>\n\n```\n\n### The Screen Activation Lifecycle\n\n无论路由何时处理一个向导，在路由来往的这两个 view-model，都会创建一个准确的生命周期（Whenever the router processes a navigation, it enforces a strict lifecycle on the view-models that it is navigating to and from）。这个生命周期有四个阶段。通过的在 view-model 的类中实现对应的方法，你可以有选择使用这些阶段， Here's a list of the lifecycle callbacks:\n\n- `canActivate(params, routeConfig, navigationInstruction)` - 控制是否能路由进入（ navigate to）到你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。\n- `activate(params, routeConfig, navigationInstruction)` - 在 view-model 展示之前执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑，才进行数据和视图的绑定。\n- `canDeactivate()` -  控制是否能路由离开（ navigate away）你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。\n- `deactivate()` - 在离开 view-model 之后执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑。\n\n`param` 是由路由解析的每个参数组成的对象。`routeConfig` 是你设置的路由配置参数。`routeConfig`  也会有一个新的 `navModel` 属性，他可以用你的 view-model 中加载的数据来改变 document 标题。例如：\n\n```\nactivate(params, routeConfig) {\n  this.userService.getUser(params.id)\n    .then(user => {\n      routeConfig.navModel.setTitle(user.name);\n    });\n}\n```\n\n> Note: 一个向导的命令是一个带有 `navigate(router)` 方法的对象。 When one is encountered, the navigation will be cancelled and control will be passed to the navigation command. One navigation command is provided out of the box: `Redirect`.\n\n### Child Routers\n\n如果你已经阅读了 “Get Started” 向导，我们建议你现在特别注意这个章节  \"Bonus: Leveraging Child Routers\"。\n\n即使你已经设置一个路由映射到view-model，这个 view-model 也还可以包含他自己的路由，然后子路由的 view-model 也可以包含自己的子路由，如此循环……路由模式（route patterns）相对于父级路由，而模块和视图 id 是相对于view-model。他让你可以简单的封装特性或者子应用，以及控制复杂的分层状态（hierarchical state）。\n\n子路由与其他路由并无差异。So，我们上面所讨论的路由相关都适用于他。添加子路由只需要再次实现 `configureRouter` 方法。上面讨论的  screen activation lifecycle 也适用于他。Each phase of the lifecycle is run against the entire router hierarchy before moving on to the next phase. The activate hooks run from top to bottom and the deactivate hooks run from bottom to top.\n\n### Conventional Routing\n\nAs with everything in Aurelia, we have strong support for conventions. 你可以选择配置动态路由而不是一个预先配置的路由。动态路由的栗子：\n\n```\nexport class App {\n  configureRouter(config){\n    config.mapUnknownRoutes(instruction => {\n      //check instruction.fragment\n      //set instruction.config.moduleId\n    });\n  }\n}\n```\n\n你只需要设置 `config.moduleId` 属性，也可以从 `mapUnknownRoutes` 返回一个 promise 来异步设置路由目标。\n\n> Note: Though not necessarily related to conventional routing, you may sometimes have a need to asynchronously configure your router. For example, you may need to call a web service to get user permissions before setting up routes. To do this, return a promise from `configureRouter`.\n\n\n### Customizing the Navigation Pipeline\n\nThe router pipeline is composed out of separate steps that run in succession. Each of these steps has the ability to modify what happens during routing, or stop the routing altogether. The pipeline also contains a few extensibility points where you can add your own steps. These are authorize and modelbind. authorize happens before modelbind. These extensions are called route filters.\n\n下面是一个添加授权（authorization）到应用中的例子：\n\n```\nimport {Redirect} from 'aurelia-router';\n\nexport class App {\n\tconfigureRouter(config){\n\t\tconfig.title = 'Aurelia';\n\n\t\t//Add a route filter to the authorize extensibility point\n\t\tconfig.addPipelineStep('authorize', AuthorizeStep); \n\n\t\tconfig.map([\n\t\t\t{ \n\t\t\t\troute: ['welcome'],\n\t\t\t\tname: 'welcome',\n\t\t\t\tmoduleId: 'welcome',\n\t\t\t\tnav: true,\n\t\t\t\ttitle: 'Welcome'\n\t\t\t},\n\t\t\t{\n\t\t\t\troute: 'flickr',\n\t\t\t\tname: 'flickr',\n\t\t\t\tmodule: 'flickr',\n\t\t\t\tnav: true,\n\t\t\t\tauth: true\n\t\t\t},\n\t\t\t{\n\t\t\t\troute: '',\n\t\t\t\tredirect: 'welcome'\n\t\t\t}\n\t\t]);\n\t}\n}\n\nclass AuthorizeStep{\n\trun(routingContext, next){\n\t\t// Check if the route has an 'auth' key\n\t\t// The reason for using 'nextInstructions' is because\n\t\t// this includes child routes\n\n\t\tif( routingContext.nextInstructions.some(i => i.config.auth) ) {\n\t\t\tvar isLoggedIn = /* insert magic here */false;\n\t\t\tif ( !isLoggedIn ) {\n\t\t\t\treturn next.cancel(new Redirect('login'));\n\t\t\t}\n\t\t}\n\n\t\treturn next();\n\t}\n}\n\n```\n这些扩展点也有自己的小管道线，每个小管道都能添加多步骤。例如，上面栗子中的 `AuthorizeStep` 会检查用户是否登录，你可以在 `authorize` 的扩展点加入 `IsAdminStep` ——是否 Admin 的步骤，他们将会按顺序进行。\n\n你也可以创建自己的 filters，只要在 `addPipelineStep` 中传入一个不同的名字，具体是这样的：\n\n```\nconfig.addPipelineStep('myname', MyFirstStep); // Transparently creates the pipeline \"myname\" if it doesn't already exist.\nconfig.addPipelineStep('myname', MySecondStep); // Adds another step to it.\nconfig.addPipelineStep('modelbind', 'myname'); // Makes the entire `myname` pipeline run as part of the `modelbind` pipeline.\n```\n\n### Configuring PushState\n\n如果你不喜欢 `#` 的哈希标识出现在你的 URLs，你就需要在你的应用中使用 `pushState`。为了让他正常跑起来，你还需要在 server 端做点工作。让我们先从 Aurelia 这边开始码。\n\n首先你需要在 `router` 的 `config` 中告诉 Aurelia ，你想使用 `pushState` ：\n\n```\nexport class App {\n\tconfigureRouter(config){\n\t\tconfig.title = 'Aurelia';\n\t\tconfig.options.pushState = true; // <-- this is all you need here\n\t\tconfig.map([\n\t      { route: ['welcome'],    name: 'welcome',     moduleId: 'welcome',      nav: true, title:'Welcome' },\n\t      { route: 'flickr',       name: 'flickr',      moduleId: 'flickr',       nav: true, auth: true },\n\t      { route: 'child-router', name: 'childRouter', moduleId: 'child-router', nav: true, title:'Child Router' },\n\t      { route: '',             redirect: 'welcome' }\n\t    ]);\n\t}\n}\n\n```\n\n你还需要添加一个 [base 标签](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base) 在html 文档的 head。这个很重要，请别忘记他。\n\n接下来， server 端需要配置：不管发送什么请求都需要返回同个 `index.html`，因为所有的路由操作都在客户端。所以，如果你在依照栗子用 `gulp watch` 和 `browsersync`，你可以将设置改为：\n\nnpm 安装 依赖包：\n\n```\nnpm install --save connect-history-api-fallback\n```\n\n这是在下载安装你需要的中间件。之后打开 _build/tasks_ 文件夹的 _Server_ 任务，将下面这句放在顶部与其他引用的语句一起：\n\n```\nvar historyApiFallback = require('connect-history-api-fallback');\n```\n\n下面就可以用新的 `middleware` 修改 `serve` task“\n\n```\ngulp.task('serve', ['build'], function(){\n\tbrowserSync({\n\t\topen: false,\n\t\tport: 9000,\n\t\tserve: {\n\t\t\tbaseDir: ['.'],\n\t\t\tmiddleware: [historyApiFallback, function(req, res, next){\n\t\t\t\tres.setHeader('Access-Control-Allow-Origin','*');\n\t\t\t\tnext();\n\t\t\t}]\n\t\t}\n\t}, done);\n});\n\n```\n\n现在，你的 node 服务器就会将路由控制权交给 Aurelia 了。\n\n如果你在使用 ASP.NET 或 MVC 等 .NET 服务端框架，可以像这样配置：\n\n- 创建一个控制器叫他 `ApplicationController` 或者其他你想叫的:\n\n```\n\t\npublic class ApplicationController : Controller {\n  public ActionResult Index() {\n    return View();\n  }\n}\n\n```\n\n- 创建一个 \"index.cshtml\" 视图在视图文件夹\n- 设置路由配置为：\n\n```\ncontext.MapRoute(\n  name: \"AureliaRouting\",\n  url: \"{*.}\",\n  defaults: new { controller = \"Application\", action = \"Index\" }\n);\n```\n\n注意上面的配置将强制使用一个 Razor 视图文件。如果你想使用一个普通 HTML 文件，将使用不同的方法：[ This SO article might help you.](http://stackoverflow.com/questions/20871938/render-html-file-in-asp-net-mvc-view)\n\nIf you are using [Nancy FX](http://nancyfx.org/), then the config is just as simple. Locate your `IndexModule.cs` or whatever you called it and make sure it looks something like this and all will be well:\n\n```\npublic class IndexModule : NancyModule {\n  public IndexModule()     {\n    this.Get[\"/robots.txt\"] = p => this.Response.AsFile(\"robots.txt\");\n    this.Get[\"/sitemap.xml\"] = p => this.Response.AsFile(\"sitemap.xml\");\n    this.Get[\"/\"] = x => this.View[\"index\"];\n    this.Get[\"/{path*}\"] = x => this.View[\"index\"];\n  }\n}\n```\n\nSimilar techniques can be used in other server environments - you just need to make sure that whatever server you're using, it needs to send back the same `index.html` regardless of the request being made. All server side frameworks should be able to achieve this. Aurelia will figure out which page to load based on its own route data.\n\n### Reusing an existing VM\n\n有时你会想要在不同的路由中重用已存在的 View-Model。Aurelia 默认会将那 些路由作为同个 View-Model 的别名，然后只会 build 生命周期、绑定一次。可能这并不是你想要的。看下面的栗子：\n\n```\nexport class App {\n  configureRouter(config) {\n    config.title = 'Aurelia';\n    config.map([\n      { route: 'product/a',    moduleId: './product',     nav: true },\n      { route: 'product/b',    moduleId: './product',     nav: true },\n    ]);\n  }\n}\n```\n","source":"_posts/Aurelia-文档小翻译（二）.md","raw":"title: \"Aurelia-文档小翻译（二）\"\ndate: 2015-06-13 14:07:27\ncategories: Aurelia\ndescription: Aurelia 文档翻译下部分，from Routing part\n---\n\n\n## Routing\n\n你可能会需要创建许多不同的应用类型。从 navigation apps、dashboards，到 MDI interfaces，Aurelia 都能完全掌控。这些架构中大多数的关键组件都是一个客户端路由，用来将 url 解析到应用状态中。\n\n如果你读过了开始向导，你会知道完成路由需要两步。首先，在你的 view-model 中有一个 `Router`，我们通过添加一些路由信息和控制向导来配置他。之后，view 中 的一个 `router-view` 负责展示路由中定义的当前状态指向的模块。\n\n例子：\n\n```\nexport class App {\n  configureRouter(config, router){\n    this.router = router;\n\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'home'],       name: 'home',       moduleId: './home/index' },\n      { route: 'users',            name: 'users',      moduleId: './users/index',                      nav: true },\n      { route: 'users/:id/detail', name: 'userDetail', moduleId: './users/detail' },\n      { route: 'files*path',       name: 'files',      moduleId: './files/index',     href:'#files',   nav: true }\n    ]);\n  }\n}\n```\n\n我们开始先实现 `configureRouter` 方法。我们可以有选择的设置下 `title`，这个属性用来构建文档的标题，但是更重要的部分是设置路由。路由的 `map` 方法用一个简单的 JSON 数据来展示路由表。\n\n两个最重要的属性是 `route` （一个数组或字符串），定义 route pattern；`moduleId`，指向你的 view-model 的相对 module id 路径。你也可以设置 `name`属性，用来生成一个路由的链接，`title`属性用来生成文档的 title，`nav`属性表明了向导模型（navigation model）是否包含该路由，在向导模型中 `href`用来绑定。\n\n> Note: Any properties that you leave off will be conventionally determined by the framework based on what you have provided.\n\nSo，对于 route pattern 你有那些选择哪：\n\n- 静态路由\n\t- 例如：'home' - 直接匹配字符串\n- 有参数的路由\n\t- 例如：'users/:id/detail' - 匹配字符串并且解析一个 `id` 参数。你的 view-model 的 `activate` 回调会被调用，并将会传入一个带着 `id` 的对象，`id` 的值是从 url 中提取的\n- 通配符路由（wildcard routes）\n\t- 例如：'files*path' - 匹配字符串和其他符合他的。你的 view-model 的 `activate` 回调会被调用，且传入一个带着 `path` 属性的对象，`path` 的值是给通配符的值。\n\n所有的路由实际都有一个 `nav` 属性被组合进 `navigation` 数组。这使得用数据绑定来生成菜单结构变得很简单。另一个对绑定很重要的属性是 `isNavigating`。下面是一个简单的例子，向你展示如何使用上面的路由构建一个 view：\n\n```\n<template>\n  <ul>\n    <li class=\"loader\" if.bind=\"router.isNavigating\">\n      <i class=\"fa fa-spinner fa-spin fa-2x\"></i>\n    </li>\n    <li repeat.for=\"item of router.navigation\">\n      <a href.bind=\"item.href\">${item.title}</a>\n    </li>\n  </ul>\n\n  <router-view></router-view>\n</template>\n\n```\n\n### The Screen Activation Lifecycle\n\n无论路由何时处理一个向导，在路由来往的这两个 view-model，都会创建一个准确的生命周期（Whenever the router processes a navigation, it enforces a strict lifecycle on the view-models that it is navigating to and from）。这个生命周期有四个阶段。通过的在 view-model 的类中实现对应的方法，你可以有选择使用这些阶段， Here's a list of the lifecycle callbacks:\n\n- `canActivate(params, routeConfig, navigationInstruction)` - 控制是否能路由进入（ navigate to）到你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。\n- `activate(params, routeConfig, navigationInstruction)` - 在 view-model 展示之前执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑，才进行数据和视图的绑定。\n- `canDeactivate()` -  控制是否能路由离开（ navigate away）你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。\n- `deactivate()` - 在离开 view-model 之后执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑。\n\n`param` 是由路由解析的每个参数组成的对象。`routeConfig` 是你设置的路由配置参数。`routeConfig`  也会有一个新的 `navModel` 属性，他可以用你的 view-model 中加载的数据来改变 document 标题。例如：\n\n```\nactivate(params, routeConfig) {\n  this.userService.getUser(params.id)\n    .then(user => {\n      routeConfig.navModel.setTitle(user.name);\n    });\n}\n```\n\n> Note: 一个向导的命令是一个带有 `navigate(router)` 方法的对象。 When one is encountered, the navigation will be cancelled and control will be passed to the navigation command. One navigation command is provided out of the box: `Redirect`.\n\n### Child Routers\n\n如果你已经阅读了 “Get Started” 向导，我们建议你现在特别注意这个章节  \"Bonus: Leveraging Child Routers\"。\n\n即使你已经设置一个路由映射到view-model，这个 view-model 也还可以包含他自己的路由，然后子路由的 view-model 也可以包含自己的子路由，如此循环……路由模式（route patterns）相对于父级路由，而模块和视图 id 是相对于view-model。他让你可以简单的封装特性或者子应用，以及控制复杂的分层状态（hierarchical state）。\n\n子路由与其他路由并无差异。So，我们上面所讨论的路由相关都适用于他。添加子路由只需要再次实现 `configureRouter` 方法。上面讨论的  screen activation lifecycle 也适用于他。Each phase of the lifecycle is run against the entire router hierarchy before moving on to the next phase. The activate hooks run from top to bottom and the deactivate hooks run from bottom to top.\n\n### Conventional Routing\n\nAs with everything in Aurelia, we have strong support for conventions. 你可以选择配置动态路由而不是一个预先配置的路由。动态路由的栗子：\n\n```\nexport class App {\n  configureRouter(config){\n    config.mapUnknownRoutes(instruction => {\n      //check instruction.fragment\n      //set instruction.config.moduleId\n    });\n  }\n}\n```\n\n你只需要设置 `config.moduleId` 属性，也可以从 `mapUnknownRoutes` 返回一个 promise 来异步设置路由目标。\n\n> Note: Though not necessarily related to conventional routing, you may sometimes have a need to asynchronously configure your router. For example, you may need to call a web service to get user permissions before setting up routes. To do this, return a promise from `configureRouter`.\n\n\n### Customizing the Navigation Pipeline\n\nThe router pipeline is composed out of separate steps that run in succession. Each of these steps has the ability to modify what happens during routing, or stop the routing altogether. The pipeline also contains a few extensibility points where you can add your own steps. These are authorize and modelbind. authorize happens before modelbind. These extensions are called route filters.\n\n下面是一个添加授权（authorization）到应用中的例子：\n\n```\nimport {Redirect} from 'aurelia-router';\n\nexport class App {\n\tconfigureRouter(config){\n\t\tconfig.title = 'Aurelia';\n\n\t\t//Add a route filter to the authorize extensibility point\n\t\tconfig.addPipelineStep('authorize', AuthorizeStep); \n\n\t\tconfig.map([\n\t\t\t{ \n\t\t\t\troute: ['welcome'],\n\t\t\t\tname: 'welcome',\n\t\t\t\tmoduleId: 'welcome',\n\t\t\t\tnav: true,\n\t\t\t\ttitle: 'Welcome'\n\t\t\t},\n\t\t\t{\n\t\t\t\troute: 'flickr',\n\t\t\t\tname: 'flickr',\n\t\t\t\tmodule: 'flickr',\n\t\t\t\tnav: true,\n\t\t\t\tauth: true\n\t\t\t},\n\t\t\t{\n\t\t\t\troute: '',\n\t\t\t\tredirect: 'welcome'\n\t\t\t}\n\t\t]);\n\t}\n}\n\nclass AuthorizeStep{\n\trun(routingContext, next){\n\t\t// Check if the route has an 'auth' key\n\t\t// The reason for using 'nextInstructions' is because\n\t\t// this includes child routes\n\n\t\tif( routingContext.nextInstructions.some(i => i.config.auth) ) {\n\t\t\tvar isLoggedIn = /* insert magic here */false;\n\t\t\tif ( !isLoggedIn ) {\n\t\t\t\treturn next.cancel(new Redirect('login'));\n\t\t\t}\n\t\t}\n\n\t\treturn next();\n\t}\n}\n\n```\n这些扩展点也有自己的小管道线，每个小管道都能添加多步骤。例如，上面栗子中的 `AuthorizeStep` 会检查用户是否登录，你可以在 `authorize` 的扩展点加入 `IsAdminStep` ——是否 Admin 的步骤，他们将会按顺序进行。\n\n你也可以创建自己的 filters，只要在 `addPipelineStep` 中传入一个不同的名字，具体是这样的：\n\n```\nconfig.addPipelineStep('myname', MyFirstStep); // Transparently creates the pipeline \"myname\" if it doesn't already exist.\nconfig.addPipelineStep('myname', MySecondStep); // Adds another step to it.\nconfig.addPipelineStep('modelbind', 'myname'); // Makes the entire `myname` pipeline run as part of the `modelbind` pipeline.\n```\n\n### Configuring PushState\n\n如果你不喜欢 `#` 的哈希标识出现在你的 URLs，你就需要在你的应用中使用 `pushState`。为了让他正常跑起来，你还需要在 server 端做点工作。让我们先从 Aurelia 这边开始码。\n\n首先你需要在 `router` 的 `config` 中告诉 Aurelia ，你想使用 `pushState` ：\n\n```\nexport class App {\n\tconfigureRouter(config){\n\t\tconfig.title = 'Aurelia';\n\t\tconfig.options.pushState = true; // <-- this is all you need here\n\t\tconfig.map([\n\t      { route: ['welcome'],    name: 'welcome',     moduleId: 'welcome',      nav: true, title:'Welcome' },\n\t      { route: 'flickr',       name: 'flickr',      moduleId: 'flickr',       nav: true, auth: true },\n\t      { route: 'child-router', name: 'childRouter', moduleId: 'child-router', nav: true, title:'Child Router' },\n\t      { route: '',             redirect: 'welcome' }\n\t    ]);\n\t}\n}\n\n```\n\n你还需要添加一个 [base 标签](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base) 在html 文档的 head。这个很重要，请别忘记他。\n\n接下来， server 端需要配置：不管发送什么请求都需要返回同个 `index.html`，因为所有的路由操作都在客户端。所以，如果你在依照栗子用 `gulp watch` 和 `browsersync`，你可以将设置改为：\n\nnpm 安装 依赖包：\n\n```\nnpm install --save connect-history-api-fallback\n```\n\n这是在下载安装你需要的中间件。之后打开 _build/tasks_ 文件夹的 _Server_ 任务，将下面这句放在顶部与其他引用的语句一起：\n\n```\nvar historyApiFallback = require('connect-history-api-fallback');\n```\n\n下面就可以用新的 `middleware` 修改 `serve` task“\n\n```\ngulp.task('serve', ['build'], function(){\n\tbrowserSync({\n\t\topen: false,\n\t\tport: 9000,\n\t\tserve: {\n\t\t\tbaseDir: ['.'],\n\t\t\tmiddleware: [historyApiFallback, function(req, res, next){\n\t\t\t\tres.setHeader('Access-Control-Allow-Origin','*');\n\t\t\t\tnext();\n\t\t\t}]\n\t\t}\n\t}, done);\n});\n\n```\n\n现在，你的 node 服务器就会将路由控制权交给 Aurelia 了。\n\n如果你在使用 ASP.NET 或 MVC 等 .NET 服务端框架，可以像这样配置：\n\n- 创建一个控制器叫他 `ApplicationController` 或者其他你想叫的:\n\n```\n\t\npublic class ApplicationController : Controller {\n  public ActionResult Index() {\n    return View();\n  }\n}\n\n```\n\n- 创建一个 \"index.cshtml\" 视图在视图文件夹\n- 设置路由配置为：\n\n```\ncontext.MapRoute(\n  name: \"AureliaRouting\",\n  url: \"{*.}\",\n  defaults: new { controller = \"Application\", action = \"Index\" }\n);\n```\n\n注意上面的配置将强制使用一个 Razor 视图文件。如果你想使用一个普通 HTML 文件，将使用不同的方法：[ This SO article might help you.](http://stackoverflow.com/questions/20871938/render-html-file-in-asp-net-mvc-view)\n\nIf you are using [Nancy FX](http://nancyfx.org/), then the config is just as simple. Locate your `IndexModule.cs` or whatever you called it and make sure it looks something like this and all will be well:\n\n```\npublic class IndexModule : NancyModule {\n  public IndexModule()     {\n    this.Get[\"/robots.txt\"] = p => this.Response.AsFile(\"robots.txt\");\n    this.Get[\"/sitemap.xml\"] = p => this.Response.AsFile(\"sitemap.xml\");\n    this.Get[\"/\"] = x => this.View[\"index\"];\n    this.Get[\"/{path*}\"] = x => this.View[\"index\"];\n  }\n}\n```\n\nSimilar techniques can be used in other server environments - you just need to make sure that whatever server you're using, it needs to send back the same `index.html` regardless of the request being made. All server side frameworks should be able to achieve this. Aurelia will figure out which page to load based on its own route data.\n\n### Reusing an existing VM\n\n有时你会想要在不同的路由中重用已存在的 View-Model。Aurelia 默认会将那 些路由作为同个 View-Model 的别名，然后只会 build 生命周期、绑定一次。可能这并不是你想要的。看下面的栗子：\n\n```\nexport class App {\n  configureRouter(config) {\n    config.title = 'Aurelia';\n    config.map([\n      { route: 'product/a',    moduleId: './product',     nav: true },\n      { route: 'product/b',    moduleId: './product',     nav: true },\n    ]);\n  }\n}\n```\n","slug":"Aurelia-文档小翻译（二）","published":1,"updated":"2015-06-18T08:12:05.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphj001cok1vyy6qyp0r","content":"<h2 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h2><p>你可能会需要创建许多不同的应用类型。从 navigation apps、dashboards，到 MDI interfaces，Aurelia 都能完全掌控。这些架构中大多数的关键组件都是一个客户端路由，用来将 url 解析到应用状态中。</p>\n<p>如果你读过了开始向导，你会知道完成路由需要两步。首先，在你的 view-model 中有一个 <code>Router</code>，我们通过添加一些路由信息和控制向导来配置他。之后，view 中 的一个 <code>router-view</code> 负责展示路由中定义的当前状态指向的模块。</p>\n<p>例子：</p>\n<pre><code>export class App {\n  configureRouter(config, router){\n    this.router = router;\n\n    config.title = &#39;Aurelia&#39;;\n    config.map([\n      { route: [&#39;&#39;, &#39;home&#39;],       name: &#39;home&#39;,       moduleId: &#39;./home/index&#39; },\n      { route: &#39;users&#39;,            name: &#39;users&#39;,      moduleId: &#39;./users/index&#39;,                      nav: true },\n      { route: &#39;users/:id/detail&#39;, name: &#39;userDetail&#39;, moduleId: &#39;./users/detail&#39; },\n      { route: &#39;files*path&#39;,       name: &#39;files&#39;,      moduleId: &#39;./files/index&#39;,     href:&#39;#files&#39;,   nav: true }\n    ]);\n  }\n}\n</code></pre><p>我们开始先实现 <code>configureRouter</code> 方法。我们可以有选择的设置下 <code>title</code>，这个属性用来构建文档的标题，但是更重要的部分是设置路由。路由的 <code>map</code> 方法用一个简单的 JSON 数据来展示路由表。</p>\n<p>两个最重要的属性是 <code>route</code> （一个数组或字符串），定义 route pattern；<code>moduleId</code>，指向你的 view-model 的相对 module id 路径。你也可以设置 <code>name</code>属性，用来生成一个路由的链接，<code>title</code>属性用来生成文档的 title，<code>nav</code>属性表明了向导模型（navigation model）是否包含该路由，在向导模型中 <code>href</code>用来绑定。</p>\n<blockquote>\n<p>Note: Any properties that you leave off will be conventionally determined by the framework based on what you have provided.</p>\n</blockquote>\n<p>So，对于 route pattern 你有那些选择哪：</p>\n<ul>\n<li>静态路由<ul>\n<li>例如：’home’ - 直接匹配字符串</li>\n</ul>\n</li>\n<li>有参数的路由<ul>\n<li>例如：’users/:id/detail’ - 匹配字符串并且解析一个 <code>id</code> 参数。你的 view-model 的 <code>activate</code> 回调会被调用，并将会传入一个带着 <code>id</code> 的对象，<code>id</code> 的值是从 url 中提取的</li>\n</ul>\n</li>\n<li>通配符路由（wildcard routes）<ul>\n<li>例如：’files*path’ - 匹配字符串和其他符合他的。你的 view-model 的 <code>activate</code> 回调会被调用，且传入一个带着 <code>path</code> 属性的对象，<code>path</code> 的值是给通配符的值。</li>\n</ul>\n</li>\n</ul>\n<p>所有的路由实际都有一个 <code>nav</code> 属性被组合进 <code>navigation</code> 数组。这使得用数据绑定来生成菜单结构变得很简单。另一个对绑定很重要的属性是 <code>isNavigating</code>。下面是一个简单的例子，向你展示如何使用上面的路由构建一个 view：</p>\n<pre><code>&lt;template&gt;\n  &lt;ul&gt;\n    &lt;li class=&quot;loader&quot; if.bind=&quot;router.isNavigating&quot;&gt;\n      &lt;i class=&quot;fa fa-spinner fa-spin fa-2x&quot;&gt;&lt;/i&gt;\n    &lt;/li&gt;\n    &lt;li repeat.for=&quot;item of router.navigation&quot;&gt;\n      &lt;a href.bind=&quot;item.href&quot;&gt;${item.title}&lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;router-view&gt;&lt;/router-view&gt;\n&lt;/template&gt;\n</code></pre><h3 id=\"The-Screen-Activation-Lifecycle\"><a href=\"#The-Screen-Activation-Lifecycle\" class=\"headerlink\" title=\"The Screen Activation Lifecycle\"></a>The Screen Activation Lifecycle</h3><p>无论路由何时处理一个向导，在路由来往的这两个 view-model，都会创建一个准确的生命周期（Whenever the router processes a navigation, it enforces a strict lifecycle on the view-models that it is navigating to and from）。这个生命周期有四个阶段。通过的在 view-model 的类中实现对应的方法，你可以有选择使用这些阶段， Here’s a list of the lifecycle callbacks:</p>\n<ul>\n<li><code>canActivate(params, routeConfig, navigationInstruction)</code> - 控制是否能路由进入（ navigate to）到你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。</li>\n<li><code>activate(params, routeConfig, navigationInstruction)</code> - 在 view-model 展示之前执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑，才进行数据和视图的绑定。</li>\n<li><code>canDeactivate()</code> -  控制是否能路由离开（ navigate away）你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。</li>\n<li><code>deactivate()</code> - 在离开 view-model 之后执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑。</li>\n</ul>\n<p><code>param</code> 是由路由解析的每个参数组成的对象。<code>routeConfig</code> 是你设置的路由配置参数。<code>routeConfig</code>  也会有一个新的 <code>navModel</code> 属性，他可以用你的 view-model 中加载的数据来改变 document 标题。例如：</p>\n<pre><code>activate(params, routeConfig) {\n  this.userService.getUser(params.id)\n    .then(user =&gt; {\n      routeConfig.navModel.setTitle(user.name);\n    });\n}\n</code></pre><blockquote>\n<p>Note: 一个向导的命令是一个带有 <code>navigate(router)</code> 方法的对象。 When one is encountered, the navigation will be cancelled and control will be passed to the navigation command. One navigation command is provided out of the box: <code>Redirect</code>.</p>\n</blockquote>\n<h3 id=\"Child-Routers\"><a href=\"#Child-Routers\" class=\"headerlink\" title=\"Child Routers\"></a>Child Routers</h3><p>如果你已经阅读了 “Get Started” 向导，我们建议你现在特别注意这个章节  “Bonus: Leveraging Child Routers”。</p>\n<p>即使你已经设置一个路由映射到view-model，这个 view-model 也还可以包含他自己的路由，然后子路由的 view-model 也可以包含自己的子路由，如此循环……路由模式（route patterns）相对于父级路由，而模块和视图 id 是相对于view-model。他让你可以简单的封装特性或者子应用，以及控制复杂的分层状态（hierarchical state）。</p>\n<p>子路由与其他路由并无差异。So，我们上面所讨论的路由相关都适用于他。添加子路由只需要再次实现 <code>configureRouter</code> 方法。上面讨论的  screen activation lifecycle 也适用于他。Each phase of the lifecycle is run against the entire router hierarchy before moving on to the next phase. The activate hooks run from top to bottom and the deactivate hooks run from bottom to top.</p>\n<h3 id=\"Conventional-Routing\"><a href=\"#Conventional-Routing\" class=\"headerlink\" title=\"Conventional Routing\"></a>Conventional Routing</h3><p>As with everything in Aurelia, we have strong support for conventions. 你可以选择配置动态路由而不是一个预先配置的路由。动态路由的栗子：</p>\n<pre><code>export class App {\n  configureRouter(config){\n    config.mapUnknownRoutes(instruction =&gt; {\n      //check instruction.fragment\n      //set instruction.config.moduleId\n    });\n  }\n}\n</code></pre><p>你只需要设置 <code>config.moduleId</code> 属性，也可以从 <code>mapUnknownRoutes</code> 返回一个 promise 来异步设置路由目标。</p>\n<blockquote>\n<p>Note: Though not necessarily related to conventional routing, you may sometimes have a need to asynchronously configure your router. For example, you may need to call a web service to get user permissions before setting up routes. To do this, return a promise from <code>configureRouter</code>.</p>\n</blockquote>\n<h3 id=\"Customizing-the-Navigation-Pipeline\"><a href=\"#Customizing-the-Navigation-Pipeline\" class=\"headerlink\" title=\"Customizing the Navigation Pipeline\"></a>Customizing the Navigation Pipeline</h3><p>The router pipeline is composed out of separate steps that run in succession. Each of these steps has the ability to modify what happens during routing, or stop the routing altogether. The pipeline also contains a few extensibility points where you can add your own steps. These are authorize and modelbind. authorize happens before modelbind. These extensions are called route filters.</p>\n<p>下面是一个添加授权（authorization）到应用中的例子：</p>\n<pre><code>import {Redirect} from &#39;aurelia-router&#39;;\n\nexport class App {\n    configureRouter(config){\n        config.title = &#39;Aurelia&#39;;\n\n        //Add a route filter to the authorize extensibility point\n        config.addPipelineStep(&#39;authorize&#39;, AuthorizeStep); \n\n        config.map([\n            { \n                route: [&#39;welcome&#39;],\n                name: &#39;welcome&#39;,\n                moduleId: &#39;welcome&#39;,\n                nav: true,\n                title: &#39;Welcome&#39;\n            },\n            {\n                route: &#39;flickr&#39;,\n                name: &#39;flickr&#39;,\n                module: &#39;flickr&#39;,\n                nav: true,\n                auth: true\n            },\n            {\n                route: &#39;&#39;,\n                redirect: &#39;welcome&#39;\n            }\n        ]);\n    }\n}\n\nclass AuthorizeStep{\n    run(routingContext, next){\n        // Check if the route has an &#39;auth&#39; key\n        // The reason for using &#39;nextInstructions&#39; is because\n        // this includes child routes\n\n        if( routingContext.nextInstructions.some(i =&gt; i.config.auth) ) {\n            var isLoggedIn = /* insert magic here */false;\n            if ( !isLoggedIn ) {\n                return next.cancel(new Redirect(&#39;login&#39;));\n            }\n        }\n\n        return next();\n    }\n}\n</code></pre><p>这些扩展点也有自己的小管道线，每个小管道都能添加多步骤。例如，上面栗子中的 <code>AuthorizeStep</code> 会检查用户是否登录，你可以在 <code>authorize</code> 的扩展点加入 <code>IsAdminStep</code> ——是否 Admin 的步骤，他们将会按顺序进行。</p>\n<p>你也可以创建自己的 filters，只要在 <code>addPipelineStep</code> 中传入一个不同的名字，具体是这样的：</p>\n<pre><code>config.addPipelineStep(&#39;myname&#39;, MyFirstStep); // Transparently creates the pipeline &quot;myname&quot; if it doesn&#39;t already exist.\nconfig.addPipelineStep(&#39;myname&#39;, MySecondStep); // Adds another step to it.\nconfig.addPipelineStep(&#39;modelbind&#39;, &#39;myname&#39;); // Makes the entire `myname` pipeline run as part of the `modelbind` pipeline.\n</code></pre><h3 id=\"Configuring-PushState\"><a href=\"#Configuring-PushState\" class=\"headerlink\" title=\"Configuring PushState\"></a>Configuring PushState</h3><p>如果你不喜欢 <code>#</code> 的哈希标识出现在你的 URLs，你就需要在你的应用中使用 <code>pushState</code>。为了让他正常跑起来，你还需要在 server 端做点工作。让我们先从 Aurelia 这边开始码。</p>\n<p>首先你需要在 <code>router</code> 的 <code>config</code> 中告诉 Aurelia ，你想使用 <code>pushState</code> ：</p>\n<pre><code>export class App {\n    configureRouter(config){\n        config.title = &#39;Aurelia&#39;;\n        config.options.pushState = true; // &lt;-- this is all you need here\n        config.map([\n          { route: [&#39;welcome&#39;],    name: &#39;welcome&#39;,     moduleId: &#39;welcome&#39;,      nav: true, title:&#39;Welcome&#39; },\n          { route: &#39;flickr&#39;,       name: &#39;flickr&#39;,      moduleId: &#39;flickr&#39;,       nav: true, auth: true },\n          { route: &#39;child-router&#39;, name: &#39;childRouter&#39;, moduleId: &#39;child-router&#39;, nav: true, title:&#39;Child Router&#39; },\n          { route: &#39;&#39;,             redirect: &#39;welcome&#39; }\n        ]);\n    }\n}\n</code></pre><p>你还需要添加一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\" target=\"_blank\" rel=\"external\">base 标签</a> 在html 文档的 head。这个很重要，请别忘记他。</p>\n<p>接下来， server 端需要配置：不管发送什么请求都需要返回同个 <code>index.html</code>，因为所有的路由操作都在客户端。所以，如果你在依照栗子用 <code>gulp watch</code> 和 <code>browsersync</code>，你可以将设置改为：</p>\n<p>npm 安装 依赖包：</p>\n<pre><code>npm install --save connect-history-api-fallback\n</code></pre><p>这是在下载安装你需要的中间件。之后打开 <em>build/tasks</em> 文件夹的 <em>Server</em> 任务，将下面这句放在顶部与其他引用的语句一起：</p>\n<pre><code>var historyApiFallback = require(&#39;connect-history-api-fallback&#39;);\n</code></pre><p>下面就可以用新的 <code>middleware</code> 修改 <code>serve</code> task“</p>\n<pre><code>gulp.task(&#39;serve&#39;, [&#39;build&#39;], function(){\n    browserSync({\n        open: false,\n        port: 9000,\n        serve: {\n            baseDir: [&#39;.&#39;],\n            middleware: [historyApiFallback, function(req, res, next){\n                res.setHeader(&#39;Access-Control-Allow-Origin&#39;,&#39;*&#39;);\n                next();\n            }]\n        }\n    }, done);\n});\n</code></pre><p>现在，你的 node 服务器就会将路由控制权交给 Aurelia 了。</p>\n<p>如果你在使用 ASP.NET 或 MVC 等 .NET 服务端框架，可以像这样配置：</p>\n<ul>\n<li>创建一个控制器叫他 <code>ApplicationController</code> 或者其他你想叫的:</li>\n</ul>\n<pre><code>\npublic class ApplicationController : Controller {\n  public ActionResult Index() {\n    return View();\n  }\n}\n</code></pre><ul>\n<li>创建一个 “index.cshtml” 视图在视图文件夹</li>\n<li>设置路由配置为：</li>\n</ul>\n<pre><code>context.MapRoute(\n  name: &quot;AureliaRouting&quot;,\n  url: &quot;{*.}&quot;,\n  defaults: new { controller = &quot;Application&quot;, action = &quot;Index&quot; }\n);\n</code></pre><p>注意上面的配置将强制使用一个 Razor 视图文件。如果你想使用一个普通 HTML 文件，将使用不同的方法：<a href=\"http://stackoverflow.com/questions/20871938/render-html-file-in-asp-net-mvc-view\" target=\"_blank\" rel=\"external\"> This SO article might help you.</a></p>\n<p>If you are using <a href=\"http://nancyfx.org/\" target=\"_blank\" rel=\"external\">Nancy FX</a>, then the config is just as simple. Locate your <code>IndexModule.cs</code> or whatever you called it and make sure it looks something like this and all will be well:</p>\n<pre><code>public class IndexModule : NancyModule {\n  public IndexModule()     {\n    this.Get[&quot;/robots.txt&quot;] = p =&gt; this.Response.AsFile(&quot;robots.txt&quot;);\n    this.Get[&quot;/sitemap.xml&quot;] = p =&gt; this.Response.AsFile(&quot;sitemap.xml&quot;);\n    this.Get[&quot;/&quot;] = x =&gt; this.View[&quot;index&quot;];\n    this.Get[&quot;/{path*}&quot;] = x =&gt; this.View[&quot;index&quot;];\n  }\n}\n</code></pre><p>Similar techniques can be used in other server environments - you just need to make sure that whatever server you’re using, it needs to send back the same <code>index.html</code> regardless of the request being made. All server side frameworks should be able to achieve this. Aurelia will figure out which page to load based on its own route data.</p>\n<h3 id=\"Reusing-an-existing-VM\"><a href=\"#Reusing-an-existing-VM\" class=\"headerlink\" title=\"Reusing an existing VM\"></a>Reusing an existing VM</h3><p>有时你会想要在不同的路由中重用已存在的 View-Model。Aurelia 默认会将那 些路由作为同个 View-Model 的别名，然后只会 build 生命周期、绑定一次。可能这并不是你想要的。看下面的栗子：</p>\n<pre><code>export class App {\n  configureRouter(config) {\n    config.title = &#39;Aurelia&#39;;\n    config.map([\n      { route: &#39;product/a&#39;,    moduleId: &#39;./product&#39;,     nav: true },\n      { route: &#39;product/b&#39;,    moduleId: &#39;./product&#39;,     nav: true },\n    ]);\n  }\n}\n</code></pre>","excerpt":"","more":"<h2 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h2><p>你可能会需要创建许多不同的应用类型。从 navigation apps、dashboards，到 MDI interfaces，Aurelia 都能完全掌控。这些架构中大多数的关键组件都是一个客户端路由，用来将 url 解析到应用状态中。</p>\n<p>如果你读过了开始向导，你会知道完成路由需要两步。首先，在你的 view-model 中有一个 <code>Router</code>，我们通过添加一些路由信息和控制向导来配置他。之后，view 中 的一个 <code>router-view</code> 负责展示路由中定义的当前状态指向的模块。</p>\n<p>例子：</p>\n<pre><code>export class App {\n  configureRouter(config, router){\n    this.router = router;\n\n    config.title = &#39;Aurelia&#39;;\n    config.map([\n      { route: [&#39;&#39;, &#39;home&#39;],       name: &#39;home&#39;,       moduleId: &#39;./home/index&#39; },\n      { route: &#39;users&#39;,            name: &#39;users&#39;,      moduleId: &#39;./users/index&#39;,                      nav: true },\n      { route: &#39;users/:id/detail&#39;, name: &#39;userDetail&#39;, moduleId: &#39;./users/detail&#39; },\n      { route: &#39;files*path&#39;,       name: &#39;files&#39;,      moduleId: &#39;./files/index&#39;,     href:&#39;#files&#39;,   nav: true }\n    ]);\n  }\n}\n</code></pre><p>我们开始先实现 <code>configureRouter</code> 方法。我们可以有选择的设置下 <code>title</code>，这个属性用来构建文档的标题，但是更重要的部分是设置路由。路由的 <code>map</code> 方法用一个简单的 JSON 数据来展示路由表。</p>\n<p>两个最重要的属性是 <code>route</code> （一个数组或字符串），定义 route pattern；<code>moduleId</code>，指向你的 view-model 的相对 module id 路径。你也可以设置 <code>name</code>属性，用来生成一个路由的链接，<code>title</code>属性用来生成文档的 title，<code>nav</code>属性表明了向导模型（navigation model）是否包含该路由，在向导模型中 <code>href</code>用来绑定。</p>\n<blockquote>\n<p>Note: Any properties that you leave off will be conventionally determined by the framework based on what you have provided.</p>\n</blockquote>\n<p>So，对于 route pattern 你有那些选择哪：</p>\n<ul>\n<li>静态路由<ul>\n<li>例如：’home’ - 直接匹配字符串</li>\n</ul>\n</li>\n<li>有参数的路由<ul>\n<li>例如：’users/:id/detail’ - 匹配字符串并且解析一个 <code>id</code> 参数。你的 view-model 的 <code>activate</code> 回调会被调用，并将会传入一个带着 <code>id</code> 的对象，<code>id</code> 的值是从 url 中提取的</li>\n</ul>\n</li>\n<li>通配符路由（wildcard routes）<ul>\n<li>例如：’files*path’ - 匹配字符串和其他符合他的。你的 view-model 的 <code>activate</code> 回调会被调用，且传入一个带着 <code>path</code> 属性的对象，<code>path</code> 的值是给通配符的值。</li>\n</ul>\n</li>\n</ul>\n<p>所有的路由实际都有一个 <code>nav</code> 属性被组合进 <code>navigation</code> 数组。这使得用数据绑定来生成菜单结构变得很简单。另一个对绑定很重要的属性是 <code>isNavigating</code>。下面是一个简单的例子，向你展示如何使用上面的路由构建一个 view：</p>\n<pre><code>&lt;template&gt;\n  &lt;ul&gt;\n    &lt;li class=&quot;loader&quot; if.bind=&quot;router.isNavigating&quot;&gt;\n      &lt;i class=&quot;fa fa-spinner fa-spin fa-2x&quot;&gt;&lt;/i&gt;\n    &lt;/li&gt;\n    &lt;li repeat.for=&quot;item of router.navigation&quot;&gt;\n      &lt;a href.bind=&quot;item.href&quot;&gt;${item.title}&lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;router-view&gt;&lt;/router-view&gt;\n&lt;/template&gt;\n</code></pre><h3 id=\"The-Screen-Activation-Lifecycle\"><a href=\"#The-Screen-Activation-Lifecycle\" class=\"headerlink\" title=\"The Screen Activation Lifecycle\"></a>The Screen Activation Lifecycle</h3><p>无论路由何时处理一个向导，在路由来往的这两个 view-model，都会创建一个准确的生命周期（Whenever the router processes a navigation, it enforces a strict lifecycle on the view-models that it is navigating to and from）。这个生命周期有四个阶段。通过的在 view-model 的类中实现对应的方法，你可以有选择使用这些阶段， Here’s a list of the lifecycle callbacks:</p>\n<ul>\n<li><code>canActivate(params, routeConfig, navigationInstruction)</code> - 控制是否能路由进入（ navigate to）到你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。</li>\n<li><code>activate(params, routeConfig, navigationInstruction)</code> - 在 view-model 展示之前执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑，才进行数据和视图的绑定。</li>\n<li><code>canDeactivate()</code> -  控制是否能路由离开（ navigate away）你的 view-model。返回一个 boolean 值、一个返回boolean 值的 promise，或者一个向导命令（navigation command）。</li>\n<li><code>deactivate()</code> - 在离开 view-model 之后执行你的自定义逻辑。可以有选择的返回一个 promise 来告诉路由等待直到你完成你的逻辑。</li>\n</ul>\n<p><code>param</code> 是由路由解析的每个参数组成的对象。<code>routeConfig</code> 是你设置的路由配置参数。<code>routeConfig</code>  也会有一个新的 <code>navModel</code> 属性，他可以用你的 view-model 中加载的数据来改变 document 标题。例如：</p>\n<pre><code>activate(params, routeConfig) {\n  this.userService.getUser(params.id)\n    .then(user =&gt; {\n      routeConfig.navModel.setTitle(user.name);\n    });\n}\n</code></pre><blockquote>\n<p>Note: 一个向导的命令是一个带有 <code>navigate(router)</code> 方法的对象。 When one is encountered, the navigation will be cancelled and control will be passed to the navigation command. One navigation command is provided out of the box: <code>Redirect</code>.</p>\n</blockquote>\n<h3 id=\"Child-Routers\"><a href=\"#Child-Routers\" class=\"headerlink\" title=\"Child Routers\"></a>Child Routers</h3><p>如果你已经阅读了 “Get Started” 向导，我们建议你现在特别注意这个章节  “Bonus: Leveraging Child Routers”。</p>\n<p>即使你已经设置一个路由映射到view-model，这个 view-model 也还可以包含他自己的路由，然后子路由的 view-model 也可以包含自己的子路由，如此循环……路由模式（route patterns）相对于父级路由，而模块和视图 id 是相对于view-model。他让你可以简单的封装特性或者子应用，以及控制复杂的分层状态（hierarchical state）。</p>\n<p>子路由与其他路由并无差异。So，我们上面所讨论的路由相关都适用于他。添加子路由只需要再次实现 <code>configureRouter</code> 方法。上面讨论的  screen activation lifecycle 也适用于他。Each phase of the lifecycle is run against the entire router hierarchy before moving on to the next phase. The activate hooks run from top to bottom and the deactivate hooks run from bottom to top.</p>\n<h3 id=\"Conventional-Routing\"><a href=\"#Conventional-Routing\" class=\"headerlink\" title=\"Conventional Routing\"></a>Conventional Routing</h3><p>As with everything in Aurelia, we have strong support for conventions. 你可以选择配置动态路由而不是一个预先配置的路由。动态路由的栗子：</p>\n<pre><code>export class App {\n  configureRouter(config){\n    config.mapUnknownRoutes(instruction =&gt; {\n      //check instruction.fragment\n      //set instruction.config.moduleId\n    });\n  }\n}\n</code></pre><p>你只需要设置 <code>config.moduleId</code> 属性，也可以从 <code>mapUnknownRoutes</code> 返回一个 promise 来异步设置路由目标。</p>\n<blockquote>\n<p>Note: Though not necessarily related to conventional routing, you may sometimes have a need to asynchronously configure your router. For example, you may need to call a web service to get user permissions before setting up routes. To do this, return a promise from <code>configureRouter</code>.</p>\n</blockquote>\n<h3 id=\"Customizing-the-Navigation-Pipeline\"><a href=\"#Customizing-the-Navigation-Pipeline\" class=\"headerlink\" title=\"Customizing the Navigation Pipeline\"></a>Customizing the Navigation Pipeline</h3><p>The router pipeline is composed out of separate steps that run in succession. Each of these steps has the ability to modify what happens during routing, or stop the routing altogether. The pipeline also contains a few extensibility points where you can add your own steps. These are authorize and modelbind. authorize happens before modelbind. These extensions are called route filters.</p>\n<p>下面是一个添加授权（authorization）到应用中的例子：</p>\n<pre><code>import {Redirect} from &#39;aurelia-router&#39;;\n\nexport class App {\n    configureRouter(config){\n        config.title = &#39;Aurelia&#39;;\n\n        //Add a route filter to the authorize extensibility point\n        config.addPipelineStep(&#39;authorize&#39;, AuthorizeStep); \n\n        config.map([\n            { \n                route: [&#39;welcome&#39;],\n                name: &#39;welcome&#39;,\n                moduleId: &#39;welcome&#39;,\n                nav: true,\n                title: &#39;Welcome&#39;\n            },\n            {\n                route: &#39;flickr&#39;,\n                name: &#39;flickr&#39;,\n                module: &#39;flickr&#39;,\n                nav: true,\n                auth: true\n            },\n            {\n                route: &#39;&#39;,\n                redirect: &#39;welcome&#39;\n            }\n        ]);\n    }\n}\n\nclass AuthorizeStep{\n    run(routingContext, next){\n        // Check if the route has an &#39;auth&#39; key\n        // The reason for using &#39;nextInstructions&#39; is because\n        // this includes child routes\n\n        if( routingContext.nextInstructions.some(i =&gt; i.config.auth) ) {\n            var isLoggedIn = /* insert magic here */false;\n            if ( !isLoggedIn ) {\n                return next.cancel(new Redirect(&#39;login&#39;));\n            }\n        }\n\n        return next();\n    }\n}\n</code></pre><p>这些扩展点也有自己的小管道线，每个小管道都能添加多步骤。例如，上面栗子中的 <code>AuthorizeStep</code> 会检查用户是否登录，你可以在 <code>authorize</code> 的扩展点加入 <code>IsAdminStep</code> ——是否 Admin 的步骤，他们将会按顺序进行。</p>\n<p>你也可以创建自己的 filters，只要在 <code>addPipelineStep</code> 中传入一个不同的名字，具体是这样的：</p>\n<pre><code>config.addPipelineStep(&#39;myname&#39;, MyFirstStep); // Transparently creates the pipeline &quot;myname&quot; if it doesn&#39;t already exist.\nconfig.addPipelineStep(&#39;myname&#39;, MySecondStep); // Adds another step to it.\nconfig.addPipelineStep(&#39;modelbind&#39;, &#39;myname&#39;); // Makes the entire `myname` pipeline run as part of the `modelbind` pipeline.\n</code></pre><h3 id=\"Configuring-PushState\"><a href=\"#Configuring-PushState\" class=\"headerlink\" title=\"Configuring PushState\"></a>Configuring PushState</h3><p>如果你不喜欢 <code>#</code> 的哈希标识出现在你的 URLs，你就需要在你的应用中使用 <code>pushState</code>。为了让他正常跑起来，你还需要在 server 端做点工作。让我们先从 Aurelia 这边开始码。</p>\n<p>首先你需要在 <code>router</code> 的 <code>config</code> 中告诉 Aurelia ，你想使用 <code>pushState</code> ：</p>\n<pre><code>export class App {\n    configureRouter(config){\n        config.title = &#39;Aurelia&#39;;\n        config.options.pushState = true; // &lt;-- this is all you need here\n        config.map([\n          { route: [&#39;welcome&#39;],    name: &#39;welcome&#39;,     moduleId: &#39;welcome&#39;,      nav: true, title:&#39;Welcome&#39; },\n          { route: &#39;flickr&#39;,       name: &#39;flickr&#39;,      moduleId: &#39;flickr&#39;,       nav: true, auth: true },\n          { route: &#39;child-router&#39;, name: &#39;childRouter&#39;, moduleId: &#39;child-router&#39;, nav: true, title:&#39;Child Router&#39; },\n          { route: &#39;&#39;,             redirect: &#39;welcome&#39; }\n        ]);\n    }\n}\n</code></pre><p>你还需要添加一个 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\">base 标签</a> 在html 文档的 head。这个很重要，请别忘记他。</p>\n<p>接下来， server 端需要配置：不管发送什么请求都需要返回同个 <code>index.html</code>，因为所有的路由操作都在客户端。所以，如果你在依照栗子用 <code>gulp watch</code> 和 <code>browsersync</code>，你可以将设置改为：</p>\n<p>npm 安装 依赖包：</p>\n<pre><code>npm install --save connect-history-api-fallback\n</code></pre><p>这是在下载安装你需要的中间件。之后打开 <em>build/tasks</em> 文件夹的 <em>Server</em> 任务，将下面这句放在顶部与其他引用的语句一起：</p>\n<pre><code>var historyApiFallback = require(&#39;connect-history-api-fallback&#39;);\n</code></pre><p>下面就可以用新的 <code>middleware</code> 修改 <code>serve</code> task“</p>\n<pre><code>gulp.task(&#39;serve&#39;, [&#39;build&#39;], function(){\n    browserSync({\n        open: false,\n        port: 9000,\n        serve: {\n            baseDir: [&#39;.&#39;],\n            middleware: [historyApiFallback, function(req, res, next){\n                res.setHeader(&#39;Access-Control-Allow-Origin&#39;,&#39;*&#39;);\n                next();\n            }]\n        }\n    }, done);\n});\n</code></pre><p>现在，你的 node 服务器就会将路由控制权交给 Aurelia 了。</p>\n<p>如果你在使用 ASP.NET 或 MVC 等 .NET 服务端框架，可以像这样配置：</p>\n<ul>\n<li>创建一个控制器叫他 <code>ApplicationController</code> 或者其他你想叫的:</li>\n</ul>\n<pre><code>\npublic class ApplicationController : Controller {\n  public ActionResult Index() {\n    return View();\n  }\n}\n</code></pre><ul>\n<li>创建一个 “index.cshtml” 视图在视图文件夹</li>\n<li>设置路由配置为：</li>\n</ul>\n<pre><code>context.MapRoute(\n  name: &quot;AureliaRouting&quot;,\n  url: &quot;{*.}&quot;,\n  defaults: new { controller = &quot;Application&quot;, action = &quot;Index&quot; }\n);\n</code></pre><p>注意上面的配置将强制使用一个 Razor 视图文件。如果你想使用一个普通 HTML 文件，将使用不同的方法：<a href=\"http://stackoverflow.com/questions/20871938/render-html-file-in-asp-net-mvc-view\"> This SO article might help you.</a></p>\n<p>If you are using <a href=\"http://nancyfx.org/\">Nancy FX</a>, then the config is just as simple. Locate your <code>IndexModule.cs</code> or whatever you called it and make sure it looks something like this and all will be well:</p>\n<pre><code>public class IndexModule : NancyModule {\n  public IndexModule()     {\n    this.Get[&quot;/robots.txt&quot;] = p =&gt; this.Response.AsFile(&quot;robots.txt&quot;);\n    this.Get[&quot;/sitemap.xml&quot;] = p =&gt; this.Response.AsFile(&quot;sitemap.xml&quot;);\n    this.Get[&quot;/&quot;] = x =&gt; this.View[&quot;index&quot;];\n    this.Get[&quot;/{path*}&quot;] = x =&gt; this.View[&quot;index&quot;];\n  }\n}\n</code></pre><p>Similar techniques can be used in other server environments - you just need to make sure that whatever server you’re using, it needs to send back the same <code>index.html</code> regardless of the request being made. All server side frameworks should be able to achieve this. Aurelia will figure out which page to load based on its own route data.</p>\n<h3 id=\"Reusing-an-existing-VM\"><a href=\"#Reusing-an-existing-VM\" class=\"headerlink\" title=\"Reusing an existing VM\"></a>Reusing an existing VM</h3><p>有时你会想要在不同的路由中重用已存在的 View-Model。Aurelia 默认会将那 些路由作为同个 View-Model 的别名，然后只会 build 生命周期、绑定一次。可能这并不是你想要的。看下面的栗子：</p>\n<pre><code>export class App {\n  configureRouter(config) {\n    config.title = &#39;Aurelia&#39;;\n    config.map([\n      { route: &#39;product/a&#39;,    moduleId: &#39;./product&#39;,     nav: true },\n      { route: &#39;product/b&#39;,    moduleId: &#39;./product&#39;,     nav: true },\n    ]);\n  }\n}\n</code></pre>"},{"title":"AMD 与 CMD","date":"2015-01-12T03:06:59.000Z","description":"AMD 和 CMD 做的一些小对比","_content":"\n|&&|AMD|CMD|\n|-|-|-|\n|定义|Asynchronous Module Definition|Common Module Definition|\n|推广源|RequireJS|SeaJS|\n|模块执行|提前执行|延迟执行|\n|依赖写法|依赖就近|依赖前置|\n||||\n|||\n\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/CMD 和 AMD.md","raw":"title: AMD 与 CMD\ndate: 2015-01-12 11:06:59\ncategories: 规范\ndescription: AMD 和 CMD 做的一些小对比\n---\n\n|&&|AMD|CMD|\n|-|-|-|\n|定义|Asynchronous Module Definition|Common Module Definition|\n|推广源|RequireJS|SeaJS|\n|模块执行|提前执行|延迟执行|\n|依赖写法|依赖就近|依赖前置|\n||||\n|||\n\n\n\n\n> Written with [StackEdit](https://stackedit.io/).","slug":"CMD 和 AMD","published":1,"updated":"2015-04-30T02:30:00.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphk001fok1vz521lg4q","content":"<table>\n<thead>\n<tr>\n<th>&amp;&amp;</th>\n<th>AMD</th>\n<th>CMD</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>定义</td>\n<td>Asynchronous Module Definition</td>\n<td>Common Module Definition</td>\n</tr>\n<tr>\n<td>推广源</td>\n<td>RequireJS</td>\n<td>SeaJS</td>\n</tr>\n<tr>\n<td>模块执行</td>\n<td>提前执行</td>\n<td>延迟执行</td>\n</tr>\n<tr>\n<td>依赖写法</td>\n<td>依赖就近</td>\n<td>依赖前置</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>&amp;&amp;</th>\n<th>AMD</th>\n<th>CMD</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>定义</td>\n<td>Asynchronous Module Definition</td>\n<td>Common Module Definition</td>\n</tr>\n<tr>\n<td>推广源</td>\n<td>RequireJS</td>\n<td>SeaJS</td>\n</tr>\n<tr>\n<td>模块执行</td>\n<td>提前执行</td>\n<td>延迟执行</td>\n</tr>\n<tr>\n<td>依赖写法</td>\n<td>依赖就近</td>\n<td>依赖前置</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"JS 怎么克隆对象？","date":"2015-04-27T09:12:03.000Z","description":"JS 克隆对象, JSON, $.extend, 性能","_content":"\n## 对象克隆\n\n不能影响到原来的对象，并且需要深层拷贝的情况，比如原始对象为：\n\n```\nvar oldObj = {a:2123, b:2312, c:[2,3,45,2]};\n\n```\n\n考虑以下方法：\n\n1、使用 JSON API\n\n```\nvar newObj = JSON.parse( JSON.stringify(oldObj));\n```\n\n2、考虑 jquery extend\n\n```\nvar newObj = $.extend(  )\n\n```\n\n3、 new Object() \n\nbalabalabala....再研究。。。\n\n## demo\n\n[In JS Bin](http://jsbin.com/hudoke/2/edit)\n\n## 速度测试\n\n[In JS performance](http://jsperf.com/clone-object-ways)\n\n> Written with [StackEdit](https://stackedit.io/).\n","source":"_posts/JS-怎么克隆对象？.md","raw":"title: \"JS 怎么克隆对象？\"\ndate: 2015-04-27 17:12:03\ncategories: js\ndescription: JS 克隆对象, JSON, $.extend, 性能\n---\n\n## 对象克隆\n\n不能影响到原来的对象，并且需要深层拷贝的情况，比如原始对象为：\n\n```\nvar oldObj = {a:2123, b:2312, c:[2,3,45,2]};\n\n```\n\n考虑以下方法：\n\n1、使用 JSON API\n\n```\nvar newObj = JSON.parse( JSON.stringify(oldObj));\n```\n\n2、考虑 jquery extend\n\n```\nvar newObj = $.extend(  )\n\n```\n\n3、 new Object() \n\nbalabalabala....再研究。。。\n\n## demo\n\n[In JS Bin](http://jsbin.com/hudoke/2/edit)\n\n## 速度测试\n\n[In JS performance](http://jsperf.com/clone-object-ways)\n\n> Written with [StackEdit](https://stackedit.io/).\n","slug":"JS-怎么克隆对象？","published":1,"updated":"2015-04-30T02:29:28.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphm001hok1vtr9ohetm","content":"<h2 id=\"对象克隆\"><a href=\"#对象克隆\" class=\"headerlink\" title=\"对象克隆\"></a>对象克隆</h2><p>不能影响到原来的对象，并且需要深层拷贝的情况，比如原始对象为：</p>\n<pre><code>var oldObj = {a:2123, b:2312, c:[2,3,45,2]};\n</code></pre><p>考虑以下方法：</p>\n<p>1、使用 JSON API</p>\n<pre><code>var newObj = JSON.parse( JSON.stringify(oldObj));\n</code></pre><p>2、考虑 jquery extend</p>\n<pre><code>var newObj = $.extend(  )\n</code></pre><p>3、 new Object() </p>\n<p>balabalabala….再研究。。。</p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p><a href=\"http://jsbin.com/hudoke/2/edit\" target=\"_blank\" rel=\"external\">In JS Bin</a></p>\n<h2 id=\"速度测试\"><a href=\"#速度测试\" class=\"headerlink\" title=\"速度测试\"></a>速度测试</h2><p><a href=\"http://jsperf.com/clone-object-ways\" target=\"_blank\" rel=\"external\">In JS performance</a></p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"对象克隆\"><a href=\"#对象克隆\" class=\"headerlink\" title=\"对象克隆\"></a>对象克隆</h2><p>不能影响到原来的对象，并且需要深层拷贝的情况，比如原始对象为：</p>\n<pre><code>var oldObj = {a:2123, b:2312, c:[2,3,45,2]};\n</code></pre><p>考虑以下方法：</p>\n<p>1、使用 JSON API</p>\n<pre><code>var newObj = JSON.parse( JSON.stringify(oldObj));\n</code></pre><p>2、考虑 jquery extend</p>\n<pre><code>var newObj = $.extend(  )\n</code></pre><p>3、 new Object() </p>\n<p>balabalabala….再研究。。。</p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p><a href=\"http://jsbin.com/hudoke/2/edit\">In JS Bin</a></p>\n<h2 id=\"速度测试\"><a href=\"#速度测试\" class=\"headerlink\" title=\"速度测试\"></a>速度测试</h2><p><a href=\"http://jsperf.com/clone-object-ways\">In JS performance</a></p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"JSON 是否为空","date":"2015-04-30T02:08:28.000Z","description":"js 判断 JSON对象是否为空的写法","_content":"\njquery 中的写法\n\n```\n$.isEmptyObject = function ( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n}\n\n```","source":"_posts/JSON-是否为空.md","raw":"title: \"JSON 是否为空\"\ndate: 2015-04-30 10:08:28\ncategories: js\ndescription: js 判断 JSON对象是否为空的写法\n---\n\njquery 中的写法\n\n```\n$.isEmptyObject = function ( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n}\n\n```","slug":"JSON-是否为空","published":1,"updated":"2015-04-30T02:09:17.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpho001kok1v6sq7odr7","content":"<p>jquery 中的写法</p>\n<pre><code>$.isEmptyObject = function ( obj ) {\n        var name;\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n}\n</code></pre>","excerpt":"","more":"<p>jquery 中的写法</p>\n<pre><code>$.isEmptyObject = function ( obj ) {\n        var name;\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n}\n</code></pre>"},{"title":"a 标签中的 input 文本不能被选中","date":"2015-04-30T02:14:14.000Z","description":"a 标签中的 input 文本不能被选中","_content":"\n若你写了这样一个 `html` 结构\n\n```\n<a href=\"http://iamtutu.com\"> \n\t<input type=\"text\" value=\"something\" />\n</a>\n\n```\n\n会发现 `<input>` 中的文字不能选中，会触发 `<a>` 。\n\n尝试把 `href = \"javascript:void();\"` 这样，但是还是不能选中。\n\n最后，将 `<a>` 的attr属性移除` $().removeAttr()` 就能选中了。\n\n虽然表面看起来就没有必要有 `<a>` 了，但是如果在需要编辑一个连接的文本时，这个结构还是不错的。编辑的时候，将 `href` 属性先储存在别的地方，移除 `<a>` 的 href 属性，编辑完成之后，再恢复就 OK 了。\n\n另外，css 选中文本的样式\n```\n::selection { background:lightblue; }\n```","source":"_posts/a-标签中的-input-文本不能被选中.md","raw":"title: \"a 标签中的 input 文本不能被选中\"\ndate: 2015-04-30 10:14:14\ncategories: html\ndescription: a 标签中的 input 文本不能被选中\n---\n\n若你写了这样一个 `html` 结构\n\n```\n<a href=\"http://iamtutu.com\"> \n\t<input type=\"text\" value=\"something\" />\n</a>\n\n```\n\n会发现 `<input>` 中的文字不能选中，会触发 `<a>` 。\n\n尝试把 `href = \"javascript:void();\"` 这样，但是还是不能选中。\n\n最后，将 `<a>` 的attr属性移除` $().removeAttr()` 就能选中了。\n\n虽然表面看起来就没有必要有 `<a>` 了，但是如果在需要编辑一个连接的文本时，这个结构还是不错的。编辑的时候，将 `href` 属性先储存在别的地方，移除 `<a>` 的 href 属性，编辑完成之后，再恢复就 OK 了。\n\n另外，css 选中文本的样式\n```\n::selection { background:lightblue; }\n```","slug":"a-标签中的-input-文本不能被选中","published":1,"updated":"2015-04-30T02:22:27.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphr001mok1vmnritilm","content":"<p>若你写了这样一个 <code>html</code> 结构</p>\n<pre><code>&lt;a href=&quot;http://iamtutu.com&quot;&gt; \n    &lt;input type=&quot;text&quot; value=&quot;something&quot; /&gt;\n&lt;/a&gt;\n</code></pre><p>会发现 <code>&lt;input&gt;</code> 中的文字不能选中，会触发 <code>&lt;a&gt;</code> 。</p>\n<p>尝试把 <code>href = &quot;javascript:void();&quot;</code> 这样，但是还是不能选中。</p>\n<p>最后，将 <code>&lt;a&gt;</code> 的attr属性移除<code>$().removeAttr()</code> 就能选中了。</p>\n<p>虽然表面看起来就没有必要有 <code>&lt;a&gt;</code> 了，但是如果在需要编辑一个连接的文本时，这个结构还是不错的。编辑的时候，将 <code>href</code> 属性先储存在别的地方，移除 <code>&lt;a&gt;</code> 的 href 属性，编辑完成之后，再恢复就 OK 了。</p>\n<p>另外，css 选中文本的样式</p>\n<pre><code>::selection { background:lightblue; }\n</code></pre>","excerpt":"","more":"<p>若你写了这样一个 <code>html</code> 结构</p>\n<pre><code>&lt;a href=&quot;http://iamtutu.com&quot;&gt; \n    &lt;input type=&quot;text&quot; value=&quot;something&quot; /&gt;\n&lt;/a&gt;\n</code></pre><p>会发现 <code>&lt;input&gt;</code> 中的文字不能选中，会触发 <code>&lt;a&gt;</code> 。</p>\n<p>尝试把 <code>href = &quot;javascript:void();&quot;</code> 这样，但是还是不能选中。</p>\n<p>最后，将 <code>&lt;a&gt;</code> 的attr属性移除<code>$().removeAttr()</code> 就能选中了。</p>\n<p>虽然表面看起来就没有必要有 <code>&lt;a&gt;</code> 了，但是如果在需要编辑一个连接的文本时，这个结构还是不错的。编辑的时候，将 <code>href</code> 属性先储存在别的地方，移除 <code>&lt;a&gt;</code> 的 href 属性，编辑完成之后，再恢复就 OK 了。</p>\n<p>另外，css 选中文本的样式</p>\n<pre><code>::selection { background:lightblue; }\n</code></pre>"},{"title":"git bash 之 export 与 ~/.bashrc","date":"2015-04-30T02:05:35.000Z","description":"git bash 之 export 与 ~/.bashrc","_content":"\n在 git bash 里面，用 export 命令可以显示出当前命令行工具的变量。常见的如 `PATH` 或 `PWD` 等。\n\n### 1. 环境变量 in Windows\n- 在环境变量里面增加变量，需要重启电脑才会在生效之后，才能 `export` 的时候读到新变量。\n\n### 2. ~/.bashrc 文件\n- ~/.bashrc 文件会在每次打开 git bash 时候被执行\n- 在 ~/.bashrc 文件中写入函数，可以在 git bash 中用函数名执行函数中的命令\n- ~/.bashrc 文件中用 `export http_proxy=http://proxy.XXX.com:8080` 的形式，可以向命令行添加变量，在每次打开 git bash 后会执行。\n","source":"_posts/git-bash-之-export-与-bashrc.md","raw":"title: \"git bash 之 export 与 ~/.bashrc\"\ndate: 2015-04-30 10:05:35\ncategories: git\ndescription: git bash 之 export 与 ~/.bashrc\n---\n\n在 git bash 里面，用 export 命令可以显示出当前命令行工具的变量。常见的如 `PATH` 或 `PWD` 等。\n\n### 1. 环境变量 in Windows\n- 在环境变量里面增加变量，需要重启电脑才会在生效之后，才能 `export` 的时候读到新变量。\n\n### 2. ~/.bashrc 文件\n- ~/.bashrc 文件会在每次打开 git bash 时候被执行\n- 在 ~/.bashrc 文件中写入函数，可以在 git bash 中用函数名执行函数中的命令\n- ~/.bashrc 文件中用 `export http_proxy=http://proxy.XXX.com:8080` 的形式，可以向命令行添加变量，在每次打开 git bash 后会执行。\n","slug":"git-bash-之-export-与-bashrc","published":1,"updated":"2015-04-30T02:23:40.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpht001ook1vudmjosb0","content":"<p>在 git bash 里面，用 export 命令可以显示出当前命令行工具的变量。常见的如 <code>PATH</code> 或 <code>PWD</code> 等。</p>\n<h3 id=\"1-环境变量-in-Windows\"><a href=\"#1-环境变量-in-Windows\" class=\"headerlink\" title=\"1. 环境变量 in Windows\"></a>1. 环境变量 in Windows</h3><ul>\n<li>在环境变量里面增加变量，需要重启电脑才会在生效之后，才能 <code>export</code> 的时候读到新变量。</li>\n</ul>\n<h3 id=\"2-bashrc-文件\"><a href=\"#2-bashrc-文件\" class=\"headerlink\" title=\"2. ~/.bashrc 文件\"></a>2. ~/.bashrc 文件</h3><ul>\n<li>~/.bashrc 文件会在每次打开 git bash 时候被执行</li>\n<li>在 ~/.bashrc 文件中写入函数，可以在 git bash 中用函数名执行函数中的命令</li>\n<li>~/.bashrc 文件中用 <code>export http_proxy=http://proxy.XXX.com:8080</code> 的形式，可以向命令行添加变量，在每次打开 git bash 后会执行。</li>\n</ul>\n","excerpt":"","more":"<p>在 git bash 里面，用 export 命令可以显示出当前命令行工具的变量。常见的如 <code>PATH</code> 或 <code>PWD</code> 等。</p>\n<h3 id=\"1-环境变量-in-Windows\"><a href=\"#1-环境变量-in-Windows\" class=\"headerlink\" title=\"1. 环境变量 in Windows\"></a>1. 环境变量 in Windows</h3><ul>\n<li>在环境变量里面增加变量，需要重启电脑才会在生效之后，才能 <code>export</code> 的时候读到新变量。</li>\n</ul>\n<h3 id=\"2-bashrc-文件\"><a href=\"#2-bashrc-文件\" class=\"headerlink\" title=\"2. ~/.bashrc 文件\"></a>2. ~/.bashrc 文件</h3><ul>\n<li>~/.bashrc 文件会在每次打开 git bash 时候被执行</li>\n<li>在 ~/.bashrc 文件中写入函数，可以在 git bash 中用函数名执行函数中的命令</li>\n<li>~/.bashrc 文件中用 <code>export http_proxy=http://proxy.XXX.com:8080</code> 的形式，可以向命令行添加变量，在每次打开 git bash 后会执行。</li>\n</ul>\n"},{"title":"git bash 使用 sublime text 打开文件","date":"2015-04-30T02:09:46.000Z","description":"git bash 使用 sublime text 打开文件","_content":"\n用 hexo 写博客时，使用 `hexo new postname` 新建了一个新的文件，每次想直接打开都要从文件夹打开，实在不符合我们这些 Geek（懒人）的做派。纠结很久之后，终于找到这篇大大的[博客](https://danlimerick.wordpress.com/2014/01/07/git-for-windows-tip-opening-sublime-text-from-bash/)，他的解决办法如下。\n\n### 1. 新建一个文件命名为你想要的命令，比如 `subl` 没有后缀（重要），内容如下：\n\n```\n#!/bin/sh\n\"C:\\Program Files\\Sublime Text 2\\sublime_text.exe\" $1 &\n```\n\n- 第一行是说这是个 shell 脚本\n- 第二行的字符串是sublime 的安装目录\n- 第二行的$1 是取的命令之后输入的参数\n- 第二行的&是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash\n\n### 2. 保存到 `C:\\Program Files (x86)\\Git\\bin` 目录下\n\n### 3. 使用方法\n\n```\nsubl text.txt\n```\n在当前目录打开一个新文件\n\n```\nsubl .\n```\n\n\n是不是 so easy ！shell 脚本麻吉强大，此时墙裂后悔上课时(～﹃～)~zZ啊。\n","source":"_posts/git-bash-使用-sublime-text-打开文件.md","raw":"title: \"git bash 使用 sublime text 打开文件\"\ndate: 2015-04-30 10:09:46\ncategories: git\ndescription: git bash 使用 sublime text 打开文件\n---\n\n用 hexo 写博客时，使用 `hexo new postname` 新建了一个新的文件，每次想直接打开都要从文件夹打开，实在不符合我们这些 Geek（懒人）的做派。纠结很久之后，终于找到这篇大大的[博客](https://danlimerick.wordpress.com/2014/01/07/git-for-windows-tip-opening-sublime-text-from-bash/)，他的解决办法如下。\n\n### 1. 新建一个文件命名为你想要的命令，比如 `subl` 没有后缀（重要），内容如下：\n\n```\n#!/bin/sh\n\"C:\\Program Files\\Sublime Text 2\\sublime_text.exe\" $1 &\n```\n\n- 第一行是说这是个 shell 脚本\n- 第二行的字符串是sublime 的安装目录\n- 第二行的$1 是取的命令之后输入的参数\n- 第二行的&是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash\n\n### 2. 保存到 `C:\\Program Files (x86)\\Git\\bin` 目录下\n\n### 3. 使用方法\n\n```\nsubl text.txt\n```\n在当前目录打开一个新文件\n\n```\nsubl .\n```\n\n\n是不是 so easy ！shell 脚本麻吉强大，此时墙裂后悔上课时(～﹃～)~zZ啊。\n","slug":"git-bash-使用-sublime-text-打开文件","published":1,"updated":"2015-04-30T02:25:51.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugphv001rok1v2cftie6j","content":"<p>用 hexo 写博客时，使用 <code>hexo new postname</code> 新建了一个新的文件，每次想直接打开都要从文件夹打开，实在不符合我们这些 Geek（懒人）的做派。纠结很久之后，终于找到这篇大大的<a href=\"https://danlimerick.wordpress.com/2014/01/07/git-for-windows-tip-opening-sublime-text-from-bash/\" target=\"_blank\" rel=\"external\">博客</a>，他的解决办法如下。</p>\n<h3 id=\"1-新建一个文件命名为你想要的命令，比如-subl-没有后缀（重要），内容如下：\"><a href=\"#1-新建一个文件命名为你想要的命令，比如-subl-没有后缀（重要），内容如下：\" class=\"headerlink\" title=\"1. 新建一个文件命名为你想要的命令，比如 subl 没有后缀（重要），内容如下：\"></a>1. 新建一个文件命名为你想要的命令，比如 <code>subl</code> 没有后缀（重要），内容如下：</h3><pre><code>#!/bin/sh\n&quot;C:\\Program Files\\Sublime Text 2\\sublime_text.exe&quot; $1 &amp;\n</code></pre><ul>\n<li>第一行是说这是个 shell 脚本</li>\n<li>第二行的字符串是sublime 的安装目录</li>\n<li>第二行的$1 是取的命令之后输入的参数</li>\n<li>第二行的&amp;是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash</li>\n</ul>\n<h3 id=\"2-保存到-C-Program-Files-x86-Git-bin-目录下\"><a href=\"#2-保存到-C-Program-Files-x86-Git-bin-目录下\" class=\"headerlink\" title=\"2. 保存到 C:\\Program Files (x86)\\Git\\bin 目录下\"></a>2. 保存到 <code>C:\\Program Files (x86)\\Git\\bin</code> 目录下</h3><h3 id=\"3-使用方法\"><a href=\"#3-使用方法\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><pre><code>subl text.txt\n</code></pre><p>在当前目录打开一个新文件</p>\n<pre><code>subl .\n</code></pre><p>是不是 so easy ！shell 脚本麻吉强大，此时墙裂后悔上课时(～﹃～)~zZ啊。</p>\n","excerpt":"","more":"<p>用 hexo 写博客时，使用 <code>hexo new postname</code> 新建了一个新的文件，每次想直接打开都要从文件夹打开，实在不符合我们这些 Geek（懒人）的做派。纠结很久之后，终于找到这篇大大的<a href=\"https://danlimerick.wordpress.com/2014/01/07/git-for-windows-tip-opening-sublime-text-from-bash/\">博客</a>，他的解决办法如下。</p>\n<h3 id=\"1-新建一个文件命名为你想要的命令，比如-subl-没有后缀（重要），内容如下：\"><a href=\"#1-新建一个文件命名为你想要的命令，比如-subl-没有后缀（重要），内容如下：\" class=\"headerlink\" title=\"1. 新建一个文件命名为你想要的命令，比如 subl 没有后缀（重要），内容如下：\"></a>1. 新建一个文件命名为你想要的命令，比如 <code>subl</code> 没有后缀（重要），内容如下：</h3><pre><code>#!/bin/sh\n&quot;C:\\Program Files\\Sublime Text 2\\sublime_text.exe&quot; $1 &amp;\n</code></pre><ul>\n<li>第一行是说这是个 shell 脚本</li>\n<li>第二行的字符串是sublime 的安装目录</li>\n<li>第二行的$1 是取的命令之后输入的参数</li>\n<li>第二行的&amp;是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash</li>\n</ul>\n<h3 id=\"2-保存到-C-Program-Files-x86-Git-bin-目录下\"><a href=\"#2-保存到-C-Program-Files-x86-Git-bin-目录下\" class=\"headerlink\" title=\"2. 保存到 C:\\Program Files (x86)\\Git\\bin 目录下\"></a>2. 保存到 <code>C:\\Program Files (x86)\\Git\\bin</code> 目录下</h3><h3 id=\"3-使用方法\"><a href=\"#3-使用方法\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><pre><code>subl text.txt\n</code></pre><p>在当前目录打开一个新文件</p>\n<pre><code>subl .\n</code></pre><p>是不是 so easy ！shell 脚本麻吉强大，此时墙裂后悔上课时(～﹃～)~zZ啊。</p>\n"},{"title":"git 不小心提交了的目录下有 .git 文件，咋办？","date":"2015-04-22T09:31:15.000Z","description":"git submodule 错误","_content":"\n## git 文件目录下有 `.git` 文件\n\n不小心把子目录下一个 .git 文件给 add commit 了，于是没有办法再跟踪 这个目录下文件的变化。\nsubmodules 什么的真是\n\n发现强制删除次文件夹之后，然后再添加就可以了，记得再添加的时候，把文件夹里面的.git 文件删除掉先。\n1、 强制删除\n\n```\nrm -rf xxx/needtodelete/\n```\n\n2、添加没有 .git 文件的文件夹 \n\n3、重新加到主 git 库\n```\ngit add . && git commit -m 'add dir'\n```\n\n这样又能重新管理这个文件夹的版本控制了，o(∩_∩)o 哈哈\n\n> Written with [StackEdit](https://stackedit.io/).","source":"_posts/git-不小心提交了的目录下有-git-文件，咋办？.md","raw":"title: git 不小心提交了的目录下有 .git 文件，咋办？\ndate: 2015-04-22 17:31:15\ncategories: git\ndescription: git submodule 错误\n---\n\n## git 文件目录下有 `.git` 文件\n\n不小心把子目录下一个 .git 文件给 add commit 了，于是没有办法再跟踪 这个目录下文件的变化。\nsubmodules 什么的真是\n\n发现强制删除次文件夹之后，然后再添加就可以了，记得再添加的时候，把文件夹里面的.git 文件删除掉先。\n1、 强制删除\n\n```\nrm -rf xxx/needtodelete/\n```\n\n2、添加没有 .git 文件的文件夹 \n\n3、重新加到主 git 库\n```\ngit add . && git commit -m 'add dir'\n```\n\n这样又能重新管理这个文件夹的版本控制了，o(∩_∩)o 哈哈\n\n> Written with [StackEdit](https://stackedit.io/).","slug":"git-不小心提交了的目录下有-git-文件，咋办？","published":1,"updated":"2015-04-22T09:45:17.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpi7001tok1vo3s2ifg6","content":"<h2 id=\"git-文件目录下有-git-文件\"><a href=\"#git-文件目录下有-git-文件\" class=\"headerlink\" title=\"git 文件目录下有 .git 文件\"></a>git 文件目录下有 <code>.git</code> 文件</h2><p>不小心把子目录下一个 .git 文件给 add commit 了，于是没有办法再跟踪 这个目录下文件的变化。<br>submodules 什么的真是</p>\n<p>发现强制删除次文件夹之后，然后再添加就可以了，记得再添加的时候，把文件夹里面的.git 文件删除掉先。<br>1、 强制删除</p>\n<pre><code>rm -rf xxx/needtodelete/\n</code></pre><p>2、添加没有 .git 文件的文件夹 </p>\n<p>3、重新加到主 git 库</p>\n<pre><code>git add . &amp;&amp; git commit -m &#39;add dir&#39;\n</code></pre><p>这样又能重新管理这个文件夹的版本控制了，o(∩_∩)o 哈哈</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a>.</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"git-文件目录下有-git-文件\"><a href=\"#git-文件目录下有-git-文件\" class=\"headerlink\" title=\"git 文件目录下有 .git 文件\"></a>git 文件目录下有 <code>.git</code> 文件</h2><p>不小心把子目录下一个 .git 文件给 add commit 了，于是没有办法再跟踪 这个目录下文件的变化。<br>submodules 什么的真是</p>\n<p>发现强制删除次文件夹之后，然后再添加就可以了，记得再添加的时候，把文件夹里面的.git 文件删除掉先。<br>1、 强制删除</p>\n<pre><code>rm -rf xxx/needtodelete/\n</code></pre><p>2、添加没有 .git 文件的文件夹 </p>\n<p>3、重新加到主 git 库</p>\n<pre><code>git add . &amp;&amp; git commit -m &#39;add dir&#39;\n</code></pre><p>这样又能重新管理这个文件夹的版本控制了，o(∩_∩)o 哈哈</p>\n<blockquote>\n<p>Written with <a href=\"https://stackedit.io/\">StackEdit</a>.</p>\n</blockquote>\n"},{"title":"git config 常用命令","date":"2015-04-30T02:11:17.000Z","description":"git config 常用命令","_content":"\nP.S:  做全局的设置时，可以这样 `git config --global`\n\n### 帮助\n\n```\ngit config --help # 打开详细版手册\ngit config -h     # 简单暴力我喜欢\n```\n\n### 查看\n```\ngit config -l \ngit config --list\n```\n\n### 修改\n\n没有特殊情况下，都可以设置为全局配置。\n```\ngit config --global alias.co checkout\n```\n\n### 增加\n\n如果事先没有这个配置名称，git 会提示你在前面增加  `--add` 命令\n\n```\ngit config --global --add core.editor \"'C:\\xxx\\xxx\\sublime_text.ext' --wait\"\n```\n\n\n### 删除\n\n```\ngit config --global --unset alias.co checkout\n```\n\n如果提示什么有多个相同的设置。。。的英文时，按照错误指示\n```\ngit config --global --unset-all alias.co checkout\n```\n\n不得不说，git 的提示是挺周到的。\n\n## git config 小抄\n\n下面是我现在用的配置\n\n### 1. 设置别名\n\n有些常用命令略长，当 tab 键也不能释放我们的愤怒时，可以试试给他们起外号。\n\n```\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.st status\ngit config --global alias.mg 'merge --no-ff'\n```\n### 2.设置默认浏览器\n\n在 git commit 的时候，可以使用浏览器来写提交注释，基本告别了挤在一行的悲惨命运\n\nP.S :  Windows 环境，sublime text 3 版本\n```\ngit config --global --add core.editor \"'C:\\xxx\\xxx\\sublime_text.ext' --wait\"\n```\n ","source":"_posts/git-config-常用命.md","raw":"title: \"git config 常用命令\"\ndate: 2015-04-30 10:11:17\ncategories: git\ndescription: git config 常用命令\n---\n\nP.S:  做全局的设置时，可以这样 `git config --global`\n\n### 帮助\n\n```\ngit config --help # 打开详细版手册\ngit config -h     # 简单暴力我喜欢\n```\n\n### 查看\n```\ngit config -l \ngit config --list\n```\n\n### 修改\n\n没有特殊情况下，都可以设置为全局配置。\n```\ngit config --global alias.co checkout\n```\n\n### 增加\n\n如果事先没有这个配置名称，git 会提示你在前面增加  `--add` 命令\n\n```\ngit config --global --add core.editor \"'C:\\xxx\\xxx\\sublime_text.ext' --wait\"\n```\n\n\n### 删除\n\n```\ngit config --global --unset alias.co checkout\n```\n\n如果提示什么有多个相同的设置。。。的英文时，按照错误指示\n```\ngit config --global --unset-all alias.co checkout\n```\n\n不得不说，git 的提示是挺周到的。\n\n## git config 小抄\n\n下面是我现在用的配置\n\n### 1. 设置别名\n\n有些常用命令略长，当 tab 键也不能释放我们的愤怒时，可以试试给他们起外号。\n\n```\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.st status\ngit config --global alias.mg 'merge --no-ff'\n```\n### 2.设置默认浏览器\n\n在 git commit 的时候，可以使用浏览器来写提交注释，基本告别了挤在一行的悲惨命运\n\nP.S :  Windows 环境，sublime text 3 版本\n```\ngit config --global --add core.editor \"'C:\\xxx\\xxx\\sublime_text.ext' --wait\"\n```\n ","slug":"git-config-常用命","published":1,"updated":"2015-04-30T02:11:50.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpi9001wok1voes0d31c","content":"<p>P.S:  做全局的设置时，可以这样 <code>git config --global</code></p>\n<h3 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h3><pre><code>git config --help # 打开详细版手册\ngit config -h     # 简单暴力我喜欢\n</code></pre><h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><pre><code>git config -l \ngit config --list\n</code></pre><h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>没有特殊情况下，都可以设置为全局配置。</p>\n<pre><code>git config --global alias.co checkout\n</code></pre><h3 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h3><p>如果事先没有这个配置名称，git 会提示你在前面增加  <code>--add</code> 命令</p>\n<pre><code>git config --global --add core.editor &quot;&#39;C:\\xxx\\xxx\\sublime_text.ext&#39; --wait&quot;\n</code></pre><h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><pre><code>git config --global --unset alias.co checkout\n</code></pre><p>如果提示什么有多个相同的设置。。。的英文时，按照错误指示</p>\n<pre><code>git config --global --unset-all alias.co checkout\n</code></pre><p>不得不说，git 的提示是挺周到的。</p>\n<h2 id=\"git-config-小抄\"><a href=\"#git-config-小抄\" class=\"headerlink\" title=\"git config 小抄\"></a>git config 小抄</h2><p>下面是我现在用的配置</p>\n<h3 id=\"1-设置别名\"><a href=\"#1-设置别名\" class=\"headerlink\" title=\"1. 设置别名\"></a>1. 设置别名</h3><p>有些常用命令略长，当 tab 键也不能释放我们的愤怒时，可以试试给他们起外号。</p>\n<pre><code>git config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.st status\ngit config --global alias.mg &#39;merge --no-ff&#39;\n</code></pre><h3 id=\"2-设置默认浏览器\"><a href=\"#2-设置默认浏览器\" class=\"headerlink\" title=\"2.设置默认浏览器\"></a>2.设置默认浏览器</h3><p>在 git commit 的时候，可以使用浏览器来写提交注释，基本告别了挤在一行的悲惨命运</p>\n<p>P.S :  Windows 环境，sublime text 3 版本</p>\n<pre><code>git config --global --add core.editor &quot;&#39;C:\\xxx\\xxx\\sublime_text.ext&#39; --wait&quot;\n</code></pre>","excerpt":"","more":"<p>P.S:  做全局的设置时，可以这样 <code>git config --global</code></p>\n<h3 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h3><pre><code>git config --help # 打开详细版手册\ngit config -h     # 简单暴力我喜欢\n</code></pre><h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><pre><code>git config -l \ngit config --list\n</code></pre><h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>没有特殊情况下，都可以设置为全局配置。</p>\n<pre><code>git config --global alias.co checkout\n</code></pre><h3 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h3><p>如果事先没有这个配置名称，git 会提示你在前面增加  <code>--add</code> 命令</p>\n<pre><code>git config --global --add core.editor &quot;&#39;C:\\xxx\\xxx\\sublime_text.ext&#39; --wait&quot;\n</code></pre><h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><pre><code>git config --global --unset alias.co checkout\n</code></pre><p>如果提示什么有多个相同的设置。。。的英文时，按照错误指示</p>\n<pre><code>git config --global --unset-all alias.co checkout\n</code></pre><p>不得不说，git 的提示是挺周到的。</p>\n<h2 id=\"git-config-小抄\"><a href=\"#git-config-小抄\" class=\"headerlink\" title=\"git config 小抄\"></a>git config 小抄</h2><p>下面是我现在用的配置</p>\n<h3 id=\"1-设置别名\"><a href=\"#1-设置别名\" class=\"headerlink\" title=\"1. 设置别名\"></a>1. 设置别名</h3><p>有些常用命令略长，当 tab 键也不能释放我们的愤怒时，可以试试给他们起外号。</p>\n<pre><code>git config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.st status\ngit config --global alias.mg &#39;merge --no-ff&#39;\n</code></pre><h3 id=\"2-设置默认浏览器\"><a href=\"#2-设置默认浏览器\" class=\"headerlink\" title=\"2.设置默认浏览器\"></a>2.设置默认浏览器</h3><p>在 git commit 的时候，可以使用浏览器来写提交注释，基本告别了挤在一行的悲惨命运</p>\n<p>P.S :  Windows 环境，sublime text 3 版本</p>\n<pre><code>git config --global --add core.editor &quot;&#39;C:\\xxx\\xxx\\sublime_text.ext&#39; --wait&quot;\n</code></pre>"},{"title":"最近要学习的东西","date":"2014-06-10T03:06:59.000Z","description":"最近要学习的东西","_content":"\n#~最近要学习的东西~#\n- **requireJS** ----- 资源框架？\n- **seaJS** ----------- 资源框架too？\n- **greensock **--- 几百年前看的动画库\n- **jquery address**---无刷新平滑切换页面（其实是AJAX+URL变化事件操作？？？）\n- **IIO**---------------JS游戏库\n- **html5**-----------API总结\n- **倒萨**\n- **我什么都不想看~\\(≧▽≦)/~啦啦啦**\n","source":"_posts/14-06-todo.md","raw":"title: 最近要学习的东西\ndate: 2014-06-10 11:06:59\ncategories: to-do\ndescription: 最近要学习的东西\n---\n\n#~最近要学习的东西~#\n- **requireJS** ----- 资源框架？\n- **seaJS** ----------- 资源框架too？\n- **greensock **--- 几百年前看的动画库\n- **jquery address**---无刷新平滑切换页面（其实是AJAX+URL变化事件操作？？？）\n- **IIO**---------------JS游戏库\n- **html5**-----------API总结\n- **倒萨**\n- **我什么都不想看~\\(≧▽≦)/~啦啦啦**\n","slug":"14-06-todo","published":1,"updated":"2015-02-13T03:56:26.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpia001yok1vhy87gzxk","content":"<p>#~最近要学习的东西~#</p>\n<ul>\n<li><strong>requireJS</strong> —– 资源框架？</li>\n<li><strong>seaJS</strong> ———– 资源框架too？</li>\n<li><strong>greensock </strong>— 几百年前看的动画库</li>\n<li><strong>jquery address</strong>—无刷新平滑切换页面（其实是AJAX+URL变化事件操作？？？）</li>\n<li><strong>IIO</strong>—————JS游戏库</li>\n<li><strong>html5</strong>———–API总结</li>\n<li><strong>倒萨</strong></li>\n<li><strong>我什么都不想看~(≧▽≦)/~啦啦啦</strong></li>\n</ul>\n","excerpt":"","more":"<p>#~最近要学习的东西~#</p>\n<ul>\n<li><strong>requireJS</strong> —– 资源框架？</li>\n<li><strong>seaJS</strong> ———– 资源框架too？</li>\n<li><strong>greensock </strong>— 几百年前看的动画库</li>\n<li><strong>jquery address</strong>—无刷新平滑切换页面（其实是AJAX+URL变化事件操作？？？）</li>\n<li><strong>IIO</strong>—————JS游戏库</li>\n<li><strong>html5</strong>———–API总结</li>\n<li><strong>倒萨</strong></li>\n<li><strong>我什么都不想看~(≧▽≦)/~啦啦啦</strong></li>\n</ul>\n"},{"title":"我就是记不住 callee 与 caller 的区别","date":"2015-04-22T08:53:14.000Z","description":"js 中的 callee 与 caller 的区别","_content":"# 魔法阵在召唤~~~~\n\n### caller 与 callee\n\n```\n\nfunction fun1(){\n\n  // callee [kɔ:'li:] 被召者 当前函数--我\n  console.log('callee=====',arguments.callee)\n  \n  // caller ['kɔ:lə] 召唤者 调用当前函数的函数--调用我的函数\n  console.log('caller=====',arguments.callee.caller)\n //or console.log(fun1.caller)\t\n}\n\nfunction fun2(){\n  fun1();\n}\n\nfun2();\n```\n[demo](http://jsbin.com/miqok/5/edit)","source":"_posts/我就是记不住-callee-与-caller-的区别.md","raw":"title: 我就是记不住 callee 与 caller 的区别\ndate: 2015-04-22 16:53:14\ncategories: js\ndescription: js 中的 callee 与 caller 的区别\n---\n# 魔法阵在召唤~~~~\n\n### caller 与 callee\n\n```\n\nfunction fun1(){\n\n  // callee [kɔ:'li:] 被召者 当前函数--我\n  console.log('callee=====',arguments.callee)\n  \n  // caller ['kɔ:lə] 召唤者 调用当前函数的函数--调用我的函数\n  console.log('caller=====',arguments.callee.caller)\n //or console.log(fun1.caller)\t\n}\n\nfunction fun2(){\n  fun1();\n}\n\nfun2();\n```\n[demo](http://jsbin.com/miqok/5/edit)","slug":"我就是记不住-callee-与-caller-的区别","published":1,"updated":"2015-04-22T09:26:21.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimbugpid0020ok1v8p1lzo3e","content":"<h1 id=\"魔法阵在召唤\"><a href=\"#魔法阵在召唤\" class=\"headerlink\" title=\"魔法阵在召唤~~~~\"></a>魔法阵在召唤~~~~</h1><h3 id=\"caller-与-callee\"><a href=\"#caller-与-callee\" class=\"headerlink\" title=\"caller 与 callee\"></a>caller 与 callee</h3><pre><code>\nfunction fun1(){\n\n  // callee [kɔ:&#39;li:] 被召者 当前函数--我\n  console.log(&#39;callee=====&#39;,arguments.callee)\n\n  // caller [&#39;kɔ:lə] 召唤者 调用当前函数的函数--调用我的函数\n  console.log(&#39;caller=====&#39;,arguments.callee.caller)\n //or console.log(fun1.caller)    \n}\n\nfunction fun2(){\n  fun1();\n}\n\nfun2();\n</code></pre><p><a href=\"http://jsbin.com/miqok/5/edit\" target=\"_blank\" rel=\"external\">demo</a></p>\n","excerpt":"","more":"<h1 id=\"魔法阵在召唤\"><a href=\"#魔法阵在召唤\" class=\"headerlink\" title=\"魔法阵在召唤~~~~\"></a>魔法阵在召唤~~~~</h1><h3 id=\"caller-与-callee\"><a href=\"#caller-与-callee\" class=\"headerlink\" title=\"caller 与 callee\"></a>caller 与 callee</h3><pre><code>\nfunction fun1(){\n\n  // callee [kɔ:&#39;li:] 被召者 当前函数--我\n  console.log(&#39;callee=====&#39;,arguments.callee)\n\n  // caller [&#39;kɔ:lə] 召唤者 调用当前函数的函数--调用我的函数\n  console.log(&#39;caller=====&#39;,arguments.callee.caller)\n //or console.log(fun1.caller)    \n}\n\nfunction fun2(){\n  fun1();\n}\n\nfun2();\n</code></pre><p><a href=\"http://jsbin.com/miqok/5/edit\">demo</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cimbugpg80001ok1v58ofzjgj","category_id":"cimbugpgh0005ok1vejxctfir","_id":"cimbugpgr000bok1va7kgtvfk"},{"post_id":"cimbugpge0003ok1vk3xuoj4b","category_id":"cimbugpgq0009ok1vyoi48aql","_id":"cimbugpgx000gok1vxn89mw0e"},{"post_id":"cimbugpgl0006ok1vzz6no4df","category_id":"cimbugpgt000dok1veobo6x8s","_id":"cimbugph1000kok1vfiq6vpft"},{"post_id":"cimbugpgm0007ok1vw48snxfg","category_id":"cimbugpgy000hok1vseu3q0y6","_id":"cimbugph4000ook1vasiizvyn"},{"post_id":"cimbugpgo0008ok1vaoum7q9b","category_id":"cimbugph1000lok1vt8mf450d","_id":"cimbugph6000sok1vzov4wzl0"},{"post_id":"cimbugph5000rok1ve4hrap4m","category_id":"cimbugpgt000dok1veobo6x8s","_id":"cimbugph9000wok1v3psqelfq"},{"post_id":"cimbugpgq000aok1v607iwmjp","category_id":"cimbugph5000qok1vdkmzvg2v","_id":"cimbugphb000zok1v0wyzp0th"},{"post_id":"cimbugph7000tok1vt87pmep9","category_id":"cimbugpgt000dok1veobo6x8s","_id":"cimbugphc0011ok1vdyqe057s"},{"post_id":"cimbugph8000vok1vb4i8w6f9","category_id":"cimbugpgt000dok1veobo6x8s","_id":"cimbugphe0014ok1vcksc9bbb"},{"post_id":"cimbugpgs000cok1vfn5ppeki","category_id":"cimbugph5000qok1vdkmzvg2v","_id":"cimbugphf0016ok1vhvo3r3c0"},{"post_id":"cimbugpha000xok1vuy3pbieg","category_id":"cimbugpgt000dok1veobo6x8s","_id":"cimbugphh0019ok1v2t6dm6ep"},{"post_id":"cimbugphb0010ok1v380c0ruv","category_id":"cimbugphb000yok1vahw7a1k9","_id":"cimbugphi001bok1v642wy3ne"},{"post_id":"cimbugpgu000eok1vecp7a6mi","category_id":"cimbugphb000yok1vahw7a1k9","_id":"cimbugphk001eok1viwdvjxd1"},{"post_id":"cimbugpgw000fok1vhg1j7l2a","category_id":"cimbugph5000qok1vdkmzvg2v","_id":"cimbugphl001gok1v667sn42l"},{"post_id":"cimbugphh001aok1va0tjnrr8","category_id":"cim0p8nxq00014h7od5ubbt18","_id":"cimbugphn001iok1vktcs3op5"},{"post_id":"cimbugpgz000iok1vxpq2fvzy","category_id":"cimbugph5000qok1vdkmzvg2v","_id":"cimbugphq001lok1vckmd1gln"},{"post_id":"cimbugphj001cok1vyy6qyp0r","category_id":"cim0p8nxq00014h7od5ubbt18","_id":"cimbugphs001nok1vz9b1thfb"},{"post_id":"cimbugphk001fok1vz521lg4q","category_id":"cimbugphk001dok1vlamrooud","_id":"cimbugphv001qok1vy5dq5ck4"},{"post_id":"cimbugph0000jok1vpml33u6c","category_id":"cimbugphk001dok1vlamrooud","_id":"cimbugpi7001sok1v9xrzje2l"},{"post_id":"cimbugph2000mok1v801ydckf","category_id":"cimbugpho001jok1v6qn4fc1v","_id":"cimbugpi9001vok1vael14m0m"},{"post_id":"cimbugph3000nok1vnjxc8z42","category_id":"cimbugpho001jok1v6qn4fc1v","_id":"cimbugpia001xok1v696xufsb"},{"post_id":"cimbugph4000pok1vom2m4bux","category_id":"cimbugpi9001uok1v1siakhlb","_id":"cimbugpie0021ok1v66adkqkk"},{"post_id":"cimbugpid0020ok1v8p1lzo3e","category_id":"cimbugpi9001uok1v1siakhlb","_id":"cimbugpig0023ok1vgm5wn74z"},{"post_id":"cimbugphc0012ok1vgn1ptawr","category_id":"cimbugpi9001uok1v1siakhlb","_id":"cimbugpih0025ok1v76omu9nj"},{"post_id":"cimbugphe0015ok1vynca0dyx","category_id":"cimbugpi9001uok1v1siakhlb","_id":"cimbugpih0026ok1v7wut0272"},{"post_id":"cimbugphf0017ok1vutiuv320","category_id":"cimbugpig0024ok1vjrzd6dys","_id":"cimbugpii0028ok1vecbbrev9"},{"post_id":"cimbugphm001hok1vtr9ohetm","category_id":"cimbugpi9001uok1v1siakhlb","_id":"cimbugpij002aok1vga7xadxt"},{"post_id":"cimbugpho001kok1v6sq7odr7","category_id":"cimbugpi9001uok1v1siakhlb","_id":"cimbugpik002cok1v4tt83ies"},{"post_id":"cimbugphr001mok1vmnritilm","category_id":"cimbugpij002bok1vairadin6","_id":"cimbugpil002eok1vt24tojea"},{"post_id":"cimbugpht001ook1vudmjosb0","category_id":"cimbugpil002dok1vktan65d6","_id":"cimbugpim002gok1vkz5zzacz"},{"post_id":"cimbugphv001rok1v2cftie6j","category_id":"cimbugpil002dok1vktan65d6","_id":"cimbugpim002iok1vjf9d5zuz"},{"post_id":"cimbugpi7001tok1vo3s2ifg6","category_id":"cimbugpil002dok1vktan65d6","_id":"cimbugpin002kok1v8yu4akzv"},{"post_id":"cimbugpi9001wok1voes0d31c","category_id":"cimbugpil002dok1vktan65d6","_id":"cimbugpio002mok1vj2fjk9vs"},{"post_id":"cimbugpia001yok1vhy87gzxk","category_id":"cimbugpig0024ok1vjrzd6dys","_id":"cimbugpio002nok1v4j2chhzb"}],"PostTag":[],"Tag":[{"name":"css","_id":"cim0ezrot0002197ol14w855h"},{"name":"test","_id":"cim0ezrov0003197oh9un30m8"}]}}